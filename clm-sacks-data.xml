<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "http://bugs.cgd.ucar.edu/page.cgi?id=bugzilla.dtd">

<bugzilla version="5.0.3"
          urlbase="http://bugs.cgd.ucar.edu/"
          
          maintainer="systems@cgd.ucar.edu"
          exporter="andre@ucar.edu"
>

    <bug>
          <bug_id>1397</bug_id>
          
          <creation_ts>2011-08-22 13:49:04 -0600</creation_ts>
          <short_desc>c2l_scale_type not specified for many history fields</short_desc>
          <delta_ts>2016-05-05 14:24:19 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P4</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>oleson@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
    
    <cc>sacks@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387203-w9v6GycFHJwMReNEPzNYjTUXnYz-3vORbfBz6IZq9cU</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>4196</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2011-08-22 13:49:04 -0600</bug_when>
    <thetext>Many history fields do not have a c2l_scale_type parameter (in histFldsMod), but it seems they should. For example, there is a set of water flux variables, starting with QFLX_RAIN_GRND and ending with QFLX_DEW_SNOW, most of which do not have a c2l_scale_type. From talking with Keith Oleson, it seems that at least some and maybe all of these should have c2l_scale_type=&apos;urbanf&apos;, by analogy with similar fluxes that do have a c2l_scale_type specified.

From talking with Keith Oleson: it sounds like most fluxes should have c2l_scale_type=&apos;urbanf&apos;, but this isn&apos;t necessarily always true. So this will require more investigation to determine the appropriate scale type for each history field. 

Most (all?) of the fields that do not have a c2l_scale_type are ones that were added after the urban model came in - for example, fields that were added when the CN code came in. So my guess is that whoever added these fields didn&apos;t realize that a c2l_scale_type was required.

After these fields are fixed, perhaps scale_type_c2l should be made a required argument to hist_addfld1d and hist_addfld2d to prevent this problem from arising again in the future.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1426</bug_id>
          
          <creation_ts>2011-10-20 10:49:00 -0600</creation_ts>
          <short_desc>Paths wrong in CLM&apos;s build-namelist after create_clone</short_desc>
          <delta_ts>2016-05-05 14:30:27 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P4</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>erik@ucar.edu</cc>
    
    <cc>jedwards@ucar.edu</cc>
    
    <cc>mvertens@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
    
    <cc>santos@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387203-TBxLgUuyqulvTXGK7HB3KEv5gCyUEzyh8UFdK253r_A</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>4289</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2011-10-20 10:49:00 -0600</bug_when>
    <thetext>After running create_clone followed by configure -case, the paths used by CLM&apos;s build-namelist tool point to the cloned case; they should point to the new case directory.

For example, I cloned a case named test_diags_1014_clm4_0_37, to make a new case test_diags_1017. Here are the paths as documented in clm.buildnml.csh:


#! lnd_in:: Comment:
#! This namelist was created using the following command-line:
#!     /glade/proj3/cseg/people/sacks/cesm_code/clm_landice_diagnostics2/models/lnd/clm/bld/build-namelist -config /glade/proj3/cseg/people/sacks/cesm_tests/test_diags_1014_clm4_0_37/Buildconf/clmconf/config_cache.xml -res 1.9x2.5 
-mask gx1v6 -ignore_ic_year -use_case 2000_glacierMEC_control -infile cesm_namelist -clm_start_type default -rtm_res R05 -rtm_tstep 10800 -co2_ppmv 367.0 -datm_presaero clim_2000 -glc_grid gland20 -namelist &amp;clm_inparm  / -csmdata 
$DIN_LOC_ROOT -inputdata /glade/proj3/cseg/people/sacks/cesm_tests/test_diags_1014_clm4_0_37/Buildconf/clm.input_data_list
#! For help on options use: /glade/proj3/cseg/people/sacks/cesm_code/clm_landice_diagnostics2/models/lnd/clm/bld/build-namelist -help



I don&apos;t understand the implications of this, but Erik says it&apos;s bad.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6960</commentid>
    <comment_count>1</comment_count>
    <who name="Sean Santos">santos@ucar.edu</who>
    <bug_when>2015-07-29 15:32:49 -0600</bug_when>
    <thetext>I suspect that this has been fixed, but if not, it&apos;s a CLM rather than a CIME script issue, I think.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1454</bug_id>
          
          <creation_ts>2012-01-21 19:38:36 -0700</creation_ts>
          <short_desc>Some clm test namelists have empty field lists for 1-d history output</short_desc>
          <delta_ts>2016-05-05 14:37:57 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P4</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>CLM5</target_milestone>
          <dependson>1455</dependson>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387203-A19rNDC3hc2GBczq4sBLWe3wZmDjEAk_3rI1Iw5H-gs</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>4375</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2012-01-21 19:38:36 -0700</bug_when>
    <thetext>Some of the namelists in test/system/nl_files have hist_dov2xy for a history file, but do not add any fields to this file, so there aren&apos;t actually any 1-d comparisons done. 

For example, nl_crop and nl_cn_conly. These namelists could be changed according to the following diffs; note that these field lists are basically the same as what&apos;s currently used in nl_urb, which correctly includes 1-d output:

Index: nl_crop
===================================================================
--- nl_crop     (revision 31723)
+++ nl_crop     (working copy)
@@ -9,6 +9,24 @@
  hist_fincl1    = &apos;GDD0&apos;, &apos;GDD8&apos;, &apos;GDD10&apos;, 
                   &apos;GDD020&apos;, &apos;GDD820&apos;, &apos;GDD1020&apos;,
                   &apos;GDDPLANT&apos;, &apos;GDDTSOI&apos;, &apos;A5TMIN&apos;, &apos;A10TMIN&apos;
+ hist_fincl2    = &apos;TG&apos;,&apos;TBOT&apos;,&apos;FIRE&apos;,&apos;FIRA&apos;,&apos;FLDS&apos;,&apos;FSDS&apos;,
+                  &apos;FSR&apos;,&apos;FSA&apos;,&apos;FGEV&apos;,&apos;FSH&apos;,&apos;FGR&apos;,&apos;TSOI&apos;,
+                  &apos;ERRSOI&apos;,&apos;BUILDHEAT&apos;,&apos;SABV&apos;,&apos;SABG&apos;,
+                  &apos;FSDSVD&apos;,&apos;FSDSND&apos;,&apos;FSDSVI&apos;,&apos;FSDSNI&apos;,
+                  &apos;FSRVD&apos;,&apos;FSRND&apos;,&apos;FSRVI&apos;,&apos;FSRNI&apos;,
+                  &apos;TSA&apos;,&apos;FCTR&apos;,&apos;FCEV&apos;,&apos;QBOT&apos;,&apos;RH2M&apos;,&apos;H2OSOI&apos;,
+                  &apos;H2OSNO&apos;,&apos;SOILLIQ&apos;,&apos;SOILICE&apos;, 
+                  &apos;TSA_U&apos;, &apos;TSA_R&apos;,
+                  &apos;TREFMNAV_U&apos;, &apos;TREFMNAV_R&apos;,
+                  &apos;TREFMXAV_U&apos;, &apos;TREFMXAV_R&apos;,
+                  &apos;TG_U&apos;, &apos;TG_R&apos;,
+                  &apos;RH2M_U&apos;, &apos;RH2M_R&apos;,
+                  &apos;QRUNOFF_U&apos;, &apos;QRUNOFF_R&apos;,
+                  &apos;SoilAlpha_U&apos;,
+                  &apos;Qanth&apos;, &apos;SWup&apos;, &apos;LWup&apos;, &apos;URBAN_AC&apos;, &apos;URBAN_HEAT&apos;,
+                  &apos;GDD0&apos;, &apos;GDD8&apos;, &apos;GDD10&apos;, 
+                  &apos;GDD020&apos;, &apos;GDD820&apos;, &apos;GDD1020&apos;,
+                  &apos;GDDPLANT&apos;, &apos;GDDTSOI&apos;, &apos;A5TMIN&apos;, &apos;A10TMIN&apos;
  /
  ! Adding the following variable causes the model to abort in debug mode
  ! with multiplying by a NaN, bugzilla bug 1325. EBK Apr/28/2011
Index: nl_cn_conly
===================================================================
--- nl_cn_conly (revision 31723)
+++ nl_cn_conly (working copy)
@@ -8,4 +8,19 @@
  hist_dov2xy    = .true.,.false.
  hist_ndens     = 1,1
  hist_fincl1    = &apos;TRAFFICFLUX&apos;, &apos;SNOWLIQ:A&apos;,&apos;SNOWICE:A&apos;
+ hist_fincl2    = &apos;TG&apos;,&apos;TBOT&apos;,&apos;FIRE&apos;,&apos;FIRA&apos;,&apos;FLDS&apos;,&apos;FSDS&apos;,
+                  &apos;FSR&apos;,&apos;FSA&apos;,&apos;FGEV&apos;,&apos;FSH&apos;,&apos;FGR&apos;,&apos;TSOI&apos;,
+                  &apos;ERRSOI&apos;,&apos;BUILDHEAT&apos;,&apos;SABV&apos;,&apos;SABG&apos;,
+                  &apos;FSDSVD&apos;,&apos;FSDSND&apos;,&apos;FSDSVI&apos;,&apos;FSDSNI&apos;,
+                  &apos;FSRVD&apos;,&apos;FSRND&apos;,&apos;FSRVI&apos;,&apos;FSRNI&apos;,
+                  &apos;TSA&apos;,&apos;FCTR&apos;,&apos;FCEV&apos;,&apos;QBOT&apos;,&apos;RH2M&apos;,&apos;H2OSOI&apos;,
+                  &apos;H2OSNO&apos;,&apos;SOILLIQ&apos;,&apos;SOILICE&apos;, 
+                  &apos;TSA_U&apos;, &apos;TSA_R&apos;,
+                  &apos;TREFMNAV_U&apos;, &apos;TREFMNAV_R&apos;,
+                  &apos;TREFMXAV_U&apos;, &apos;TREFMXAV_R&apos;,
+                  &apos;TG_U&apos;, &apos;TG_R&apos;,
+                  &apos;RH2M_U&apos;, &apos;RH2M_R&apos;,
+                  &apos;QRUNOFF_U&apos;, &apos;QRUNOFF_R&apos;,
+                  &apos;SoilAlpha_U&apos;,
+                  &apos;Qanth&apos;, &apos;SWup&apos;, &apos;LWup&apos;, &apos;URBAN_AC&apos;, &apos;URBAN_HEAT&apos;
  /</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>4378</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2012-01-21 19:54:30 -0700</bug_when>
    <thetext>I have not put these changes in place, because when I tried to do so, I got the unexpected error noted in bug 1455.

I think that, for these changes to be put in place, either bug 1455 will have to be fixed, or else the history frequency of these auxiliary files will have to be changed (e.g., to daily???).</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1457</bug_id>
          
          <creation_ts>2012-01-29 20:29:57 -0700</creation_ts>
          <short_desc>minor bug (I think) in creation of soil color in mksurfdata_map</short_desc>
          <delta_ts>2016-05-05 14:51:32 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>mvertens@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387203-O7QIUWUn3kV6xpoXiWn28RiQfZr-vORrURKfzPnKnhQ</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>4389</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2012-01-29 20:29:57 -0700</bug_when>
    <thetext>I think there is a bug in mksoilcol in module mksoilMod in mksurfdata_map... I haven&apos;t done any testing to confirm this, but the logic looks wrong to me:

The relevant code is copied below.

It looks like the intention is that, in the first do loop, wst(0,no) should be 0 if there is ever a non-zero color in this output cell. However, it seems there is an unintentional order dependence here: Consider the following two cases, showing the colors in input grid cells corresponding to a single output grid cell; assume for simplicity that all weights are 0.25:

(1) 0, 0, 0, 1

(2) 1, 0, 0, 0

In case (1), wst(0,no) will be correctly set to 0.0 when the 1 value is read. This will result in soil_color_o = 1.

In case (2), wst(0,no) will be set to 0.0 at first, but upon reading the three 0 values, wst(0,no) will become 0.75. This will result in soil_color_o = 0, which will later be changed to either 4 or 15.

So, if I&apos;m correct in my interpretation of this algorithm, soil_color_o sometimes depends on the order in which values appear in the source grid cells!



     do n = 1,tgridmap%ns
        ni = tgridmap%src_indx(n)
        no = tgridmap%dst_indx(n)
        wt = tgridmap%wovr(n)
        k  = soil_color_i(ni) * tdomain%mask(ni)
        wst(k,no) = wst(k,no) + wt
        if (k&gt;0 .and. wst(k,no)&gt;0.) then
           color(no) = 1
           wst(0,no) = 0.0
        end if
     enddo

     soil_color_o(:) = 0
     do no = 1,ns_o

        ! Rank non-zero weights by color type. wsti(1) is the most extensive
        ! color type. 

        if (color(no) == 1) then
           call mkrank (nsoicol, wst(0:nsoicol,no), miss, wsti, num)
           soil_color_o(no) = wsti(1)
        end if

        ! If land but no color, set color to 15 (in older dataset generic 
        ! soil color 4)
        
        if (nsoicol == 8) then
           if (soil_color_o(no)==0) soil_color_o(no) = 4
        else if (nsoicol == 20) then
           if (soil_color_o(no)==0) soil_color_o(no) = 15
        end if</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1483</bug_id>
          
          <creation_ts>2012-03-22 16:20:18 -0600</creation_ts>
          <short_desc>add meta-types for landunit types</short_desc>
          <delta_ts>2016-05-05 15:00:16 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P4</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387203-W9pOG2H54qzInvPEDgqfmJ0FQjZ10VgPcFNUs6VUkq8</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>4479</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2012-03-22 16:20:18 -0600</bug_when>
    <thetext>There are lots of checks in the code that look like this:

if (ltype(l) == istsoil .or. ltype(l) == istcrop)

or:

if (ltype(l)==istice .or. ltype(l)==istice_mec) then

or:

elseif ( itypelun(l) == istdlak .or. itypelun(l) == istslak ) then


I would propose adding some logical variables like:

is_vegetated(l) (true for soil &amp; crop landunits)

is_ice(l) (true for ice &amp; ice_mec landunits)

is_lake(l) (true for deep &amp; shallow lake)


This would have these advantages:

- more easily extensible: e.g., could add a new vegetated landunit without having to change conditionals that occur throughout the code

- safer: e.g., I just found an instance where a conditional checked ltype(l)==istice, forgetting to also check the possibility of istice_mec</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1631</bug_id>
          
          <creation_ts>2013-02-22 20:13:32 -0700</creation_ts>
          <short_desc>For history fields, change &apos;active&apos; terminology</short_desc>
          <delta_ts>2016-05-09 14:24:41 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.1.z Release</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387203-aVqrIKoyrDd88OzkuiqlyUjQGYn32_xED3u5-Ti6YoE</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>4914</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2013-02-22 20:13:32 -0700</bug_when>
    <thetext>I am adding &apos;active&apos; flags saying: &apos;should computations be done here?&apos; This leads to overloading of the term &apos;active&apos; in histFileMod, which can lead to confusion. Erik suggests that we should eventually rename &apos;active&apos; as it applies to history fields, perhaps to something like default_on.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7497</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2016-05-09 14:24:41 -0600</bug_when>
    <thetext>We&apos;ll address this when putting in tiered output</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1633</bug_id>
          
          <creation_ts>2013-02-27 11:37:02 -0700</creation_ts>
          <short_desc>lots of duplicated code in mksurfdata_map</short_desc>
          <delta_ts>2016-05-09 14:25:42 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.1.z Release</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P5</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>erik@ucar.edu</cc>
    
    <cc>mvertens@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387203-uvFsOSno7jSm5PAgu3xrGIg-DM5pTmCVZ1RUZz1lhws</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>4922</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2013-02-27 11:37:02 -0700</bug_when>
    <thetext>There is a lot of duplicated code in mksurfdata_map. There is duplication between files (fields that are regridded in a simple way have modules that duplicate nearly all code from other modules), as well as within certain files (e.g., mkfileMod). 

This tool is due for a refactoring to remove some of this duplication.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>4926</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2013-02-28 08:58:39 -0700</bug_when>
    <thetext>I had been thinking about making something like a mkgenericMod, so we don&apos;t have to create a new module (with lots of duplicated code) for each new field. (And this could potentially have an array of derived types in its argument list so that it could create multiple fields at once if there are multiple fields on the same raw data file.)

But upon further reflection, I&apos;m not sure this makes sense: this would make it easy to map a generic field that doesn&apos;t require any special handling, but then it would be less clear later what would need to be done if a field needs special handling (e.g., changing all missing values to a certain other value).

So instead, I think it makes sense to maintain the design of having a separate module for each raw data file. But I&apos;ll try to pull out some of this duplicated code (e.g., the error checking code) into a shared module.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>4943</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2013-03-04 16:14:09 -0700</bug_when>
    <thetext>In my branch for changes to clm4.5 mksurfdata_map, which should come to the trunk in a week or so, I have improved things somewhat, but there&apos;s still a lot to do.

The main thing I have done is to pull out the shared error-checking code and diagnostics that are printed to the .log file into shared subroutines. Also, for the new variables I&apos;m adding, I&apos;m reorganizing the routines in a way that makes more sense when there are multiple variables in a single raw data file.

However, I have NOT retrofitted old routines with calls to my new shared routines.

In addition, I have NOT made a common routine to do diagnostic output for an integer-valued field.

In addition, I have NOT done anything about the fact that adding a new variable requires changes in a number of different places throughout the code (and the namelist generation utilities).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5304</commentid>
    <comment_count>3</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2013-06-27 11:30:29 -0600</bug_when>
    <thetext>See also the similar bug 1281</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1642</bug_id>
          
          <creation_ts>2013-03-14 15:22:31 -0600</creation_ts>
          <short_desc>lake depth raw dataset uses the wrong mask</short_desc>
          <delta_ts>2016-05-09 14:27:41 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>rfisher@ucar.edu</cc>
    
    <cc>subin@berkeley.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387203--Q8j3Z4v_5cn3a77q4jjbd5hgj9dLyLItG2EA-x2f6I</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>4964</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2013-03-14 15:22:31 -0600</bug_when>
    <thetext>Currently, we have a single 3x3min rawdata file that contains both percent lake and lake depth. This file has two masks: one that is a standard landmask, and one that gives a mask of where we have real lake depth data (&quot;LAKEDATAMASK&quot;). Currently, we are using the same mapping files for both of these fields, which (I assume) use the LANDMASK for a mask. This is a problem because it means that the fill value (10m) currently gets averaged with the real data when doing the regridding.

I believe that the right thing to do would be to create a new set of mapping files that uses LAKEDATAMASK as a mask. Once we do that, we might want to split the raw data file into two separate files, so we maintain the notion of a single mask per raw data file. However, apparently Zack Subin has said that this rigorous handling of the mask isn&apos;t totally necessary at this point.

Incidentally: I consider this to be a good example of what a file&apos;s mask variable should provide: a mask telling you where there are valid data.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1661</bug_id>
          
          <creation_ts>2013-04-12 06:02:12 -0600</creation_ts>
          <short_desc>mksurfdata_map raw data grids should just be listed in hgrid, not res</short_desc>
          <delta_ts>2016-05-09 14:34:17 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P5</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387203-DeHpeA0ZA0UvQNAxtBhzdF5e4ONQzegcmW1kHVxPPTA</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5032</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2013-04-12 06:02:12 -0600</bug_when>
    <thetext>Currently, it looks like grids for mksurfdata_map raw data files are listed in two places in namelist_definition_clm4_5.xml: the valid values for &apos;res&apos; and the valid values for &apos;hgrid&apos;. The fact that they&apos;re listed in the valid values for &apos;res&apos; can be an annoyance when making mapping files with mkmapdata/regridbatch, because this tool then tries to make mapping files TO these raw data resolutions (which is unnecessary). 

This annoyance is becoming magnified with my addition of a 1km raw data file, for which mapping files take a long time to generate. 

I think these raw data grids should just be listed in hgrid, not res. But I haven&apos;t looked closely at this, so I&apos;m not positive about it. I think this will require changing some things in queryDefaultNamelist.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1662</bug_id>
          
          <creation_ts>2013-04-13 05:16:34 -0600</creation_ts>
          <short_desc>360x720 mapping directory name disagrees with resolution name</short_desc>
          <delta_ts>2016-05-09 14:35:18 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>bugzillaMuszala@gmail.com</cc>
    
    <cc>erik@ucar.edu</cc>
    
    <cc>mvertens@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
    
    <cc>sacks@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387203-21w6i_MN6r6B72wti2bWPLJHnMrfjBxHA7K34lr2Slw</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5036</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2013-04-13 05:16:34 -0600</bug_when>
    <thetext>Recently, the 360x720 resolution was renamed to 360x720cru. However, the directory in inputdata/lnd/clm2/mappingdata/maps is still named 360x720. This (a) could cause confusion, and more importantly (b) messes up the tools we have to post-process files created by mkmapdata (automatically creating xml entries and moving files into the correct location). 

I&apos;m not sure what the correct solution is:

(1) Live with it? It seems like we&apos;ll always be tripping up on this, having to correct the automated mkmapdata post-processing scripts.

(2) Fix the mkmapdata post-processing tools so they give special handling to this grid?

(3) Rename the mapping directory in inputdata? But that will break any older tags.

(4) Rename the mapping directory in inputdata, and make a sym link in yellowstone&apos;s inputdata (360x720 -&gt; 360x720cru) so that old tags will at least continue to work there. This is probably my preference.

Note that a renaming of the inputdata directory will require (a) changing paths in the namelist defaults files, and (b) require running some CESM tests and tools tests at 360x720cru resolution, to make sure all necessary paths have been changed correctly. These tests should be done BEFORE making the sym link suggested in (4).

Because this might be a pain, I think it can wait until after the release.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5037</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik@ucar.edu</who>
    <bug_when>2013-04-13 09:08:57 -0600</bug_when>
    <thetext>Hi Bill

I propose another solution entirely, that isn&apos;t too hard.

Create a new directory called 360x720cru, and put a copy of the mapping files in there. In svn you can do this with &quot;svn copy&quot; so the repo. doesn&apos;t increase in size. On disk we&apos;ll have both copies around, but that&apos;s OK. This means there is no special handling for this grid, and we just have dual copies of the directory on disk. We need the old version around because of previous versions of the model, and the new for ones going forward.

So

inputdata/lnd/clm2/mappingdata/maps/360x720 -- will continue to exist for old tags

inputdata/lnd/clm2/mappingdata/maps/360x720cru -- will exist for new tags going forward.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5038</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2013-04-13 13:53:02 -0600</bug_when>
    <thetext>I agree with Erik&apos;s solution. 

However, in the interest in getting my tools tag made this weekend -- and in the interest of not having this work take over my weekend -- I am not going to make this change as part of this tag. I&apos;m worried that, what seems simple on the surface will actually take some time to get right. To test it properly, I think we should first rename (NOT copy) the inputdata directory and make all necessary changes in the xml files, then run the full test suite to make sure everything necessary has been changed in the xml files, then finally do the copy for the sake of old tags.

My feeling is that this isn&apos;t critical to fix immediately, because everything works as is right now. It will only become a problem when we are adding new standard mapping files.

Thus I propose that this be deferred until after the release freeze.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5039</commentid>
    <comment_count>3</comment_count>
    <who name="Mariana Vertenstein">mvertens@ucar.edu</who>
    <bug_when>2013-04-13 20:15:28 -0600</bug_when>
    <thetext>Bill - I agree with your proposal. The key point is to make the release freeze. I had run over this issue with Erik before I checked this in - and it seemed okay. We can sort this all out later - as long as it is working now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5756</commentid>
    <comment_count>4</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2013-12-17 11:16:21 -0700</bug_when>
    <thetext>Un-assigning myself from this... I was only assigned to this because it came up in the course of my work a few months ago, but it&apos;s not currently relevant for me.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1668</bug_id>
          
          <creation_ts>2013-04-19 12:10:46 -0600</creation_ts>
          <short_desc>remove duplicate call to SoilBiogeochemVerticalProfile</short_desc>
          <delta_ts>2016-07-15 13:11:17 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>andre@ucar.edu</cc>
    
    <cc>cdkoven@lbl.gov</cc>
    
    <cc>erik@ucar.edu</cc>
    
    <cc>muszala@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387203-YECYjH-JzoQbgJYpLoYH40ojsrfTRzS1Ei8cgQtt-5c</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5049</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2013-04-19 12:10:46 -0600</bug_when>
    <thetext>Currently, decomp_vertprofiles is called from two places: (1) clm_driver.F90, (2) CNDecompAlloc, which is called from CNEcosystemDyn. From talking to Charlie, it sounds like this is a mistake; it should probably just be called from the driver.

Removing the duplicate call from CNDecompAlloc causes answer changes for transient cases, which would take some examination to confirm that this hasn&apos;t broken anything. Since we are under time pressure so close to the release freeze, we have decided not to remove this duplicate call for now. However, when someone has time to sign off on the answer changes, this should be re-examined.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5291</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2013-06-14 11:55:55 -0600</bug_when>
    <thetext>In a branch that I&apos;m working on (where the main purpose is to make column-level filters only operate over active points), I have changed decomp_vertprofiles to operate over all istsoil &amp; istcrop pfts &amp; columns -- not just those that are active. I was hopeful that this would allow me to remove this duplicate call. However, when I tried removing the call from CNDecompAlloc (keeping in place the call in the driver) I get carbon balance errors in many (though not all) tests. 

For example:

RUN   ERS_E.f19_g16.I1850CRUCLM45CN.yellowstone_intel.GC.200453 
RUN   ERS_D.hcru_hcru.I_2000_CRUFRC_CLM45_CN.yellowstone_pgi.GC.200503</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5292</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2013-06-14 16:03:29 -0600</bug_when>
    <thetext>I confirmed that this test also fails on the trunk (clm4_5_11):

ERS_E.f19_g16.I1850CRUCLM45CN.yellowstone_intel

if you get rid of the call to decomp_vertprofiles from CNDecompAlloc. Again, I get a C balance error a short way into the run.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5306</commentid>
    <comment_count>3</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2013-06-27 12:28:40 -0600</bug_when>
    <thetext>Ideally, we would also like the call to decomp_vertprofiles from the driver to be moved later in the driver sequence -- at least sometime after subgrid weights are updated due to transient land use. Currently this routine needs to operate over inactive as well as active points because of its unusually early placement in the driver sequence, and we would like to remove the need for this if possible. (The problem with its current placement is: If it just operated over active points, like most other routines, then computations wouldn&apos;t be done for PFTs that are currently 0-weight, but are about to become non-0-weight later this time step.)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6613</commentid>
    <comment_count>4</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2014-12-12 16:42:12 -0700</bug_when>
    <thetext>see also bug 2107</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6750</commentid>
    <comment_count>5</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2015-02-24 12:39:37 -0700</bug_when>
    <thetext>decomp_vertprofiles has been renamed to SoilBiogeochemVerticalProfile</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7603</commentid>
    <comment_count>6</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2016-07-15 13:04:15 -0600</bug_when>
    <thetext>I&apos;m not sure what, if anything, should be done about this: I don&apos;t see any clearly superior solutions.

Copying an email I just sent to Charlie:

This is still called in two places:

./biogeochem/CNDriverMod.F90:318:    call SoilBiogeochemVerticalProfile(bounds, num_soilc, filter_soilc, num_soilp, filter_soilp, &amp;
./main/clm_driver.F90:210:          call SoilBiogeochemVerticalProfile(bounds_clump                                       , &amp;

The main (only?) issue with moving this appears to be the use in dyn_cnbal_patch, which is called before CNDriver. Incidentally: While I have reworked a lot of stuff related to dynamic LU, I don&apos;t think I have changed anything related to the uses of the vertical profile stuff in dyn_cnbal_patch: their use and general timing in the driver sequencing remain as they have been over the last few years (or more).

I have given this some more (actually, too much) thought yesterday. My basic conclusion is that I can see a few possible ways forward, but don&apos;t see any easy solution. So my inclination at this point is to leave things as is, unless you or I can come up with a clear, winning solution that doesn&apos;t take too much work to put in place.

You don&apos;t need to read through all the details below, but I&apos;m including them in case you want more details:


The options are essentially:

(1) Leave things as is, with two calls to SoilBiogeochemVerticalProfile, including a call to that and to alt_calc early in the driver sequence

Pros:
- Easy
- Safe (no risk of introducing balance errors with possible changes)

Cons:
- The current anomalous position of these in the driver sequence is a bit confusing: These routines are called much earlier than most science routines in the driver sequence
- The fact that this is called twice is also anomalous and a bit confusing
- The fact that the clm_driver calls use the &quot;inactive_and_active&quot; filters is also anomalous, and makes analysis of the system a bit harder
- Performance: the extra call to SoilBiogeochemVerticalProfile is responsible for ~ 1% of total CLM run time (from a very rough timing... probably not very accurate)

(1a) Keep things basically as is, but change the filters in the clm_driver call to just the active filters

I think this may work. This would eliminate or reduce some of the cons, but I&apos;d want to do extra analysis / thought to make sure this would work.


(2) Keep the call in clm_driver, eliminate the call in CNDriver

I don&apos;t see why this would cause problems, but apparently it caused C balance errors when I tried it a while ago.

However, it might cause problems (unrelated to the previous C balance errors, I think) that there is some patch-to-column averaging in SoilBiogeochemVerticalProfile. I think that, for this solution to be robust, we&apos;d need to separate that patch-to-column averaging into a separate routine, and do that piece later, after the subgrid area updates.

We&apos;d still have some of the above cons – namely, the anomalous placement in the driver sequence and the operation over inactive_and_active filters. We could eliminate the latter problem (also improving performance), but then would need to re-introduce a second call that just operates over newly-active points.


(3) Keep the call in CNDriver, eliminate the call in clm_driver

For this to work, we&apos;d need to have a new call to SoilBiogeochemVerticalProfile sometime (late) in initialization, so that these profiles were available to dyn_cnbal_patch in the first time step. That adds some extra complexity that isn&apos;t ideal.

This would change answers for transient cases with dyn_roots = .true., and I think would change answers for all transient cases due to the relative placement of alt_calc and SoilBiogeochemVerticalProfile. This means that a bit more analysis would be needed to make sure this is done correctly.

Other than that, this would remove the cons listed above.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7604</commentid>
    <comment_count>7</comment_count>
    <who name="charlie">cdkoven@lbl.gov</who>
    <bug_when>2016-07-15 13:11:17 -0600</bug_when>
    <thetext>Bill,

I guess option 3 seems the most preferable long-term solution to me, but I&apos;m not sure that it is sufficiently high priority to do this before the code freeze.

Thanks for thinking about this,
Charlie</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1679</bug_id>
          
          <creation_ts>2013-05-01 15:24:28 -0600</creation_ts>
          <short_desc>problems with new CNFireMod</short_desc>
          <delta_ts>2017-02-03 10:14:48 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>andre@ucar.edu</cc>
    
    <cc>bugzillaMuszala@gmail.com</cc>
    
    <cc>dlawren@ucar.edu</cc>
    
    <cc>muszala@ucar.edu</cc>
    
    <cc>mvertens@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
    
    <cc>slevis@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387203-KF7kuuetIoDuM0CFR92p5LsjLsemu7jB79NQYWSyWjE</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5089</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2013-05-01 15:24:28 -0600</bug_when>
    <thetext>This started with a search through the CNFireMod code for potentially-incorrect uses of weights, now that I have introduced &apos;active&apos; flags. But in looking for this, I noticed a number of questionable things in this code, so decided to review the entire module. Here are some problems I found.

Some of these are cosmetic (e.g., variable names); others are not bugs per se, but make the code fragile to future changes; and others look like bugs (and if they aren&apos;t bugs, then they need some explanation about why they&apos;re correct even though they look incorrect).

(1) Many variables are declared as &quot;! local pointers to implicit in scalars&quot;, when in fact they are implicit out or in/out


(2) There are a number of cryptic variable names, some with no description. For example:

   real(r8) :: lh       !
   real(r8) :: fs       !
   real(r8) :: ig       !





(3) There are a number of places where the code checks whether the current pft is crop or natural veg. This is done like this:

           ! For crop veg types
           if( ivt(p) &gt; nc4_grass )then

           ! For natural vegetation (non-crop)
           if( ivt(p) &gt;= ndllf_evr_tmp_tree .and. ivt(p) &lt;= nc4_grass )then

This is very fragile code, which will break if anyone adds new natural PFTs to the beginning or end of the list. A possible replacement for crop is - I think - to use npcropmin &amp; npcropmax (defined in pftvarcon.F90) - though I&apos;m not sure whether that does the right thing when running without the specific crop types? 


(4) Similarly, checks of the type of pft:

                       if( ivt(p) .ge. nbrdlf_evr_shrub )then      !for shurb and grass
...
                       else   ! for trees


This assumes that people adding PFTs in the future will add them in the &quot;right&quot; place, where &quot;right&quot; is determined by the logic embedded here. This should probably be handled by adding constants to the pft physiology file.

The idea of someone wanting to add PFTs is not purely theoretical: Andy Jones just told me today that he is adding some PFTs for some of his work. So I am leery of code that makes this difficult or error-prone.




(5) There are some seemingly ad-hoc conditionals, some of which seem incorrect. In particular, there seem to be terms added to conditionals that don&apos;t need to (or shouldn&apos;t) be there. For example:

(a)
           ! For crop PFT&apos;s
           if( ivt(p) &gt; nc4_grass .and. wtcol(p) &gt; 0._r8 .and. leafc_col(c) &gt; 0._r8 )then
              fuelc_crop(c)=fuelc_crop(c) + (leafc(p) + leafc_storage(p) + &amp;
                            leafc_xfer(p))*wtcol(p)/cropf_col(c)     + &amp;
                            totlitc(c)*leafc(p)/leafc_col(c)*wtcol(p)/cropf_col(c)
           end if

Why should this only be done if leafc_col(c) &gt; 0? Note that the first parenthesized term can be non-zero even if leafc_col(c) == 0, because leafc_storage or leafc_xfer could be &gt; 0. 

Also:

(b)
              if( .not. shr_infnan_isnan(btran2(p)) .and. btran2(p) .le. 1._r8 )then

Why is this check needed? Since this code is in a loop over filter_soilc points, it shouldn&apos;t include points that have NaN values; and I can&apos;t see how btran2 could be greater than 1 -- and if it ever were greater than 1, I would question whether it&apos;s really correct to exclude points that have values greater than 1: is it really correct to treat points with values of 1.0000000001 (maybe due to rounding error??) fundamentally differently from points with values of 1.0?


(6) More intermediate variables (and/or comments) are needed to make it more clear what this code is doing, so people other than the author can modify it in the future. For example, in the example in #5a, I have no idea what this term is trying to accomplish:

                            totlitc(c)*leafc(p)/leafc_col(c)*wtcol(p)/cropf_col(c)

As another example, this equation is very hard to read:

        baf_peatf(c) = boreal_peatfire_c*exp(-SHR_CONST_PI*(max(wf2(c),0._r8)/0.3_r8))* &amp;
        max(0._r8,min(1._r8,(tsoi17(c)-SHR_CONST_TKFRZ)/10._r8))*peatf_lf(c)* &amp;
        (1._r8-fsat(c))



(7) There are many places where long expressions do two things at once: (1) compute some pft-level variable with a complex expression, and (2) average from pft to column -- all in a single line of code. The example in #5a, above, illustrates this.

The code would be clearer and easier to modify if these expressions were split into two pieces: (1) first compute pft-level variable for all quantities, and then (2) average to column, preferably via a call to p2c. 


(6) The use of cwtgcell in this code is suspicious to me:

                 if( ivt(p) == nbrdlf_evr_trp_tree .and. wtcol(p) .gt. 0._r8 )then
                    trotr1_col(c)=trotr1_col(c)+wtcol(p)*cwtgcell(c)
                 end if
                 if( ivt(p) == nbrdlf_dcd_trp_tree .and. wtcol(p) .gt. 0._r8 )then
                    trotr2_col(c)=trotr2_col(c)+wtcol(p)*cwtgcell(c)
                 end if
                 if( ivt(p) == nbrdlf_evr_trp_tree .or. ivt(p) == nbrdlf_dcd_trp_tree )then
                    if(lfpftd(p).gt.0._r8)then
                       dtrotr_col(c)=dtrotr_col(c)+lfpftd(p)*cwtgcell(c)
                    end if
                 end if

There appears to be no other science code (i.e., non-infrastructure code) that depends on weights on the grid cell. I believe that all code is intended to compute per-area quantities, so a column&apos;s weight on the grid cell should be irrelevant in computing a column-level quantity. 

If this code is truly correct, it needs more explanation.


(7) Why does the normalization differ for these two averages from pft to col:

              rootc_col(c) = rootc_col(c) + (frootc(p) + frootc_storage(p) + &amp;
                             frootc_xfer(p) + deadcrootc(p) +                &amp;
                             deadcrootc_storage(p) + deadcrootc_xfer(p) +    &amp;
                             livecrootc(p)+livecrootc_storage(p) +           &amp;
                             livecrootc_xfer(p))*wtcol(p)

              fsr_col(c) = fsr_col(c) + fsr_pft(ivt(p))*wtcol(p)/(1.0_r8-cropf_col(c))

i.e., why does the second normalize by (1-cropf_col), but the first does not?


(8) There are lots of magic numbers. For example:

        fire_m   = exp(-SHR_CONST_PI *(m/0.69_r8)**2)*(1.0_r8 - max(0._r8, &amp;
                   min(1._r8,(forc_rh(g)-30._r8)/(70._r8-30._r8))))*  &amp;
                   min(1._r8,exp(SHR_CONST_PI*(forc_t(g)-SHR_CONST_TKFRZ)/10._r8))
        lh       = 0.0035_r8*6.8_r8*hdmlf**(0.43_r8)/30._r8/24._r8
        fs       = 1._r8-(0.01_r8+0.98_r8*exp(-0.025_r8*hdmlf))
        ig       = (lh+forc_lnfm(g)*0.25_r8)*(1._r8-fs)*(1._r8-cropf_col(c)) 



(9) In this code and some following code, normalizations are sometimes done by (1 - cropf_col), and sometimes by lfwt:

                       if( ivt(p) .ge. nbrdlf_evr_shrub )then      !for shurb and grass
                          lgdp_col(c)  = lgdp_col(c) + (0.1_r8 + 0.9_r8*    &amp;
                                         exp(-1._r8*SHR_CONST_PI* &amp;
                                         (gdp_lf(c)/8._r8)**0.5_r8))*wtcol(p) &amp;
                                         /(1.0_r8 - cropf_col(c))
                          lgdp1_col(c) = lgdp1_col(c) + (0.2_r8 + 0.8_r8*   &amp;
                                         exp(-1._r8*SHR_CONST_PI* &amp;
                                         (gdp_lf(c)/7._r8)))*wtcol(p)/lfwt(c)
                          lpop_col(c)  = lpop_col(c) + (0.2_r8 + 0.8_r8*    &amp;
                                         exp(-1._r8*SHR_CONST_PI* &amp;
                                         (hdmlf/450._r8)**0.5_r8))*wtcol(p)/lfwt(c)

Is lfwt = (1 - cropf_col)?? If so, these normalizations should be made consistent. If not, why do they differ, and why are some normalizations done by one factor and others by another?


(10) The computations of lgdp_col, lgdp1_col and lpop_col are hard to decipher, and could use some explanatory comments and/or code cleanup (e.g., use of intermediate variables) to make it more clear what&apos;s going on here.


(11) The following code needs some explanation:

  if (fpftdyn /= &apos; &apos;) then    !true when landuse data is used
     do fc = 1,num_soilc
        c = filter_soilc(fc)
        if( dtrotr_col(c) .gt. 0._r8 )then
           if( kmo == 1 .and. kda == 1 .and. mcsec == 0)then
              lfc(c) = 0._r8
           end if
           if( kmo == 1 .and. kda == 1 .and. mcsec == dt)then
              lfc(c) = dtrotr_col(c)*dayspyr*secspday/dt
           end if
        else
           lfc(c)=0._r8
        end if
     end do
  end if

It looks like this is trying to re-initialize lfc at the beginning of each year. However, I&apos;m concerned about whether this will behave correctly if drotr_col(c) == 0 on the first and/or second timesteps of the year. In this case the variables won&apos;t be initialized for that year. Maybe that&apos;s okay - it&apos;s just not clear to me if that&apos;s what&apos;s intended.


(12) It is odd to me that deforestation fires cannot happen on Jan 1 at midnight:

        !
        ! if landuse change data is used, calculate deforestation fires and 
        ! add it in the total of burned area fraction
        !
        if (fpftdyn /= &apos; &apos;) then    !true when landuse change data is used
           if( trotr1_col(c)+trotr2_col(c) &gt; 0.6_r8 )then
              if(( kmo == 1 .and. kda == 1 .and. mcsec == 0) .or. &amp;
                   dtrotr_col(c) &lt;=0._r8 )then
                 fbac1(c)        = 0._r8
                 farea_burned(c) = baf_crop(c)+baf_peatf(c)

but perhaps there is some good reason for this


(13) Subroutine CNFireFluxes hard-codes a lot of information about the structure of the CN pools. I believe the same is done elsewhere in the CN code. This makes it very hard for anyone to add or remove a carbon or nitrogen pool, because they have to understand and modify code spread all over the model. I&apos;m not sure what the solution is, but I feel like the current implementation is not sustainable, so this is worth some thought.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5090</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik@ucar.edu</who>
    <bug_when>2013-05-01 21:36:16 -0600</bug_when>
    <thetext>Hey Bill

Yep, for what it&apos;s worth -- I agree with you. Some of this I tried to address with Fang months ago, but I think the language barrier got in the way enough that she wasn&apos;t willing or able to make some of these changes. With more time, a lot of the suggestions in here are things I would&apos;ve done on my own as well. As it was, I did what I considered the bare-bones necessary changes. So I changed the use of magic numbers for vegetation indices to the indices from pftvarcon, changed obvious magic numbers to constants, fixed indentation, added some comments, broke up long lines, and introduced at least a few important constants. There were some values that Fang was addressing as &quot;the value that was X in the paper&quot; which is a horrible way to define what you are doing.

In terms of 3 and 4 I figured the current was at least acceptable because it&apos;s rare to add vegetation types, and I&apos;m sure other parts of the code are fragile in this way as well.

We should be able to fix &quot;1&quot;. For &quot;2&quot; we should be able to get Fang&apos;s input on. I did try to get this from Fang before, but we probably need to explicitly ask for particular variables. &quot;5&quot; is another to ask of Fang directly. The use of shr_infnan_isnan is very awkward, but wasn&apos;t something I figured I had time to mess with. &quot;6&quot;, &quot;7&quot; and &quot;10&quot; are things I&apos;m hoping Sam could help us with. &quot;9&quot; I&apos;m hoping both Fang and Sam can clarify.

On &quot;11&quot; I wondered if some of these parts of the code, shouldn&apos;t become a part of or subroutine in &quot;pftdynMod&quot;. Whether this was right or not wasn&apos;t clear to me either, but Fang did her development with transient PFT simulations, so I&apos;m assuming this part of the code was appropriately shook out.

&quot;8&quot; is something I wanted Fang to address and asked her to, but I don&apos;t think she understood what we asked. Again with more time, I would&apos;ve done more of this on my own. Perhaps, Sam and Fang can help us to define what some of the magic numbers are, so that we can use constants and parameters for them. I did at least make the constants double precision, which will make it easier for them to be constants or parameters. But, we need to know enough about what&apos;s going on that we can define names for them.

I suspect the reason for &quot;12&quot; has to do with the fact that land-use change happens on Jan/1st on midnight. And possibly that already provides enough of a change that you can&apos;t do deforestation on top of that. But, this means the real problem with the statement is the implicit linking of this line with how often pftdynMod is invoked. That&apos;s an example of where maybe some of this should be moved to pftdynMod, and maybe there should be methods of pftdynMod that can be provided to make sure other modules  

&quot;13&quot; of course will take more group effort.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5091</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2013-05-02 06:22:13 -0600</bug_when>
    <thetext>Erik: Thanks a lot for your detailed reply. I had a feeling you had already done a lot of cleanup of this code, and to be clear, this wasn&apos;t at all meant as a criticism of your gatekeeper work (I don&apos;t think you took it that way, but just in case...): I don&apos;t think the burden for all of this cleanup should fall on the software engineering gatekeeper. Perhaps we need some more discussion of process, though.

I also realized that I had two #6&apos;s and two #7&apos;s -- whoops. That&apos;s a shame, because the second #6 and #7 are some of the more suspicious pieces of code to me, so I don&apos;t want them to get lost. 

For the sake of future discussion, let&apos;s use this numbering:


(6) More intermediate variables (and/or comments) are needed to make it more clear what this code is doing, so people other than the author can modify it in the future. For example, in the example in #5a, I have no idea what this term is trying to accomplish:
                           
totlitc(c)*leafc(p)/leafc_col(c)*wtcol(p)/cropf_col(c)

As another example, this equation is very hard to read:

        baf_peatf(c) = boreal_peatfire_c*exp(-SHR_CONST_PI*(max(wf2(c),0._r8)/0.3_r8))* &amp;
        max(0._r8,min(1._r8,(tsoi17(c)-SHR_CONST_TKFRZ)/10._r8))*peatf_lf(c)* &amp;
        (1._r8-fsat(c))



(7) There are many places where long expressions do two things at once: (1) compute some pft-level variable with a complex expression, and (2) average from pft to column -- all in a single line of code. The example in #5a, above, illustrates this.

The code would be clearer and easier to modify if these expressions were split into two pieces: (1) first compute pft-level variable for all quantities, and then (2) average to column, preferably via a call to p2c. 


--

(14) The use of cwtgcell in this code is suspicious to me:

                 if( ivt(p) == nbrdlf_evr_trp_tree .and. wtcol(p) .gt. 0._r8)then
                    trotr1_col(c)=trotr1_col(c)+wtcol(p)*cwtgcell(c)
                 end if
                 if( ivt(p) == nbrdlf_dcd_trp_tree .and. wtcol(p) .gt. 0._r8)then
                    trotr2_col(c)=trotr2_col(c)+wtcol(p)*cwtgcell(c)
                 end if
                 if( ivt(p) == nbrdlf_evr_trp_tree .or. ivt(p) == nbrdlf_dcd_trp_tree )then
                    if(lfpftd(p).gt.0._r8)then
                       dtrotr_col(c)=dtrotr_col(c)+lfpftd(p)*cwtgcell(c)
                    end if
                 end if

There appears to be no other science code (i.e., non-infrastructure code) that depends on weights on the grid cell. I believe that all code is intended to compute per-area quantities, so a column&apos;s weight on the grid cell should be irrelevant in computing a column-level quantity. 

If this code is truly correct, it needs more explanation.


(15) Why does the normalization differ for these two averages from pft to col:

              rootc_col(c) = rootc_col(c) + (frootc(p) + frootc_storage(p) + &amp;
                             frootc_xfer(p) + deadcrootc(p) +                &amp;
                             deadcrootc_storage(p) + deadcrootc_xfer(p) +    &amp;
                             livecrootc(p)+livecrootc_storage(p) +           &amp;
                             livecrootc_xfer(p))*wtcol(p)

              fsr_col(c) = fsr_col(c) + fsr_pft(ivt(p))*wtcol(p)/(1.0_r8-cropf_col(c))

i.e., why does the second normalize by (1-cropf_col), but the first does not?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6615</commentid>
    <comment_count>3</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2014-12-15 12:16:25 -0700</bug_when>
    <thetext>To further justify the importance of (14): When I ran a set of simulations with roundoff-level differences in the percent of each landunit on the grid cell, the only piece of source code that led to divergent evolution of the two were these lines in CNFireMod. When I deleted this dependence on col%wtgcell, the two simulations had identical fields at the patch and column-level, and only roundoff-level differences at the grid cell level (as expected). That is to say, this piece of code in (14) seems to differ from everything else in the model, in that it introduces a dependence on the subgrid weights that should not be there.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6616</commentid>
    <comment_count>4</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2014-12-19 15:22:13 -0700</bug_when>
    <thetext>Also note that there are currently two versions of btran in the code, one of which is specific to fire. If possible, we&apos;d like to change this so that the fire code uses the standard btran.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6617</commentid>
    <comment_count>5</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2014-12-19 15:27:42 -0700</bug_when>
    <thetext>Ideally, we should also cross-check the code against the paper &amp; tech note describing this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6618</commentid>
    <comment_count>6</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2014-12-19 15:35:12 -0700</bug_when>
    <thetext>Dave would like to do two things initially:

(1) Resolve the use of two separate btran values

(2) Fix the column weight on the gridcell problem (#14 from my list) [Bill]

We will then ask Sam to look at some of the other stuff in here.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7689</commentid>
    <comment_count>7</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2016-09-18 07:32:49 -0600</bug_when>
    <thetext>In clm4_5_12_r195, I have removed the use of col%wtgcell in the calculation of trotr1 and trotr2 - but not yet in the calculation of dtrotr. So this is a partial fix of problem (14) in this bug report.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7781</commentid>
    <comment_count>8</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2016-12-22 10:51:09 -0700</bug_when>
    <thetext>I started down the path of addressing:

(12) It is odd to me that deforestation fires cannot happen on Jan 1 at midnight

But gave up: The check for the last time step of the year (searching for kmo) happens for a number of things (e.g., initializing burndate, fbac1, farea_burned)... and I&apos;m not sure what exactly needs to be changed and what needs to be kept as is. So I&apos;m not going to address the issue with deforestation fires not happening on the last time step of the year, because I don&apos;t understand how this might interact with other parts of the code - and what I might break by addressing this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7854</commentid>
    <comment_count>9</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-02-03 10:14:48 -0700</bug_when>
    <thetext>I have fixed the remainder of problem (14) in clm4_5_14_r223 (use of cwtgcell)</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1683</bug_id>
          
          <creation_ts>2013-05-07 15:48:42 -0600</creation_ts>
          <short_desc>mkmapdata should use shared mapping tools</short_desc>
          <delta_ts>2016-05-09 14:45:49 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>CLM5</target_milestone>
          <dependson>1938</dependson>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>anthony.p.craig@gmail.com</cc>
    
    <cc>erik@ucar.edu</cc>
    
    <cc>mlevy@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
    
    <cc>sacks@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387203-8DxXqNLBUAxg--ErqURl4-bKac_GVM-JL2tJvkTLm7o</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5105</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2013-05-07 15:48:42 -0600</bug_when>
    <thetext>Mike Levy suggested that CLM&apos;s mkmapdata tool should use the shared mapping tools, and in particular tools/mapping/gen_mapping_files/gen_ESMF_mapping_file/create_ESMF_map.sh -- rather than directly calling the ESMF tool. The main reason for this is that the shared tool can provide an insulating layer, requiring less maintenance of the CLM tool if the version or interface of the ESMF tool changes in the future.

We wanted to get this into the cesm1.2 release, but time limitations prevented doing so. 

Here are some notes on what needs to be done to accomplish this:

First, some notes from Mike Levy:

I&apos;ve created

https://svn-ccsm-models.cgd.ucar.edu/tools/mapping/trunk_tags/mapping_130410

with all of the changes we talked about (and more). To generate the file

map_${grid}_${lmask}_to_${res}_nomask_aave_da_$CDATE.nc

You&apos;ll want to run

$CESMROOT/tools/mapping/gen_mapping_files/gen_ESMF_mapping_file/create_ESMF_map.sh -fsrc [file corresponding to ${grid}] -nsrc ${grid}_${lmask} -fdst [file corresponding to ${res}] -ndst ${res}_nomask -map aave --clm_name

You can add the following (see the README file in gen_ESMF_mapping_file for more options):
* If the source file is a regional map, use -tsrc regional
* If the destination file is a regional map, use -tdst regional
* If you want to run the serial ESMF implementation, use -serial
* If you need the 64bit offset, use -big
* If you want to pass any other flags to ESMF, use --pass2esmf $FLAGS

This should work on yellowstone, caldera, and geyser. It may even work on jaguar, but as I said I&apos;ve never tried.



Now, my notes (some of this repeats what Mike said):

- need to pass -clm_name (this forces the tool to use the CLM naming convention, which differs somewhat from the naming convention used elsewhere for mapping files)

- need to pass src &amp; dest names, NOT weight file name. Note that these names should include the mask so that the output name looks right

- For the case where we point to the beta snapshot, we will still need to set ESMFBIN_PATH, to override what&apos;s set in Mike&apos;s script. This refers to this code:

   if [ &quot;$lrgfil&quot; = &quot;--netcdf4&quot; ] || [ ${SRC_TYPE[nfile]} = &quot;UGRID&quot; ] || [ $DST_TYPE = &quot;UGRID&quot; ]; then
       case $hostname in
	   ys* | caldera* | geyser* )
	       if [ $mpitype = &quot;mpiuni&quot; ]; then
		   MY_ESMF_REGRID=/glade/p/work/svasquez/ESMF620bs18-mpiuni/bin/ESMF_RegridWeightGen
	       else
		   MY_ESMF_REGRID=/glade/p/work/svasquez/ESMF620bs18/bin/ESMF_RegridWeightGen
	       fi
	       ;;
	   *)
	       echo &quot;No support for --netcdf4 or UGRID on machines other than yellowstone/caldera/geyser&quot;
	       exit 5
	       ;;
       esac
   fi


--- TESTING ---

- test generation of a global and single-point mapping file in a single submission
	- make sure mapping files are created, with the same name as before

- test generation of a global and single-point mapping file for Sean Swenson&apos;s file -- i.e., the topostats 1km file, which triggers the logic given above (pointing to the beta snapshot in the svasquez directory)
	- make sure mapping files are created, with the same name as before



--- DEALING WITH THE LOGIC POINTING TO THE BETA SNAPSHOT CODE ---

Once the 6.2.0 release is made for the ESMF tool, we can remove the explicit setting of ESMFBIN_PATH in the CLM mkmapdata.sh -- i.e., we can remove the above logic, as long as the shared mapping tools point to the new 6.2.0 release. At that point, all of stuff related to &apos;hostname&apos;  in mkmapdata.sh can go away, I think.

Since we&apos;re no longer trying to get this done for the cesm1.2 release, it&apos;s probably worth waiting until the shared mapping tool can be updated to 6.2.0 before making any of the changes suggested in this bug report -- since at that point, mkmapdata.sh can become simpler, no longer requiring any knowledge of the host or any paths to the esmf tool.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5757</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2013-12-17 11:17:03 -0700</bug_when>
    <thetext>Un-assigning myself from this... I was only assigned to this because it came up in the course of my work a few months ago, but it&apos;s not currently relevant for me.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5912</commentid>
    <comment_count>2</comment_count>
    <who name="Erik Kluzek">erik@ucar.edu</who>
    <bug_when>2014-02-28 11:41:34 -0700</bug_when>
    <thetext>The ESMF6.3.0 release is out, and hence we could do this once the ESMF6.3.0 is built on the yellowstone system (which I&apos;ve asked CISL to do). We can then use

--pass2esmf &quot;--netcdf4&quot;

to turn netcdf4 on. And 

--pass2esmf &quot;--src_meshname UGRID --dst_meshname UGRID&quot;

to use the UGRID in place of SCRIP. The ESMF6.3.0 release includes the ability to do --netcdf4 and use UGRID meshname.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1716</bug_id>
          
          <creation_ts>2013-05-29 12:59:52 -0600</creation_ts>
          <short_desc>remove cprnc.pl and cprnc.ncl; use standard cprnc instead</short_desc>
          <delta_ts>2016-05-16 14:02:28 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>muszala@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387203-DRxDyQY-ovEOK2CULBc60kpJ3utOEV0elMWbIOLHosY</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5196</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2013-05-29 12:59:52 -0600</bug_when>
    <thetext>My understanding is that cprnc.ncl and its cprnc.pl wrapper exist only because the standard fortran-based cprnc wasn&apos;t able to compare files without a time dimension. As of cprnc_130529, this is fixed. So I propose removing these CLM-specific cprnc scripts, and switching testing to use the standard cprnc instead.

Advantages:

(1) no longer need to maintain these scripts

(2) I recently found a problem with the cprnc.ncl script - it doesn&apos;t flag files as different if they differ in where there are missing values (see bug 1714). The fortran-based cprnc handles this correctly

(3) The fortran-based cprnc gives you more information about differences than you can get from cprnc.ncl.

(4) Post-processing scripts that look at cprnc output (e.g., summarize_cprnc_diffs) don&apos;t work on cprnc.ncl output; so if we switch to using the fortran-based program, these post-processing scripts can be used.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1769</bug_id>
          
          <creation_ts>2013-07-23 21:57:40 -0600</creation_ts>
          <short_desc>duplicate definitions of a few functions in CanopyFluxesMod.F90</short_desc>
          <delta_ts>2016-05-16 14:19:19 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>erik@ucar.edu</cc>
    
    <cc>muszala@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387203-r0jr3kHQc506CoWaVHlSl6QqZM7UvYGzcOmZbEEnvkQ</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5341</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2013-07-23 21:57:40 -0600</bug_when>
    <thetext>Starting in clm4_0_67 (Jinyun&apos;s changes), there are duplicate definitions of 3 functions: ft, fth, fth25. 

It looks like Jinyun turned these into true functions, which is an improvement.

However, the old statement functions were never removed from the top of subroutine Photosynthesis: 

   real(r8) :: ft                ! photosynthesis temperature response (statement function)
   real(r8) :: fth               ! photosynthesis temperature inhibition (statement function)
   real(r8) :: fth25             ! ccaling factor for photosynthesis temperature inhibition (statement function)

   ...

   ft(tl,ha) = exp( ha / (rgas*1.e-3_r8*(tfrz+25._r8)) * (1._r8 - (tfrz+25._r8)/tl) )
   fth(tl,hd,se,cc) = cc / ( 1._r8 + exp( (-hd+se*tl) / (rgas*1.e-3_r8*tl) ) )
   fth25(hd,se) = 1._r8 + exp( (-hd+se*(tfrz+25._r8)) / (rgas*1.e-3_r8*(tfrz+25._r8)) )


(Incidentally, I had to go to a fortran reference to even figure out what these lines were doing... now that they have served their educational purpose, I think these old statement functions should be purged.)

I&apos;m guessing that the local statement functions take precedence over the module-level functions, so the module-level functions currently aren&apos;t being used. So we should (1) remove the above lines, and then (2) confirm that answers are bfb.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6074</commentid>
    <comment_count>1</comment_count>
    <who name="Stefan">muszala@ucar.edu</who>
    <bug_when>2014-04-07 09:47:38 -0600</bug_when>
    <thetext>Need to also pull out Jinyun&apos;s new functions as common code to both ED and non-ED code Photosynthesis code.

Should be part of BFB refactor tag.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1786</bug_id>
          
          <creation_ts>2013-08-17 07:46:54 -0600</creation_ts>
          <short_desc>problem with the bounds of some history fields</short_desc>
          <delta_ts>2016-05-16 14:26:27 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P4</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>bandre@lbl.gov</cc>
    
    <cc>muszala@ucar.edu</cc>
    
    <cc>mvertens@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387203-wCXHwqG2JArFHJg61UNHM3SnxMIz5z-LG42Zc0L3RSA</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5381</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2013-08-17 07:46:54 -0600</bug_when>
    <thetext>There is a potential problem with the bounds of some history fields. My guess is that this doesn&apos;t cause any problems now, but could cause problems in the future, if either (1) hist_update_hbuf was called within a threaded region (right now it&apos;s not), or (2) assumptions were made about the lower bound of arrays in hist_update_hbuf.

The problem arises from associating a pointer with an array slice, as in:

ptr =&gt; target(:, 1:n)

When you do this, the lower bound of ptr is reset to 1. Contrast this to:

ptr =&gt; target

in which case ptr retains the lower bounds of target.

Specifically, this occurs in:

(1) hist_update_hbuf_field_2d

    field          =&gt; clmptr_ra(hpindex)%ptr(:,1:num2d)


(2) histFldsMod; e.g.:

          data1dptr =&gt; ccs%decomp_cpools(:,l)

(and maybe elsewhere - I haven&apos;t done an extensive search)

I believe this can be solved with the following syntax:

    ! In the following, we need to explicitly set the lower bound of &apos;field&apos;, otherwise
    ! it gets set to 1 when it&apos;s associated with the slice of &apos;ptr&apos;
    arr_lbound = lbound(clmptr_ra(hpindex)%ptr, 1)
    field(arr_lbound: , 1:) =&gt; clmptr_ra(hpindex)%ptr(:,1:num2d)

but I haven&apos;t tested this.


For now, in the interest of time, I am working around this problem simply by NOT explicitly specifying the bounds of the history fields in calls to p2g/c2g/l2g in hist_update_hbuf; e.g., I am calling these routines like:

          call p2g(bounds, &amp;
               field, &amp;
               field_gcell(bounds%begg:bounds%endg), &amp;
               p2c_scale_type, c2l_scale_type, l2g_scale_type)

rather than like:

          call p2g(bounds, &amp;
               field(bounds%begp:bounds%endp), &amp;
               field_gcell(bounds%begg:bounds%endg), &amp;
               p2c_scale_type, c2l_scale_type, l2g_scale_type)

I think this should be okay for now, but wouldn&apos;t work if this was called from within a threaded region.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5395</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2013-08-26 06:06:31 -0600</bug_when>
    <thetext>I think that the trickier part of this problem - the calls from histFldsMod (#2 in my original report) - can be solved by changing the dummy argument declarations in hist_addfld1d and hist_addfld2d, by adding lower bounds to these arguments:

    real(r8)        , optional, pointer    :: ptr_gcell(:)   ! pointer to gridcell array
    real(r8)        , optional, pointer    :: ptr_lunit(:)   ! pointer to landunit array
    real(r8)        , optional, pointer    :: ptr_col(:)     ! pointer to column array
    real(r8)        , optional, pointer    :: ptr_pft(:)     ! pointer to pft array


(I missed these in my initial rework of subroutine arguments.)

To do this, we would need to pass bounds to hist_addfld1d and hist_addfld2d - ensuring that these are the proc bounds rather than the clump bounds.

At that point, I believe that the only remaining problem would be #1 in my initial report, which could be solved via my original suggestion.

I&apos;m not sure whether this refactoring is worth the time right now, though.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5503</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2013-09-19 14:31:41 -0600</bug_when>
    <thetext>I am adding more code in histFileMod where this issue arises - specifically, code to deal with multi-layer snow history fields. 

Specifically, I have this code on my branch, in hist_update_hbuf_field_2d:

    if (is_snow_layer_field) then
       ! For multi-layer snow fields, build a special output variable that handles
       ! missing snow layers appropriately

       ! Note that the following allocation is not what we would want if this routine
       ! were operating in a threaded region (or, more generally, within a loop over
       ! nclumps) - in that case we would want to use the bounds information for this
       ! clump. But currently that&apos;s not possible because the bounds of some fields have
       ! been reset to 1 - see also bug 1786.
       allocate(field(lbound(clmptr_ra(hpindex)%ptr, 1) : ubound(clmptr_ra(hpindex)%ptr, 1), 1:num2d))
 
Ideally, we would want field to be allocated to be just big enough for the given clump bounds (if we were within a loop over clumps). But that&apos;s not possible if the field&apos;s lower bound has been reset to 1.

So, as with my above notes, this code will only work as intended if the bounds passed to hist_update_hbuf_field_2d are proc bounds.

Once this bug is addressed, we should search for &apos;1786&apos; in histFileMod to find all notes about this problem.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5504</commentid>
    <comment_count>3</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2013-09-19 14:32:41 -0600</bug_when>
    <thetext>It looks like the syntax I suggested:

    field(arr_lbound: , 1:) =&gt; clmptr_ra(hpindex)%ptr(:,1:num2d)


is a fortran2003 feature, which should now be supported by the major compilers.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7518</commentid>
    <comment_count>4</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2016-05-16 14:26:27 -0600</bug_when>
    <thetext>Probably deferring this until threading is reworked in CLM to be done at a higher level - at which point this bug will either go away or be changed considerably</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1806</bug_id>
          
          <creation_ts>2013-08-31 07:26:34 -0600</creation_ts>
          <short_desc>albgrd and albgri history fields depend on decomposition, for urban points</short_desc>
          <delta_ts>2016-06-13 14:58:17 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>muszala@ucar.edu</cc>
    
    <cc>oleson@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387203--cfeRbF6gcdkglQaQz-AE-fqBaZtHrbG35v5NguzMTg</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5447</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2013-08-31 07:26:34 -0600</bug_when>
    <thetext>I believe that this problem only affects history fields, and doesn&apos;t actually affect the operation of the model. This is a restatement of the initial bug in bug 1310 (most of the comments in that bug report really relate to a different bug).

For urban points, albgrd and albgri depend on the decomposition - either the number of tasks or the number of threads per task.

I believe that what is going on is the following (copied from bug 1310; I haven&apos;t checked carefully whether the behavior has changed slightly from this): 

(1) In UrbanMod.F90: UrbanAlbedo: A count is made of the number of urban
landunits with coszen &gt; 0 (num_solar); note that this count is just of the
number of landunits that this processor is responsible for; thus, this is where
the # PE-dependence comes in, I think.

(2) Later in that subroutine, a bunch of calculations are done if num_solar &gt; 0
-- i.e., if this PE is responsible for at least one urban landunit with coszen
&gt; 0. Note that many of these calculations are done for all landunits, even ones
for which coszen = 0. This introduces the possibility for different results
depending on the decomposition.

(3) The particular difference that I am seeing is in albgrd &amp; albgri. These are
initialized to 0 at the start of the subroutine, and so remain 0 on any PE for
which num_solar = 0. However, for PEs with num_solar &gt; 0, landunits that have
coszen = 0 end up getting albgrd = albgri = 1. This is because the calculation
of albgrd &amp; albgri depends on the values of the sref_* variables, which are
initialized to 1 (and stay at 1 for any landunit for which coszen = 0).



I have confirmed this by comparing the following from clm4_5_20: SMS_Lm1_P180x1.f19_g16.ICLM45BGC.yellowstone_intel vs SMS_Lm1_P360x1.f19_g16.ICLM45BGC.yellowstone_intel - both with ALBGRD, ALBGRI, ALBD and ALBI added to history output.

One thing I am confused about is whether this problem occurs from albgrd and albgri, but not for albd and albi - since the latter seem to just be copies of the former in UrbanMod.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7537</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2016-06-13 14:23:02 -0600</bug_when>
    <thetext>Keith: is this a priority to fix for CLM5? It affects these two diagnostic fields.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7545</commentid>
    <comment_count>2</comment_count>
    <who name="Keith Oleson">oleson@ucar.edu</who>
    <bug_when>2016-06-13 14:47:20 -0600</bug_when>
    <thetext>I don&apos;t think it&apos;s a priority.  As I understand it, it just affects those history fields (which are off by default) and not the model operation (as in actual albedos that the urban model uses and/or bfb restarts).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7546</commentid>
    <comment_count>3</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2016-06-13 14:58:17 -0600</bug_when>
    <thetext>Sounds good - thanks. Yes, your understanding is correct.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1823</bug_id>
          
          <creation_ts>2013-09-26 21:49:39 -0600</creation_ts>
          <short_desc>change restart file format to decrease file size and prevent the need for some interpinic&apos;s</short_desc>
          <delta_ts>2016-06-13 14:29:11 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>dlawren@ucar.edu</cc>
    
    <cc>muszala@ucar.edu</cc>
    
    <cc>mvertens@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387203-7WTx8j--xBRkk1Apwb7K77aK1LNrcoTr4_I4hla9J3Q</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5536</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2013-09-26 21:49:39 -0600</bug_when>
    <thetext>With the addition of lots of inactive points in memory for the sake of dynamic landunits, the size of CLM&apos;s restart files has increased significantly; e.g., for an f09 file:

old:
-rw-rw-r-- 1 sacks ncar 808M Jun  6 15:11 clmi.I1850CRUCLM45BGC.0241-01-01.0.9x1.25_g1v6_simyr1850_c130606.nc

new:
-rw-r--r-- 1 sacks ncar 2.3G Sep 26 21:03 clmi.I1850CRUCLM45BGC.0241-01-01.0.9x1.25_g1v6_simyr1850_c130926.nc


In addition, I have now had to go through a painful interpinic process twice, when simply adding 0-weight points to CLM&apos;s internal arrays.

Thus, I propose modifying the restart file format to remove a bunch of unneeded clutter - and ideally prevent having to run interpinic whenever you change the convention of which 0-weight points are included in CLM&apos;s internal arrays.

One idea would be to only write ACTIVE points to the restart file (i.e., using the active flags at the pft, col &amp; landunit levels). This makes sense because inactive points will generally have meaningless values anyway. This would require packing arrays into temporary, active-only arrays when writing restart files. The reverse operation would need to be done when reading restart files - read into a temporary array then unpack into memory by assigning the 1st point in the restart file to the 1st active point in memory, the 2nd point in the restart file to the 2nd active point, etc. Note that this might require doing away with some of the consistency checks (e.g., that the number of pfts on the restart file matches the number computed internally based on the surface dataset) - although with some thought we might be able to maintain equivalent checks (e.g., the number of pfts on the restart file should match the number of ACTIVE pfts computed internally).


Some thought would be needed as to how (if at all) this would require changes in interpinic - though my first thought is that nothing may need to be done in interpinic to handle this change.


Presumably the size of 1-d history files (with dov2xy = .false.) has increased similarly, but I&apos;m not sure if we want to apply these ideas to history files, because this could mess with people&apos;s ability to post-process these files.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1843</bug_id>
          
          <creation_ts>2013-10-16 09:49:44 -0600</creation_ts>
          <short_desc>max daylength is hard-coded for present-day orbital parameters</short_desc>
          <delta_ts>2017-11-08 16:06:15 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>erik@ucar.edu</cc>
    
    <cc>muszala@ucar.edu</cc>
    
    <cc>nanr@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
    
    <cc>sacks@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387203-8m_mSGcdu06mCEMlCBupeuLOj_gPQib0336lK0PnMkI</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5599</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2013-10-16 09:49:44 -0600</bug_when>
    <thetext>In doing my daylength refactor (https://svn-ccsm-models.cgd.ucar.edu/clm2/branches/daylength_refactor/), I discovered that max daylength is hard-coded for present-day orbital parameters. In talking with Nan, this could be a problem for present-day runs.

It is easiest to see the problem on the above-referenced branch (which will come to the trunk soon). 

I believe that the daylength calculation (in models/lnd/clm/src/clm4_5/biogeophys/DaylengthMod.F90 - see the daylength function) is agnostic to orbital parameters, so that should be fine - as long as it is getting the true, current solar declination angle, which I believe is the case.

The problem is in src/clm4_5/main/iniTimeConst.F90 - see the setting of max_decl there. There are actually two related problems here:

(1)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5600</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2013-10-16 10:06:16 -0600</bug_when>
    <thetext>Oops, didn&apos;t finish that; to finish:

The two related problems are:

(1) max_dayl is computed using an orbital parameter that is hard-coded for present-day

(2) max_dayl is set in initialization, then doesn&apos;t change... this isn&apos;t itself a problem currently, but would be a problem if we set it based on the actual, current orbital parameters


So I propose the following solution:

(1) Create a new function in DaylengthMod that computes the max daylength for a given grid cell. This would look like:

elemental real(r8) function max_daylength(lat, obliquity)
   max_decl = obliquity
   if (lat &lt; 0) max_decl = -max_decl
   max_daylength = daylength(lat, max_decl)
end function

(2) Do NOT set max_dayl in iniTimeConst. Instead, call the above function wherever it is needed - currently, this is just in one place, in CanopyFluxesMod.F90. So here we could have a local variable, max_dayl, and calculate it as:

max_dayl(begg:endg) = max_daylength(lat, obliquity)

(3) We then have to get the obliquity from the coupler, which I believe is already done in this call in lnd_comp_mct:

       call shr_orb_decl( calday     , eccen, mvelpp, lambm0, obliqr, declin  , eccf )

and then pass obliquity as an argument to the driver, which will then pass it along to CanopyFluxes.



I would like confirmation from Nan and Erik on these points:

(a) Nan (or Erik): Is obliquity the correct parameter to use here? What we want is the maximum solar declination angle; in iniTime const this is set as:

      ! +/- 23.4667 degrees = +/- 0.409571 radians, use negative value for S. Hem

So, is that the obliquity?

(b) Mostly for Erik: Does this seem like a reasonable solution? And do you agree with the overall design I am proposing? In particular, does it make sense to get obliquity in lnd_comp_mct and pass it down the call chain? The alternative would be to call shr_orb_decl from within the max_daylength function, but from our brief shuttle conversation, it sounded like there is some design reason to get these sort of parameters at the top level and then pass them down?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5601</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2013-10-16 10:11:01 -0600</bug_when>
    <thetext>This change will almost certainly change answers slightly, even for present-day runs (because I imagine that the hard-coded max declination angle in iniTimeConst doesn&apos;t agree completely with CESM&apos;s obliquity).

So for testing purposes, this should be done in two steps:

(1) Simply change the hard-coded max declination angle in iniTimeConst to agree with CESM&apos;s obliquity. This will change answers. (If this differs for different time periods, e.g. 1850 vs 2000, I may want to introduce a kludge so that the hard-coded value keys off of the time period of the run (or maybe introduce a call in iniTimeConst to shr_orb_decl) - so that this hard-coded value always agrees with CESM&apos;s obliquity at initialization.

(2) Do my proposed refactoring. For runs in which the orbital parameters are fixed throughout the run, this should be bfb with #1.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5602</commentid>
    <comment_count>3</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2013-10-16 10:13:16 -0600</bug_when>
    <thetext>Oops, when I said &quot;or maybe introduce a call in iniTimeConst to shr_orb_decl&quot; I meant shr_orb_params</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5758</commentid>
    <comment_count>4</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2013-12-17 11:18:05 -0700</bug_when>
    <thetext>Un-assigning myself from this... I was only assigned to this because it came up in the course of my work a few months ago, but it&apos;s not currently relevant for me.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6845</commentid>
    <comment_count>5</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2015-05-08 09:44:02 -0600</bug_when>
    <thetext>Looking back at this bug report, I noticed a typo in the initial bug report:

&gt; In talking with Nan, this could be a problem for present-day runs.

Should read:

&gt; In talking with Nan, this could be a problem for PALEO runs.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8317</commentid>
    <comment_count>6</comment_count>
    <who name="Erik Kluzek">erik@ucar.edu</who>
    <bug_when>2017-11-02 15:01:17 -0600</bug_when>
    <thetext>The simplest change to accomplish this is to just do...

Index: main/clm_initializeMod.F90
===================================================================
--- main/clm_initializeMod.F90	(revision 87306)
+++ main/clm_initializeMod.F90	(working copy)
@@ -385,11 +385,10 @@
     call InitDaylength(bounds_proc, declin=declin, declinm1=declinm1)
              
     ! Initialize maximum daylength, based on latitude and maximum declination
-    ! maximum declination hardwired for present-day orbital parameters, 
-    ! +/- 23.4667 degrees = +/- 0.409571 radians, use negative value for S. Hem
+    ! given by the obliquity use negative value for S. Hem
 
     do g = bounds_proc%begg,bounds_proc%endg
-       max_decl = 0.409571
+       max_decl = obliqr
        if (grc%lat(g) &lt; 0._r8) max_decl = -max_decl
        grc%max_dayl(g) = daylength(grc%lat(g), max_decl)
     end do


This looks correct to me, since in shr_orb_calc

declin  = asin(sin(obliqr)*sin(lamb))

lamb represents the earth going around the sun, so we just want the point where sin(lamb)==1. So you have

declin = asin(sin(obliqr)*1) = obliqr

So the above change is the quickest solution to the right answer. Other refactoring could be done later.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8319</commentid>
    <comment_count>7</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-11-02 16:41:17 -0600</bug_when>
    <thetext>Erik: At a glance, your solution looks like a simple and reasonable solution for the first problem:

(1) max_dayl is computed using an orbital parameter that is hard-coded for present-day

but doesn&apos;t address

(2) max_dayl is set in initialization, then doesn&apos;t change... this isn&apos;t itself a problem currently, but would be a problem if we set it based on the actual, current orbital parameters

It probably still makes sense to bring your solution to the trunk, since that solves the first-order problem. But then we should open a separate issue to eventually solve (2), since my understanding is that that&apos;s needed if you have time-evolving orbital parameters.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8320</commentid>
    <comment_count>8</comment_count>
    <who name="Erik Kluzek">erik@ucar.edu</who>
    <bug_when>2017-11-02 17:32:31 -0600</bug_when>
    <thetext>A few years ago there was only the option to set orbital parameters at initialization. It looks like there is now the hardware in place to actually change it each year. But, this isn&apos;t normally exercised, and I couldn&apos;t find any tests that actually turn it on. Compsets don&apos;t seem to trigger it either. Since it&apos;s untested I wonder if it actually works? But, in any case, the simple change is an improvement, since it&apos;ll be aligned for the first year, and just slowly be off which each passing year. The simple change will be right for everything we test, and just off for a feature that isn&apos;t tested.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8321</commentid>
    <comment_count>9</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-11-02 17:53:41 -0600</bug_when>
    <thetext>Okay, thanks for those details.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8335</commentid>
    <comment_count>10</comment_count>
    <who name="Erik Kluzek">erik@ucar.edu</who>
    <bug_when>2017-11-08 16:06:15 -0700</bug_when>
    <thetext>clm4_5_17_r263 does a partial fix to this by correcting it at initialization. variable_years will be wrong though.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1884</bug_id>
          
          <creation_ts>2013-12-17 11:26:23 -0700</creation_ts>
          <short_desc>min &amp; max don&apos;t work correctly for some history fields</short_desc>
          <delta_ts>2016-06-13 14:46:04 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>muszala@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387203-tezp4gxLZuXkdUGk6UqkVsEb7WiSPgqKwKavtwSrfIU</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5759</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2013-12-17 11:26:23 -0700</bug_when>
    <thetext>The &apos;min&apos; and &apos;max&apos; functions don&apos;t work correctly for some history fields. Specifically, this seems to apply to fields that take on spval at some points in time, but not others. This definitely applies to the multi-layer snow fields that I&apos;m adding; I&apos;m not sure if it applies to any others.

This problem seems to be in clm4.0 and clm4.5, although I have only witnessed it in CLM4.5.

The fix is as shown at the bottom of the bug report; I have tested this for my new snow fields (exercising the clm4.5 code, with 2-d fields averaged to the grid cell level). Note that the diffs below just fix the problem in one place. This problem occurs in at least 3 other places in the clm4.5 code, and a similar number of places in the clm4.0 code (and maybe more; I didn&apos;t look carefully - search for nacs in the code). The main reason I&apos;m not just making the fix right now is that I don&apos;t have time to test this fix in all the places where it occurs. This could actually be a good excuse to consolidate some of the duplicated code in histFileMod - i.e., consolidate the 4 (or more) places where the average / min / max logic is duplicated (with small variations).

Note that I am planning to add min/max versions of the snow history fields to some of the CLM tests. If I do this, then I would expect this bug fix to change answers for these min/max snow history fields (in particular, I expect to see a FILLDIFF in cprnc).

Here are the diffs that fix the problem in one place:

Index: main/histFileMod.F90
===================================================================
--- main/histFileMod.F90	(revision 56050)
+++ main/histFileMod.F90	(working copy)
@@ -1391,10 +1391,10 @@
                 if (field_gcell(k,j) /= spval) then
                    if (nacs(k,j) == 0) hbuf(k,j) = -1.e50_r8
                    hbuf(k,j) = max( hbuf(k,j), field_gcell(k,j) )
+                   nacs(k,j) = 1
                 else
-                   hbuf(k,j) = spval
+                   if (nacs(k,j) == 0) hbuf(k,j) = spval
                 endif
-                nacs(k,j) = 1
              end do
           end do
        case (&apos;M&apos;) ! Minimum over time
@@ -1403,10 +1403,10 @@
                 if (field_gcell(k,j) /= spval) then
                    if (nacs(k,j) == 0) hbuf(k,j) = +1.e50_r8
                    hbuf(k,j) = min( hbuf(k,j), field_gcell(k,j) )
+                   nacs(k,j) = 1
                 else
-                   hbuf(k,j) = spval
+                   if (nacs(k,j) == 0) hbuf(k,j) = spval
                 endif
-                nacs(k,j) = 1
              end do
           end do
        case default</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1886</bug_id>
          
          <creation_ts>2013-12-23 12:57:11 -0700</creation_ts>
          <short_desc>refactor code that assumes a particular ordering of PFT type constants</short_desc>
          <delta_ts>2016-06-29 15:41:36 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>bandre@lbl.gov</cc>
    
    <cc>dlawren@ucar.edu</cc>
    
    <cc>muszala@ucar.edu</cc>
    
    <cc>mvertens@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387203-sV5xWwkZiTB3uogu_OePUeni92uXL2Mx5Z7aUxF1zjc</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5766</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2013-12-23 12:57:11 -0700</bug_when>
    <thetext>Here&apos;s a fun thought experiment: How much of CLM would break if you changed the numbering of these variables in pftvarcon:

  integer :: noveg                  !value for not vegetated 
  integer :: ndllf_evr_tmp_tree     !value for Needleleaf evergreen temperate tree
  integer :: ndllf_evr_brl_tree     !value for Needleleaf evergreen boreal tree
  integer :: ndllf_dcd_brl_tree     !value for Needleleaf deciduous boreal tree
  integer :: nbrdlf_evr_trp_tree    !value for Broadleaf evergreen tropical tree
  integer :: nbrdlf_evr_tmp_tree    !value for Broadleaf evergreen temperate tree
  integer :: nbrdlf_dcd_trp_tree    !value for Broadleaf deciduous tropical tree
  integer :: nbrdlf_dcd_tmp_tree    !value for Broadleaf deciduous temperate tree
  integer :: nbrdlf_dcd_brl_tree    !value for Broadleaf deciduous boreal tree
  integer :: ntree                  !value for last type of tree
  integer :: nbrdlf_evr_shrub       !value for Broadleaf evergreen shrub
  integer :: nbrdlf_dcd_tmp_shrub   !value for Broadleaf deciduous temperate shrub
  integer :: nbrdlf_dcd_brl_shrub   !value for Broadleaf deciduous boreal shrub
  integer :: nc3_arctic_grass       !value for C3 arctic grass
  integer :: nc3_nonarctic_grass    !value for C3 non-arctic grass
  integer :: nc4_grass              !value for C4 grass

I don&apos;t know the answer to this question, but I know the answer is non-zero. Here are some examples, from a quick search:

From pftdynMod:

      ! If this is a tree pft, then
      ! get the annual harvest &quot;mortality&quot; rate (am) from harvest array
      ! and convert to rate per second
      if (ivt(p) &gt; noveg .and. ivt(p) &lt; nbrdlf_evr_shrub) then

From CNFireMod:

              ! For crop veg types
              if( pft%itype(p) &gt; nc4_grass )then
                 cropf_col(c) = cropf_col(c) + pft%wtcol(p)
              end if
              ! For natural vegetation (non-crop)
              if( pft%itype(p) &gt;= ndllf_evr_tmp_tree .and. pft%itype(p) &lt;= nc4_grass )then
                 lfwt(c) = lfwt(c) + pft%wtcol(p)
              end if

From CNVegStructUpdateMod:

             ! if shrubs have a squat taper 
             if (ivt(p) &gt;= nbrdlf_evr_shrub .and. ivt(p) &lt;= nbrdlf_dcd_brl_shrub) then
                taper = 10._r8




And a corollary question: How much of CLM SHOULD break when you change the ordering of these? I would argue strongly that the answer to this question SHOULD BE ZERO.

The problems I see with usages like the above examples are:

(1) If we change the ordering of these pfts in the future, or remove any pfts, we&apos;ll break a lot of code

(2) More importantly: If a user naively tries to add a new pft, they are likely to inadvertently break code in hard-to-detect ways. For example, if someone naively added a new shrub type before nbrdlf_evr_shrub, it would be treated as a tree by the above code in pftdynMod. 


What should be done? I&apos;d say that the only conditional that should be allowed involving ivt is equality: no checks of less than something or greater than something. To enable logic like the above, there should be additional metadata associated with each pft, like is_tree, is_crop, is_natveg, is_shrub, etc.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5767</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik@ucar.edu</who>
    <bug_when>2013-12-23 13:40:58 -0700</bug_when>
    <thetext>Hey Bill

I agree with you. This has been something I&apos;ve been aware of as a danger, but haven&apos;t been able to refactor. I started adding the indices rather than having magic numbers hardcoded everywhere in CLM. That&apos;s part of the danger of this -- there are hard-coded assumptions about the values and likely still hard-coded magic numbers. I think we have a variable for tree, but we probably need something similar for shrub and grass.

I think I did add some limited checking that does verify things are expected when reading in the params file (pft con file). So if you change the order it might catch at least some situations. But, yeah it would be best if the code were flexible enough that the order didn&apos;t matter, especially as we are adding a ton of more crop PFT&apos;s.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1898</bug_id>
          
          <creation_ts>2014-01-13 14:18:55 -0700</creation_ts>
          <short_desc>incorrect version identifiers in text printed by source code</short_desc>
          <delta_ts>2016-06-29 15:42:53 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>muszala@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387203-JyX0f8q39hKT1YaB9jQKzaKKXhp7xUHotgMI6IyzIzw</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5786</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2014-01-13 14:18:55 -0700</bug_when>
    <thetext>The CLM version numbers are incorrect in various text that is printed by the model. Some examples are:

clm4_0/biogeochem/CNDVMod.F90:265:    str = &apos;Community Land Model: CLM3&apos;
clm4_5/biogeochem/CNDVMod.F90:181:    str = &apos;Community Land Model: CLM3&apos;
clm4_5/main/clm_varctl.F90:36:  character(len=256), public :: source   = &quot;Community Land Model CLM4.0&quot; ! description of this source</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7562</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2016-06-29 15:42:53 -0600</bug_when>
    <thetext>We should create a shared constant somewhere that has the CLM version number, and reference that.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1904</bug_id>
          
          <creation_ts>2014-01-22 17:01:23 -0700</creation_ts>
          <short_desc>check for LSF_PJL_TYPE in regridbatch.sh doesn&apos;t work correctly</short_desc>
          <delta_ts>2016-06-29 15:44:27 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.2.z Release</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>muszala@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387203-a02rY6uuWPMFM_v5oG-y78dNJ2VIBKjsugnq-AAqoUc</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5801</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2014-01-22 17:01:23 -0700</bug_when>
    <thetext>This is from the cesm1.2.0 release, but I think this is the same in the latest CLM trunk:

It seems that the check for LSF_PJL_TYPE in tools/shared/mkmapdata/regridbatch.sh is no longer working correctly - i.e.:

       if [ ! -z $LSF_PJL_TYPE ]; then
	   cmdargs=&quot;$cmdargs -b&quot;
       fi

When I submitted this as a batch job, I got an error message:

ERROR: Program was not launched by POE.  Abort!!!

Removing the above lines allows this to work, but that&apos;s not a good, general solution.

It is possible that this was user error on my part....

As a reminder, we want to move to using the shared mapping tools (bug 1683), which might make this problem go away (???).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6174</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik@ucar.edu</who>
    <bug_when>2014-05-28 22:21:40 -0600</bug_when>
    <thetext>In clm4_5_73 this was changed to

if [ ! -z &quot;$LSFUSER&quot; ]; then

I think the issue may be related to changes in LSF env variables with the specific version of LSF. So though the previous form worked before, a newer version of LSF makes it not work.

It sounds like this needs to be assessed for the cesm1_2_2 release.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1906</bug_id>
          
          <creation_ts>2014-01-23 11:14:21 -0700</creation_ts>
          <short_desc>ncd_io_1d_log_glob is broken</short_desc>
          <delta_ts>2016-06-29 15:48:15 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>muszala@ucar.edu</cc>
    
    <cc>mvertens@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387203-dmbPZ1LR_iwwKuS7pRpUxTrBJK27YCF05D65TDbGpgI</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5803</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2014-01-23 11:14:21 -0700</bug_when>
    <thetext>When trying to read in logical values with ncd_io in clm4_5_59, I get this message:

(shr_sys_abort) ERROR: ncd_io_1d_log_glob ERROR: read in bad integer value(s) for logical data

It looks like the relevant variable is never set: starting line 1216 in ncdio_pio.F90:

          allocate(idata1d(size(data))) 
          data = (idata == 1)
          if ( any(idata1d /= 0 .and. idata1d /= 1) )then
             call shr_sys_abort( subname// &amp;
                  &apos; ERROR: read in bad integer value(s) for logical data&apos; )
          end if

This worked in clm4_5_52. My guess is that it got broken in clm4_5_53, which created the .in version of ncdio_pio.F90.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7563</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2016-06-29 15:48:15 -0600</bug_when>
    <thetext>Plan is to remove this for now, since it apparently isn&apos;t used and is broken.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1923</bug_id>
          
          <creation_ts>2014-02-14 15:16:00 -0700</creation_ts>
          <short_desc>reorganize how mocks are done for unit testing</short_desc>
          <delta_ts>2016-06-29 15:54:46 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Bill Sacks">sacks@ucar.edu</assigned_to>
          <cc>bandre@lbl.gov</cc>
    
    <cc>erik@ucar.edu</cc>
    
    <cc>muszala@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387203-36RConZiWBNKr4fNQJGQ0xrVzU2bDxZtVJvfFOC2-YY</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5858</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2014-02-14 15:16:00 -0700</bug_when>
    <thetext>I&apos;m starting to think that I should have created mocks a level lower than where they currently are. For example, I currently mock out modules that use mpi, spmdMod, mct, etc. But this is leading to too many mocks. It might be better to mock out those problematic things - i.e., create mock versions of mpi, spmdMod, mct, etc. Then we could build the regular versions of modules that use them (they would just end up using the mocked-out version).</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1989</bug_id>
          
          <creation_ts>2014-06-06 15:27:44 -0600</creation_ts>
          <short_desc>add ability to specify namelist requirements via xml</short_desc>
          <delta_ts>2016-09-21 15:02:58 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P5</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>andre@ucar.edu</cc>
    
    <cc>muszala@ucar.edu</cc>
    
    <cc>mvertens@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387203-XhZVfhtbVL_OE2zTmGXpnA85y-N6GMv4OzUX_2nZMMA</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>6197</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2014-06-06 15:27:44 -0600</bug_when>
    <thetext>Erik and I were talking about how it would be nice to be able to specify namelist requirements via an xml file, in order to simplify the error-checking that we currently do in build_namelist.

We could see three possible ways to do this:

(1) Specify requirements (somehow) in the namelist definition xml file

(2) Have a file similar to namelist_defaults, but giving requirements rather than defaults


(3) If a lot of our error-checking is along the lines of: 

If variable X=xxx, then variable Y should be yyy, which is its default value

- Then we could implement this by having something like an &quot;unmodifiable&quot; attribute in the namelist_defaults file.

e.g., rather than

&lt;Y X=xxx&gt;yyy&lt;/Y&gt;

instead, have:

&lt;Y X=xxx unmodifiable=&quot;true&quot;&gt;yyy&lt;/Y&gt;

If the unmodifiable attribute is set, that means that, not only is this its default value, but also it cannot be modified from this value by the user.

This could possibly be implemented in the add_default call.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7697</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2016-09-21 15:02:58 -0600</bug_when>
    <thetext>Mariana is working on a cime feature that accomplishes most or all of what we wanted here: You can add an element in namelist_definition like this:

&lt;unmodifiable_via_user_nl&gt;ERROR TEXT&lt;/unmodifiable_via_user_nl&gt;

Then if the given variable appears in the user_nl file, build_namelist will die with an error (printing the given ERROR TEXT).

This relies on the python version of the namelist utilities - so we&apos;ll be able to use it in CLM once CLM&apos;s build namelist is rewritten in python.

If I understand the original comment correctly, this mechanism wouldn&apos;t handle case (3) - which I think is dealing with the possibility that a given variable might be modifiable via the user_nl file in some circumstances but not in others. But I don&apos;t know how many (if any) cases we have of this... if it turns out we have a lot, I imagine we could extend the new code somehow to handle that case.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2002</bug_id>
          
          <creation_ts>2014-06-25 20:00:47 -0600</creation_ts>
          <short_desc>BTRAN should be spval over all special landunits; also check other history fields</short_desc>
          <delta_ts>2016-07-29 09:08:06 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>dlawren@ucar.edu</cc>
    
    <cc>muszala@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387203-UTHE-yiko96t-bKwfTszIZ1kwtvv1WZVTMlfASZdJ0c</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>6241</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2014-06-25 20:00:47 -0600</bug_when>
    <thetext>I noticed that the BTRAN history field is spval over urban and lake landunits (as it should be). However, it is 0 over glacier / glacier_mec, and also 0 over wetland. I&apos;m not sure if its value over wetland matters very much (because I&apos;m thinking that a grid cell can never have a mix of wetland and anything else; is that true?), but its 0 values over glacier means: If a grid cell has a mix of natural vegetation and glacier, its grid cell-average BTRAN will be wrong because of these 0 values that are averaged in.

I bet a similar problem exists for other history fields; I just happened to notice it for BTRAN.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2011</bug_id>
          
          <creation_ts>2014-07-09 16:24:28 -0600</creation_ts>
          <short_desc>duplicate CLM history fields, both on by default</short_desc>
          <delta_ts>2016-07-07 11:25:39 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>CLM5</target_milestone>
          <dependson>1856</dependson>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>dlawren@ucar.edu</cc>
    
    <cc>muszala@ucar.edu</cc>
    
    <cc>mvertens@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387203-ocIiWXdlJVV3WpbK1VrXkh7NKCbY_-y1I2EfG0WHoKY</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>6258</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2014-07-09 16:24:28 -0600</bug_when>
    <thetext>In working out some differences in Mariana&apos;s refactor branch, I discovered that there are a number of history fields that refer to the exact same thing but with a different name. The two I noticed are:

       call hist_addfld1d (fname=&apos;TOTLITC&apos;, units=&apos;gC/m^2&apos;, &amp;
            avgflag=&apos;A&apos;, long_name=&apos;total litter carbon&apos;, &amp;
            ptr_col=this%totlitc_col)
       call hist_addfld1d (fname=&apos;LITTERC&apos;, units=&apos;gC/m^2&apos;, &amp;
            avgflag=&apos;A&apos;, long_name=&apos;litter C&apos;, &amp;
            ptr_col=this%totlitc_col)

and:

       call hist_addfld1d (fname=&apos;TOTSOMC&apos;, units=&apos;gC/m^2&apos;, &amp;
            avgflag=&apos;A&apos;, long_name=&apos;total soil organic matter carbon&apos;, &amp;
            ptr_col=this%totsomc_col)
       call hist_addfld1d (fname=&apos;SOILC&apos;, units=&apos;gC/m^2&apos;, &amp;
            avgflag=&apos;A&apos;, long_name=&apos;soil C&apos;, &amp;
            ptr_col=this%totsomc_col)

The code had this comment:

       ! add history fields for all CLAMP CN variables

So presumably the variables needed to be renamed for CLAMP? But at the very least, it seems like only one of each of these should be on by default.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6259</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2014-07-09 16:39:07 -0600</bug_when>
    <thetext>To be clear: this is NOT a new problem with Mariana&apos;s branch: this duplication has existed for a while.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6260</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2014-07-09 16:40:07 -0600</bug_when>
    <thetext>A slightly different, but related, oddity: o2_decomp_depth_unsat_col is output regardless of hist_wrtch4diag, but with different names and metadata:

    if (hist_wrtch4diag) then
       call hist_addfld2d (fname=&apos;O2_DECOMP_DEPTH_UNSAT&apos;, units=&apos;mol/m3/s&apos;, type2d=&apos;levgrnd&apos;, &amp;
            avgflag=&apos;A&apos;, long_name=&apos;O2 consumption from HR and AR for non-inundated area&apos;, &amp;
            ptr_col=this%o2_decomp_depth_unsat_col)
    else
       call hist_addfld2d (fname=&apos;o2_decomp_depth_unsat&apos;, units=&apos;mol/m3/2&apos;, type2d=&apos;levgrnd&apos;, &amp;
            avgflag=&apos;A&apos;, long_name=&apos;o2_decomp_depth_unsat&apos;, &amp;
            ptr_col=this%o2_decomp_depth_unsat_col)
    end if

(this duplication also existed on the trunk, although it was less clear there)</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2022</bug_id>
          
          <creation_ts>2014-07-31 14:44:46 -0600</creation_ts>
          <short_desc>add namelist option to turn on all history fields, add a CLM test that uses this</short_desc>
          <delta_ts>2016-07-07 11:26:14 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Mariana Vertenstein">mvertens@ucar.edu</assigned_to>
          <cc>bandre@lbl.gov</cc>
    
    <cc>erik@ucar.edu</cc>
    
    <cc>muszala@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387203-M2WvhYvR56YC5k4Yg9BW8G6yzLR0OoxE8xSBqeYr6KU</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>6305</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2014-07-31 14:44:46 -0600</bug_when>
    <thetext>You can turn on all history fields by ignoring a few lines of code in histFileMod:

Index: src/clm4_5/main/histFileMod.F90
===================================================================
--- src/clm4_5/main/histFileMod.F90    (revision 61424)
+++ src/clm4_5/main/histFileMod.F90    (working copy)
@@ -4139,9 +4139,6 @@
          p2c_scale_type=scale_type_p2c, c2l_scale_type=scale_type_c2l, l2g_scale_type=scale_type_l2g)

     l_default = &apos;active&apos;
-    if (present(default)) then
-       l_default = default
-    end if
     if (trim(l_default) == &apos;inactive&apos;) then
        return
     else
@@ -4429,9 +4426,6 @@
          no_snow_behavior=no_snow_behavior)

     l_default = &apos;active&apos;
-    if (present(default)) then
-       l_default = default
-    end if
     if (trim(l_default) == &apos;inactive&apos;) then
        return
     else

It would be useful to have a namelist option that does this, for testing.

Then we should add a test that uses this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6306</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2014-07-31 14:47:52 -0600</bug_when>
    <thetext>We probably want to use this option for one test for each configuration... this could replace the addition of select fields, which we do for some tests.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2023</bug_id>
          
          <creation_ts>2014-08-05 15:32:30 -0600</creation_ts>
          <short_desc>Clean up use and implementation of accumulMod</short_desc>
          <delta_ts>2016-08-29 14:42:09 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>erik@ucar.edu</cc>
    
    <cc>muszala@ucar.edu</cc>
    
    <cc>mvertens@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387203-0U3HLIcatBfEZgwH5aPBFrNCuiF47dSJMePObZSDCEI</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>6309</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2014-08-05 15:32:30 -0600</bug_when>
    <thetext>Currently, on Mariana&apos;s refactor branch, there is a lot of verbosity and repeated boilerplate code needed in the InitAccVars routines, which initialize variables associated with time-accumulated fields. For example:

    begp = bounds%begp; endp = bounds%endp

    ! Allocate needed dynamic memory for single level pft field
    allocate(rbufslp(begp:endp), stat=ier)
    if (ier/=0) then
       write(iulog,*)&apos; in &apos;
       call endrun(msg=&quot; allocation error for rbufslp&quot;//&amp;
            errMsg(__FILE__, __LINE__))
    endif

    nstep = get_nstep()

    call extract_accum_field (&apos;AGDDTW&apos;, rbufslp, nstep) 
    this%agddtw_patch(begp:endp) = rbufslp(begp:endp)

    call extract_accum_field (&apos;AGDD&apos;, rbufslp, nstep) 
    this%agdd_patch(begp:endp) = rbufslp(begp:endp)

    deallocate(rbufslp)

Could this be replaced by simply the following?:

    call extract_accum_field(&apos;AGDDTW&apos;, this%agddtw_patch(bounds%begp:bounds%endp))

    call extract_accum_field(&apos;AGDD&apos;, this%agdd_patch(begp:endp))

The two major changes here are:

(1) the extract_accum_field routine gets nstep, rather than requiring the caller to obtain and pass in this value.

(2) I avoid the use of rbufslp - which may be needed in some cases, but doesn&apos;t appear to be needed here.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7675</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2016-08-29 14:40:44 -0600</bug_when>
    <thetext>We should also consider storing individual objects for each accumul object, rather than the current storage in one centralized location with fields accessed by string. This would be similar to what I&apos;m doing for the annual_flux_dribbler_type. The one downside of this is that clients would need to explicitly call Restart for each field, but the feeling at today&apos;s clm-cmt meeting is that that&apos;s worth it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7676</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2016-08-29 14:42:09 -0600</bug_when>
    <thetext>Note that accumulMod routines currently can&apos;t be called from inside a clump (threading) loop. I believe that it would be very difficult to remove that limitation until we rework threading to be done at a higher level. This is because the accumulMod infrastructure is general enough to handle fields at any level (gridcell, column, patch, etc.), and if you want to have code inside a clump loop, you need to declare the lower bounds of any array arguments... these two things seem incompatible.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2093</bug_id>
          
          <creation_ts>2014-11-30 20:12:04 -0700</creation_ts>
          <short_desc>some CLM history fields don&apos;t restart properly</short_desc>
          <delta_ts>2016-08-22 14:45:19 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>andre@ucar.edu</cc>
    
    <cc>erik@ucar.edu</cc>
    
    <cc>muszala@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387203-P89LSIeHCC4lTx66CCo85fNsvYczhWW1iN3SZ-u3aug</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>6580</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2014-11-30 20:12:04 -0700</bug_when>
    <thetext>Mariana found that some CLM history fields don&apos;t restart properly. This was documented in bug 2091, but I&apos;m moving this here, because it&apos;s really a separate (and less critical) problem from 2091.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6581</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2014-11-30 20:12:40 -0700</bug_when>
    <thetext>From Mariana (from bug 2091):

There are still two problems that I have to track down with the restarts. They are that NFIRE is not bfb on restart and that EFLX_GRND_LAKE has a fill pattern difference on restart. I am wondering how long these two bugs have been there - since neither of these fields appear in when the suffix 
   &quot;clm-irrigOn_reduceOutput&quot;
is added to the test suite.  To discover this I actually ran the test
    ERS_Ly5.f10_f10.ICLM45BGCCROP.yellowstone_intel
where a lot more fields are output to monthly clm history files. The above two fields were the only ones that were a problem on restart. I am wondering if we should move to this test in the future rather than
    ERS_Ly5.f10_f10.ICLM45BGCCROP.yellowstone_intel.clm-irrigOn_reducedOutput</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6582</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2014-11-30 20:13:13 -0700</bug_when>
    <thetext>From Mariana (from bug 2091):

Committed 

   refactor_koven_bugfix_n01_clm4_5_1_r098 [I think this should say: refactor_koven_bugfix_n02_clm4_5_1_r098]

which fixed the restart problem for history variable NFIRE. Basically, it was to remove the following if clause in  CNVegStateType.F90
old:   if (nsrest == nsrStartup) this%nfire_col(c) = 0._r8
new:   this%nfire_col(c) = 0._r8

Now only history variable EFLX_GRND_LAKE has a problem on restart.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6583</commentid>
    <comment_count>3</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2014-11-30 20:13:34 -0700</bug_when>
    <thetext>From Mariana (from bug 2091):

I just confirmed that NFIRE was not bit-for-bit and EFLX_GRND_LAKE had fill pattern differences in clm4_5_1_r096 for the test: ERS_Ly5.f10_f10.ICLM45BGCCROP.yellowstone_intel
So the restart problems with those variables are outstanding issues not related to the clm4_5_1_r097 tag. As it turns out, I have fixed the NFIRE problem on the branch listed here - but the EFLX_GRND_LAKE problem is still outstanding.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6584</commentid>
    <comment_count>4</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2014-11-30 20:16:04 -0700</bug_when>
    <thetext>As to Mariana&apos;s suggestion of changing the ERS_Ly5 test to include more history fields: I think this is a good idea. I&apos;d suggest that, once the ERS test and others are set up to compare component history files as well as cpl hist files, we should change most or all of our reducedOutput tests to instead inherit from the &quot;monthly&quot; testmod, or something similar to it, so that they keep all of the default history fields, just with monthly rather than daily output.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6586</commentid>
    <comment_count>5</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2014-12-01 05:26:10 -0700</bug_when>
    <thetext>One more comment that I forgot to include from bug 2091, from me:

At a glance, I&apos;m not convinced that your fix for nfire is entirely correct. From a skim through CNFireMod, it looks like what&apos;s going on here is that nfire is only set in certain conditions, and when those conditions aren&apos;t met, it stays at its value from the previous time step. My intuition is that the correct thing to do is to either:

(1) Set nfire in every time step - setting it to 0 in conditions where it is currently not being touched.

(2) Keep the current logic (so nfire is only touched in certain conditions), and adding it as a restart field.

I don&apos;t understand the fire code well enough to know which of those is correct.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7589</commentid>
    <comment_count>6</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2016-07-07 11:35:59 -0600</bug_when>
    <thetext>To summarize the outstanding problems: 

(1) EFLX_GRND_LAKE has fill pattern differences upon restart

(2) NFIRE had different values upon restart; this was fixed, but I think in the wrong way</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2107</bug_id>
          
          <creation_ts>2014-12-12 16:42:00 -0700</creation_ts>
          <short_desc>move calls to alt_calc and SoilBiogeochemVerticalProfile to later in the driver sequence</short_desc>
          <delta_ts>2017-11-03 15:55:34 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>andre@ucar.edu</cc>
    
    <cc>muszala@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-jQZVxvhipxTHXrI5LGzRJnE7Cf1eq1ix1wK7iKkzfLw</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>6612</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2014-12-12 16:42:00 -0700</bug_when>
    <thetext>alt_calc and SoilBiogeochemVerticalProfile are called very early in the driver sequence. I think these should be moved later - to sometime after the dynamic subgrid stuff - since as a rule, science code should be called AFTER subgrid weights are updated. This would allow them to just operate on the active filters, rather than the active_and_inactive filters.

This is connected to bug 1668, but I don&apos;t know which depends on which.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7685</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2016-09-06 16:22:32 -0600</bug_when>
    <thetext>See comments in bug 1668 for latest thoughts on how to handle this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8324</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-11-03 15:55:34 -0600</bug_when>
    <thetext>alt_calc (in ActiveLayerMod) has some accumulation over a year. Currently it&apos;s working on inactive as well as active points. But since t_soisno isn&apos;t updated for inactive points (I think), its value over inactive points is likely messed up. On the other hand, if we just made this work over active points, then I&apos;m not sure what would happen for a column that&apos;s active for part of the year, inactive for part of the year....</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2185</bug_id>
          
          <creation_ts>2015-06-16 10:32:47 -0600</creation_ts>
          <short_desc>re-evaluate pnetcdf for 1-d fields with pio2</short_desc>
          <delta_ts>2016-07-07 11:46:19 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.4.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P4</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>andre@ucar.edu</cc>
    
    <cc>erik@ucar.edu</cc>
    
    <cc>jedwards@ucar.edu</cc>
    
    <cc>mvertens@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-Ceav3XX5TSX4rT8GItGo2LL0NPCmC8CztTNok_MlFBU</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>6872</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2015-06-16 10:32:47 -0600</bug_when>
    <thetext>Once we start using PIO2 in CLM, we should re-evaluate bug 1730.

In particular, we should try backing out the workaround that was put in place in clm4_5_1_r091, which involved avoiding pnetcdf for 1-d (dov2xy = .false.) fields. Then we should see if the problem documented in bug 1730 still exists.

If it seems to be resolved with pio2, we should back out the workaround.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2187</bug_id>
          
          <creation_ts>2015-06-26 11:29:48 -0600</creation_ts>
          <short_desc>need better way to find all possible history fields</short_desc>
          <delta_ts>2016-10-24 14:33:02 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.x Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>andre@ucar.edu</cc>
    
    <cc>dlawren@ucar.edu</cc>
    
    <cc>mvertens@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-ievVUNeOMWnCKux5giP4TQX1qCxKeuWLQeRAqp_G3PQ</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>6875</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2015-06-26 11:29:48 -0600</bug_when>
    <thetext>Danica raised the point that it is hard to find all possible history fields with the new CLM code organization. I know we have findHistFields.pl, but it doesn&apos;t seem to work right from the latest code base: it finds a lot of BGC-related fields, but didn&apos;t find the fields we were looking for (RH and QBOT in atm2lndType.F90). 

So maybe this tool just needs to be fixed? Or maybe I was using it wrong.

We also felt that this should either (a) print more information about the fields (e.g. whether it&apos;s active or inactive by default) or (b) print the file in which a given field is defined, so that you can go there to find more information about the field.

In looking through this code, I also noticed that the list of files to search is hard-coded. It seems like this list will quickly get out-of-date, if it isn&apos;t already. Can it simply search all F90 files below src?

Alternatively, if this tool is too hard to maintain, perhaps another option would be to give a namelist option to CLM to make it write out all history fields to its log file in initialization.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7719</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2016-10-24 14:33:02 -0600</bug_when>
    <thetext>Feeling from today&apos;s clm-cmt meeting is that, at least for now, we may just make use of the runtime output for this purpose. We think there&apos;s already something like this; it may just be a matter of cleaning up this output to be easily greppable (e.g., one line per variable).

But this depends somewhat on what the purpose is: e.g., the runtime output can&apos;t tell you what file the field is defined in (need to do a later grep for that), or the association between variable names in the code and history file variable names.

So we should ask Danica what her main use case is.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2218</bug_id>
          
          <creation_ts>2015-09-18 12:30:09 -0600</creation_ts>
          <short_desc>each patch / column / landunit type index should have unique meaning</short_desc>
          <delta_ts>2015-09-18 12:30:09 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.4.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>andre@ucar.edu</cc>
    
    <cc>dlawren@ucar.edu</cc>
    
    <cc>mvertens@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-BW3tEtSZt8nD3zf8bVP68CRlyYU-1rY78LBjULvsgWs</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7140</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2015-09-18 12:30:09 -0600</bug_when>
    <thetext>I feel that each patch / column / landunit type index should have unique meaning. For example, we currently use noveg (0) for the patch type for the bare ground patch on the natural veg landunit, as well as for all patches on special landunits. For column index, I think we&apos;re doing pretty well now, although we should confirm that there aren&apos;t any indices that are used on multiple landunits.

This would help in two ways:

(1) It would make it easier to process the 1-d (vector) history output

(2) It would allow for more straightforward logic in initInterp. For example, when checking is_sametype for patches, we could just check whether the patch type is the same, without having to also check the column and landunit type - because an identical patch type would imply identical column and landunit type, too. (In the case of generic crop, which can appear on either the natural veg landunit or the crop landunit, identical patch type doesn&apos;t imply identical col/landunit type, but in that case, that&apos;s what we want: i.e., we just want to find the same patch type without regards for what landunit type it&apos;s on.)</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2221</bug_id>
          
          <creation_ts>2015-09-29 15:40:54 -0600</creation_ts>
          <short_desc>ED runs die in PIO while trying to read params file, starting with cime3</short_desc>
          <delta_ts>2015-09-30 04:43:20 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.4.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Stefan">muszala@ucar.edu</assigned_to>
          <cc>andre@ucar.edu</cc>
    
    <cc>erik@ucar.edu</cc>
    
    <cc>jedwards@ucar.edu</cc>
    
    <cc>mvertens@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-LZx4V-7viZyQDR9UDcnrSfTuDcf9opzszF5GS3m_2E4</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7143</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2015-09-29 15:40:54 -0600</bug_when>
    <thetext>With the updates to cime3 (planned for clm4_5_3_r131), these two ED runs now die while trying to read the params file:

SMS_Ld5.f10_f10.ICLM45ED.yellowstone_pgi.clm-edTest
SMS_Ld5.f19_g16.ICLM45ED.yellowstone_intel.clm-edTest

The deaths look like:

   1: Opened existing file
   1: /glade/p/cesmdata/cseg/inputdata/lnd/clm2/paramdata/clm_params_ed.c150317.nc
   1:           0
[then many instances of the following:]
   9: pio_support::pio_die:: myrank=          -1 : ERROR: pionfget_mod.F90:
   9:         426 : Input/Output data amount mismatch
  41:Image              PC                Routine            Line        Source
  41:cesm.exe           000000000144CC38  Unknown               Unknown  Unknown
  41:cesm.exe           0000000000D705D1  pio_support_mp_pi         120  pio_support.F90
  41:cesm.exe           0000000000D6E645  pio_utils_mp_chec          59  pio_utils.F90
  41:cesm.exe           0000000000E27DDD  pionfget_mod_mp_g         426  pionfget_mod.F90.in
  41:cesm.exe           00000000005A859D  ncdio_pio_mp_ncd_        1202  ncdio_pio.F90.in
  41:cesm.exe           0000000000AFBBB2  paramutilmod_mp_r          50  paramUtilMod.F90
  41:cesm.exe           00000000007BC556  edparamsmod_mp_ed         106  EDParamsMod.F90
  41:cesm.exe           00000000005CE868  readparamsmod_mp_          69  readParamsMod.F90
  41:cesm.exe           0000000000508628  clm_initializemod         355  clm_initializeMod.F90
  41:cesm.exe           00000000004F7DC8  lnd_comp_mct_mp_l         232  lnd_comp_mct.F90
  41:cesm.exe           00000000004262AB  component_mod_mp_         229  component_mod.F90
  41:cesm.exe           0000000000415D38  cesm_comp_mod_mp_        1086  cesm_comp_mod.F90
  41:cesm.exe           00000000004213ED  MAIN__                     92  cesm_driver.F90


I wonder if this is showing up for the first time now because one of the changes in the cime3 update was:

   NEW:         pio_typename = &apos;pnetcdf&apos;
   BASELINE:  pio_typename = &apos;netcdf&apos;

i.e., could the use of pnetcdf be revealing a problem that until now went unnoticed?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7144</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik@ucar.edu</who>
    <bug_when>2015-09-29 15:50:58 -0600</bug_when>
    <thetext>Bill, if you change it by hand for these cases to &quot;netcdf&quot; do the test cases work?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7145</commentid>
    <comment_count>2</comment_count>
    <who name="Mariana Vertenstein">mvertens@ucar.edu</who>
    <bug_when>2015-09-29 15:55:16 -0600</bug_when>
    <thetext>(In reply to Erik Kluzek from comment #1)
&gt; Bill, if you change it by hand for these cases to &quot;netcdf&quot; do the test cases
&gt; work?

That is a good question. Right now all yellowstone configuration (other than serial) are using pnetcdf rather than netcdf. So that might be an issue.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7149</commentid>
    <comment_count>3</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2015-09-30 04:42:02 -0600</bug_when>
    <thetext>This one dies the same way:

RUN SMS_Ld5.f10_f10.ICLM45ED.yellowstone_intel.clm-edTest</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7150</commentid>
    <comment_count>4</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2015-09-30 04:43:20 -0600</bug_when>
    <thetext>In response to Erik: I haven&apos;t had a chance to look into whether using netcdf fixes this problem. If it does, I&apos;m not sure what it means. Note that I suspect that this has a different underlying cause than bug 1730 (this is a problem in a read, rather than a write).</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2227</bug_id>
          
          <creation_ts>2015-10-04 14:41:13 -0600</creation_ts>
          <short_desc>rework or remove max_patch_per_col</short_desc>
          <delta_ts>2015-10-05 15:51:11 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.4.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>andre@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-z0YNKExLP5kQdrOVTzOnANRgnvuHpVqMxlPZLwctdjk</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7160</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2015-10-04 14:41:13 -0600</bug_when>
    <thetext>Currently in clm_varpar, we have:

    max_patch_per_col= max(numpft+1, numcft, maxpatch_urb)

This is used in loops in the code like this:

    do pi = 1,max_patch_per_col
       do j = 1,nlevsoi
          do fc = 1, num_hydrologyc
             c = filter_hydrologyc(fc)
             if (pi &lt;= col%npatches(c)) then

However: Using numcft in this &apos;max&apos; gives a significant overestimate of max_patch_per_col when use_crop is true. This should be reworked - or, better, removed from the code entirely (because it is a maintenance problem, and I can&apos;t imagine that looping idioms that use it help performance that much, and likely they hurt performance - at least when it is overestimated by so much.)

Loops like this could be reworked to avoid needing max_patch_per_col by either:

(1) Looping over patches, and finding the corresponding column with patch%col(p)

(2) Looping over columns, then looping from begp to endp in an inner loop. This would likely be less vectorization-friendly, but you save many unnecessary loop iterations, so it&apos;s probably not likely to hurt performance much, and may help it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7161</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2015-10-05 15:51:11 -0600</bug_when>
    <thetext>Ben (or was it Erik?) points out: in the calculation of max_patch_per_col, we could replace numcft with something like num_crop_patches_per_col, which would be 1 for a prognostic crop run.

I&apos;m going to defer this change until after we pass the crunch time for the upcoming science freeze.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2237</bug_id>
          
          <creation_ts>2015-10-31 05:15:52 -0600</creation_ts>
          <short_desc>dynamic root code divides by 0</short_desc>
          <delta_ts>2015-11-23 13:13:54 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.4.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>andre@ucar.edu</cc>
    
    <cc>dlawren@ucar.edu</cc>
    
    <cc>gbisht@lbl.gov</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-okRU8kZf4yGLvXk8gvQ3izu2Q6rlRz12t5fEmlT-Oxo</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7182</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2015-10-31 05:15:52 -0600</bug_when>
    <thetext>Runs that activate both use_dynroot and crop crash in the first time step if run in debug mode. This is due to a divide by 0 error in this line in CNRootDynMod:

                    root_depth(p) = max(zi(c,2), min(hui(p)/huigrain(p)* root_dmx(ivt(p)), root_dmx(ivt(p))))

huigrain(p) can sometimes be 0; in the one case I looked at, hui was also 0. Also, in the first timestep of a cold start, huigrain is NaN.

So this needs:

(1) initialization of huigrain in cold start so that it isn&apos;t NaN: it should probably be initialized to 0

(2) appropriate handling of the case when huigrain = 0</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7223</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik@ucar.edu</who>
    <bug_when>2015-11-18 14:29:31 -0700</bug_when>
    <thetext>The fix that Beth Drewniak gave us for this was to initialize huigrain to zero everywhere, and then...

Index: components/clm/src/biogeochem/CNRootDynMod.F90
===================================================================
--- components/clm/src/biogeochem/CNRootDynMod.F90	(.../branch_tags/fun20exp_tags/fun20exp_n08_fun2_0_n09clm4_5_6_r153)	(revision 75190)
+++ components/clm/src/biogeochem/CNRootDynMod.F90	(.../branches/fun20exp)	(revision 75190)
@@ -134,7 +134,9 @@
             c = pcolumn(p)
             if (ivt(p) /= noveg) then
                 if((ivt(p)) &gt;= npcropmin)then !skip generic crop types
-                    root_depth(p) = max(zi(c,2), min(hui(p)/huigrain(p)* root_dmx(ivt(p)), root_dmx(ivt(p))))
+                    if(huigrain(p) &gt; 0._r8)then
+                        root_depth(p) = max(zi(c,2), min(hui(p)/huigrain(p)* root_dmx(ivt(p)), root_dmx(ivt(p))))
+                    end if
                 else
                 ! this can be changed to any depth (i.e. the maximum soil depth)
                     root_depth(p) = zi(c,nlevsoi)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7224</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2015-11-18 14:52:50 -0700</bug_when>
    <thetext>Shouldn&apos;t there be an &apos;else&apos; clause here, so that root_depth gets set explicitly if huigrain(p) == 0? Or is the intention really that it remains at whatever value it was at in the previous time step?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7227</commentid>
    <comment_count>3</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2015-11-23 12:33:10 -0700</bug_when>
    <thetext>Gautam&apos;s suggestion to the &apos;else&apos;, approved by Beth, is:

How about adding root_depth(bounds%begp:bounds%endp) = 0._r8 on CNRootDynMod.F90#L111?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7228</commentid>
    <comment_count>4</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2015-11-23 12:35:28 -0700</bug_when>
    <thetext>Oops, I forgot to finish Gautam&apos;s suggestion:

Then, you can get rid of the &apos;else&apos; clause at line CNRootDynMod.F90#L130.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7229</commentid>
    <comment_count>5</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2015-11-23 12:39:27 -0700</bug_when>
    <thetext>However, in response to comment 3: Based on the performance impact we have seen for CNZero, I am coming to feel that we should avoid code like:

root_depth(bounds%begp:bounds%endp) = 0._r8

instead either (a) initializing this in the loop over the filter (i.e., setting root_depth(p) = 0._r8 before the conditionals), or (b) keeping / adding explicit &apos;else&apos; clauses to ensure it is set to something for any path through the conditionals.

This isn&apos;t a big deal for this particular change, but is something we should think about in general: As we have seen from CNZero, when you add up the total time we spend zeroing quantities, it amounts to a significant fraction of CLM run time.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7230</commentid>
    <comment_count>6</comment_count>
    <who name="Erik Kluzek">erik@ucar.edu</who>
    <bug_when>2015-11-23 13:13:54 -0700</bug_when>
    <thetext>The first part of this was completed in clm4_5_6_r155.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2240</bug_id>
          
          <creation_ts>2015-11-04 06:17:52 -0700</creation_ts>
          <short_desc>cannot use init_interp to interpolate clm45 initial conditions to clm50</short_desc>
          <delta_ts>2017-01-22 12:50:43 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.4.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>andre@ucar.edu</cc>
    
    <cc>dlawren@ucar.edu</cc>
    
    <cc>mvertens@ucar.edu</cc>
    
    <cc>oleson@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-5K7XU6WI1V87LMJOiOaPtQdHm2hQR0AIWhwXzgLFd5g</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7194</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2015-11-04 06:17:52 -0700</bug_when>
    <thetext>When trying to interpolate clm45 initial conditions to a clm50 case, init_interp dies because URBAN_AC is dimensioned by column in CLM45 and by landunit in CLM50.

I can see three possible solutions:

(1) Live with the fact that we cannot interpolate initial conditions files between CLM45 and CLM50 cases.

(2) Give URBAN_AC a different name on the restart file depending on whether it is at the column-level or landunit-level. In the future, something like this would probably be best: If fundamental changes are made to a restart variable, then its name should change to avoid breaking init_interp. We could do something like this retroactively, possibly combined with the feature I have added to allow listing multiple possible names for a restart variable.

(3) Change init_interp to make it skip a variable when the dimensions differ in the input and output, rather than aborting. This is probably the easiest solution in the short-term, but I worry a bit that this could make init_interp too permissive, doing the wrong thing (i.e., leaving values at their cold start values) when it should be aborting with an error.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7829</commentid>
    <comment_count>1</comment_count>
    <who name="Ben Andre">andre@ucar.edu</who>
    <bug_when>2017-01-22 11:54:31 -0700</bug_when>
    <thetext>Since clm is now runtime configurable, clm45 vs clm50 vs clmX.Y is kind of a vague distinction based on runtime flags. One could start with a clm5 compset, but flip a set of switches to generate an interp_init incompatible run. It is going to be increasingly important to handle this situation more gracefully going forward.

I propose solution (1.b): live with the fact that we can&apos;t interpolate from some simulations into others, but add consistency checks when we introduce incompatible changes. For the urban_ac example, we need to check dimensions and error out with a meaningful message if they differ. A meaningful message is something like:

&quot;ERROR running interp_init on VAR_XYZ. Dimensions in model are A, dimensions in initial conditions file are B. This indicates a significant change in science. Please chose a more appropriate initial conditions file or spinup from cold start.&quot;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7830</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-01-22 12:50:43 -0700</bug_when>
    <thetext>I&apos;m fine with your solution (1.b). Moving forward, I think we should be careful to avoid changing the meaning (dimensionality, etc.) of a variable on the restart file without giving it a different name, because this has caused a lot of unforeseen pain. For example, I have recently changed some variables from col-level to gridcell-level, and have renamed the restart variables by giving them a &apos;_g&apos; suffix to distinguish them from the old version.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2274</bug_id>
          
          <creation_ts>2016-01-26 20:25:09 -0700</creation_ts>
          <short_desc>landuse_timeseries_text_files may stomp on each other when making all surface datasets</short_desc>
          <delta_ts>2016-07-07 11:55:29 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.5.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>andre@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-t9gJ7WyJiCBJxoXqbnXucVDm_dqKRBQRqkHRaussomk</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7325</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2016-01-26 20:25:09 -0700</bug_when>
    <thetext>About a year ago, Ben made some changes to the file names in mksurfdata.pl so that multiple runs wouldn&apos;t stomp on each other. However, it looks like the $landuse_timeseries_text_file (set by write_transient_timeseries_file) could have the same file name in multiple runs. From a quick look, I&apos;m guessing that two files with identical names would have the same contents. If that&apos;s true, then this is only a problem if you get unlucky in terms of timing: one process is trying to read the file just as another is in the midst of rewriting it, so that the file is incomplete for the read.

The solution could be to add more qualifiers to the name of this file, so that it is unique - similarly to what is done for the other files. (I&apos;m reworking this code significantly in a branch that I&apos;m about to bring to the trunk.) It just isn&apos;t totally straightforward to do this, because of the existing logic for this file name.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2275</bug_id>
          
          <creation_ts>2016-01-27 15:07:02 -0700</creation_ts>
          <short_desc>better error checking needed for copying urban parameters in mksurfdata.pl</short_desc>
          <delta_ts>2016-01-27 15:07:02 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.5.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>andre@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-80E6xA-7QQsyl_NQsEhBMjS_XGSaRtSyW8jXNOPQ8oA</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7326</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2016-01-27 15:07:02 -0700</bug_when>
    <thetext>For this code in mksurfdata.pl (which was added based on bug 1681):

            #
            # If urban point, overwrite urban variables from previous surface dataset to this one
            #
            if ( $urb_pt &amp;&amp; ! $opts{&apos;no_surfdata&apos;} ) {
               my $prvsurfdata = `$scrdir/../../../bld/queryDefaultNamelist.pl $queryopts -var fsurdat`;
               if ( $? != 0 ) {
                  die &quot;ERROR:: previous surface dataset file NOT found\n&quot;;
               }
               chomp( $prvsurfdata );
               my $varlist = &quot;CANYON_HWR,EM_IMPROAD,EM_PERROAD,EM_ROOF,EM_WALL,HT_ROOF,THICK_ROOF,THICK_WALL,T_BUILDING_MAX,T_BUILDING_MIN,WIND_HGT_CANYON,WTLUNIT_ROOF,WTROAD_PERV,ALB_IMPROAD_DIR,ALB_IMPROAD_DIF,ALB_PERROAD_DIR,ALB_PERROAD_DIF,ALB_ROOF_DIR,ALB_ROOF_DIF,ALB_WALL_DIR,ALB_WALL_DIF,TK_ROOF,TK_WALL,TK_IMPROAD,CV_ROOF,CV_WALL,CV_IMPROAD,NLEV_IMPROAD,PCT_URBAN,URBAN_REGION_ID&quot;;
               print &quot;Overwrite urban parameters with previous surface dataset values\n&quot;;
               $cmd = &quot;ncks -A -v $varlist $prvsurfdata $fsurdat_fname&quot;;
               print &quot;$cmd\n&quot;;
               if ( ! $opts{&apos;debug&apos;} ) { system( $cmd ); }
            }

I discovered – the hard way – that there is no error checking on the ncks command. I had been iteratively making new surface datasets and updating the namelist_defaults, and apparently one time I ran this not all of the surface datasets in namelist_defaults actually existed in the inputdata space. So the ncks command failed.

The big problem here is that, when this fails (or even if the &apos;die&apos; near the start of this block is executed), the surface datasets are left there. So, unless you look carefully at the output of the mksurfdata.pl script, it looks like the surface datasets were created correctly, when in fact all of these urban fields are wrong.

So: I propose that, if either (a) the &apos;die&apos; in this block is executed, or (b) the ncks command fails, then the surface dataset should be removed – or maybe renamed to something like &quot;$fsurdat_fname.INCOMPLETE&quot;... in any case, something that will prevent it from being used accidentally.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2277</bug_id>
          
          <creation_ts>2016-01-28 09:54:11 -0700</creation_ts>
          <short_desc>water balance error in clm5 kitchen sink test when adding zbedrock to surface dataset</short_desc>
          <delta_ts>2016-07-07 07:23:29 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.5.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>andre@ucar.edu</cc>
    
    <cc>dlawren@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
    
    <cc>swensosc@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-Zj1-rVY7oN57lkPR5ufrwEvlKCVjZ4LHf6dCY-jSHQo</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7328</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2016-01-28 09:54:11 -0700</bug_when>
    <thetext>From https://svn-ccsm-models.cgd.ucar.edu/clm2/branch_tags/rework_fglcmask_tags/rework_fglcmask_n08_clm4_5_7_r164

this test dies with a water balance error:

ERS_Ly3.f10_f10.I1850CRUCLM50BGCCROP.yellowstone_intel.clm-clm50KSinkMOut

The full error message is below.

The relevant change on this branch is that it uses a new surface dataset, which includes zbedrock - so it triggers the new use_bedrock code. I have confirmed that the test passes if I point to a version of the new surface dataset that is identical except that zbedrock is removed.

  27: WARNING:  water balance error  nstep=         8393  local indexc=         3872 
  27:  errh2o=   2.401732114284960E-005
  27: clm model is stopping - error is greater than 1e-5 (mm)
  27: nstep                 =         8393
  27: errh2o                =   2.401732114284960E-005
  27: forc_rain             =   0.000000000000000E+000
  27: forc_snow             =   0.000000000000000E+000
  27: endwb                 =    6951.93139686015     
  27: begwb                 =    6951.98520312504     
  27: qflx_evap_tot         =   5.975657251271233E-003
  27: qflx_irrig            =   0.000000000000000E+000
  27: qflx_surf             =   0.000000000000000E+000
  27: qflx_h2osfc_surf      =   0.000000000000000E+000
  27: qflx_qrgwl            =   0.000000000000000E+000
  27: qflx_drain            =   4.785462495282254E-002
  27: qflx_drain_perched    =   0.000000000000000E+000
  27: qflx_flood            =   0.000000000000000E+000
  27: qflx_ice_runoff_snwcp =   0.000000000000000E+000
  27: qflx_ice_runoff_xs    =   0.000000000000000E+000
  27: qflx_glcice_melt      =   0.000000000000000E+000
  27: qflx_glcice_frz       =   0.000000000000000E+000
  27: clm model is stopping
  27: calling getglobalwrite with decomp_index=         3872  and clmlevel= column
  27: local  column   index =         3872
  27: global column   index =         3579
  27: global landunit index =         1038
  27: global gridcell index =          238
  27: gridcell longitude    =    15.0000000000000     
  27: gridcell latitude     =    70.0000000000000     
  27: column   type         =          215
  27: landunit type         =            2
  27: ENDRUN:
  27: ERROR in BalanceCheckMod.F90 at line 420</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7388</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2016-03-03 13:59:15 -0700</bug_when>
    <thetext>Sean Swenson says he ran a case that was identical to this but with use_dynroot off, and it ran to completion. So it seems likely that dyn roots are the problem here.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7586</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2016-07-07 07:23:29 -0600</bug_when>
    <thetext>Erik: This passes in my latest round of testing (for what will be clm4_5_9_r185). Should this bug be closed as fixed?</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2283</bug_id>
          
          <creation_ts>2016-02-16 13:38:10 -0700</creation_ts>
          <short_desc>dynamic landunits: handle methane with changing lake area</short_desc>
          <delta_ts>2016-07-07 11:56:44 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.5.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P5</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Bill Sacks">sacks@ucar.edu</assigned_to>
          <cc>erik@ucar.edu</cc>
    
    <cc>oleson@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-WQ6gqjDOmUsL5OvmY5FPX4js6wd43ecHlBQoaYW-iqc</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7346</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2016-02-16 13:38:10 -0700</bug_when>
    <thetext>The methane code (ch4Mod.F90) implicitly assumes that finundated is 1 for lakes. Thus, if lake area increases, the right thing to do is probably to immediately inundate any land it took over, with code similar to what happens right now when inundated area increases.

Decreases in lake area should be handled appropriately now, but increases in lake area are not. Currently, there is no way for lakes to increase in area, but this will need to be revisited once they can.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2284</bug_id>
          
          <creation_ts>2016-02-16 14:09:01 -0700</creation_ts>
          <short_desc>remove duplication in setting of history fields for carbon isotopes (c13 and c14)</short_desc>
          <delta_ts>2016-07-07 11:58:37 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.5.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-Rd5mxB2V_bzU2OMBnQWa8Lw8tbBQKMDuXBPb9FX2ZCM</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7347</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2016-02-16 14:09:01 -0700</bug_when>
    <thetext>There is a lot of near-duplicate code in the InitHistory subroutines of CNVegCarbonStateType.F90 and SoilBiogeochemCarbonStateType.F90 (and maybe elsewhere): Basically the same blocks of code are done for c12, c13 and c14. At a recent CLM-CMT meeting, we decided that this duplication should be removed. Steps to doing so are:

(1) Examine differences between the blocks for c12, c13, c14: confirm that the below steps capture all relevant differences

(2) For variables that currently have hist fields for c12, but not c13 / c14: determine if the exclusion for c13 &amp; c14 is intentional or accidental. (This step is the main thing stopping me from just going ahead and doing this now.)

(3) Introduce the following variables that differ for each instance:

- shortname_prefix: blank for c12, &apos;C13_&apos; or &apos;C14_&apos;

- longname_prefix: blank for c12, &apos;C13 &apos; or &apos;C14 &apos;

- units: &apos;gC&apos;, &apos;gC13&apos;, &apos;gC14&apos;

(4) Use the above variables where they are needed; e.g.:

 call hist_addfld1d (fname=shortname_prefix//&apos;LEAFC&apos;, ...)

(5) Introduce a variable default_for_non_isotope_fields (probably can come up with a better name). This is &apos;active&apos; for c12, &apos;inactive&apos; for c13 and c14. Then, for fields that are currently active by default for c12, but inactive by default for c13 or c14 (or weren&apos;t added at all for c13/c14), set: default=default_for_non_isotope_fields

(6) Check header of an h0 history file in a BGC case: should be the same as before</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7400</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2016-03-11 10:25:05 -0700</bug_when>
    <thetext>On a branch, I am adding a new class, tentatively called species_base_type (with extensions), for handling this. I&apos;m trying it out in the reworked WoodProducts code.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2288</bug_id>
          
          <creation_ts>2016-02-22 10:27:57 -0700</creation_ts>
          <short_desc>ch4 placement in driver will cause problems if BeTR is used for nitrogen</short_desc>
          <delta_ts>2016-02-22 10:27:57 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.5.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>andre@ucar.edu</cc>
    
    <cc>dlawren@ucar.edu</cc>
    
    <cc>gbisht@lbl.gov</cc>
    
    <cc>jinyuntang@lbl.gov</cc>
    
    <cc>oleson@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-milpC3wWBRnlkWcJCS5cJyqlcVdlFUg6YSZ_VB9cAE0</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7369</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2016-02-22 10:27:57 -0700</bug_when>
    <thetext>The fix for bug 2225 and bug 2287, brought to the trunk in clm4_5_8_r168 (which returns the call to ch4 to where it was in clm4_5_12 and earlier), will cause problems if BeTR is ever used for nitrogen.

Here is an email from Jinyun about this:

&gt;  Too bad that move caused the travel. My original intention was to make a
&gt;  consistent tracking of nitrogen leaching in betr with hydrology code with the
&gt;  active ch4 cycle. As it is now in tag 168, a serious inconsistency would arise
&gt;  if one use betr to track nitrogen cycle with active ch4 code. However, since
&gt;  there is no intent to do active bgc in betr, the flip back is OK. Yet, I do
&gt;  suspect this flip back will cause trouble down the road if people intend to
&gt;  use betr for carbon isotope transport, even though I personally will not do
&gt;  it. Therefore, my suggestion is either to separate the set value stuff for
&gt;  ch4, so it will not zero out methane flux or indicate in somewhere that
&gt;  caution against people to use betr for purpose other than water isotopes (this
&gt;  basically push the problem to the future, and someone has to implement the
&gt;  separation strategy again).

Without having a very good understanding of this, I agree that separating the set value stuff for ch4 seems like the best solution here. Once that is done, the change to the driver sequencing in clm4_5_8_r168 should be reverted.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2289</bug_id>
          
          <creation_ts>2016-02-26 10:49:37 -0700</creation_ts>
          <short_desc>default finidat_interp_dest file name should have instance number</short_desc>
          <delta_ts>2017-10-17 16:10:31 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.5.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P1</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>andre@ucar.edu</cc>
    
    <cc>fischer@ucar.edu</cc>
    
    <cc>jedwards@ucar.edu</cc>
    
    <cc>mvertens@ucar.edu</cc>
    
    <cc>raeder@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-zDhpNPKgQYNVlqbYaE6bDck375bb1fR2g0JlE5e5kfQ</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7377</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2016-02-26 10:49:37 -0700</bug_when>
    <thetext>Kevin Raeder pointed out that the default file name for finidat_interp_dest (&apos;finidat_interp_dest.nc&apos;) leads init_interp to stomp on itself when using use_init_interp with multi-instance. We should change the default to have the instance number in the file name.

In the meantime, the workaround is to explicitly specify finidat_interp_dest in each instance&apos;s user_nl_clm.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8059</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-06-05 21:07:40 -0600</bug_when>
    <thetext>One possible solution would be to give build-namelist knowledge of the instance index. 

This is similar to what&apos;s done for CISM - and specifically what I&apos;m working on right now to get multi-instance branch / hybrid runs to work right. For CISM, buildnml passes the inst_string to build-namelist as a command-line argument; then this inst_string can be used to construct file names. We could do something similar for CLM.

(Note that finidat_interp_dest is not currently invoked by CLM&apos;s build-namelist, so we just use the hard-coded default unless the user explicitly specifies it. The above solution would require putting finidat_interp_dest in the lnd_in file, which is probably a good thing anyway.)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8277</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-10-17 16:10:31 -0600</bug_when>
    <thetext>Changing this to P1 because I think it&apos;s important to resolve this for the release.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2322</bug_id>
          
          <creation_ts>2016-06-13 20:37:51 -0600</creation_ts>
          <short_desc>Add a test that ensures that setting all_active = .true. doesn&apos;t change answers for gridcell averages</short_desc>
          <delta_ts>2017-11-03 15:42:39 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.5.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Bill Sacks">sacks@ucar.edu</assigned_to>
          <cc>erik@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-b0vA6yoRfCDzGsl_sKlh5NRZHdvihhtytlnccsg-qho</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7551</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2016-06-13 20:37:51 -0600</bug_when>
    <thetext>Changing which 0-weight points are active should not change answers for gridcell averages. If this does change answers, it indicates a bug: values in 0-weight patches or columns should not affect the gridcell averages.

I have found two bugs by doing a manual test like this: bug 1851 and bug 2321. (See notes in bug 1851 for more detailed thoughts.)

We should add an automated test of this. Specifically, it could do two runs: one out-of-the-box and one with all_active = .true. (probably with finidat = &apos; &apos;, because it can be problematic to set all_active = .true. with an finidat file not set up for that situation - although maybe we could use an initial conditions file along with init_interp?) The gridcell-level history fields should be bit-for-bit identical in these two runs. We could do that with a mechanism similar to the current LII test. However, this will hopefully become more straightforward once https://github.com/CESM-Development/cime/issues/146 is resolved - hopefully making it relatively trivial to create one-off tests like this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8323</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-11-03 15:42:39 -0600</bug_when>
    <thetext>cime issue 146 and relevant follow-on issues have now been addressed, so it should be relatively easy to add a new test type like this.

In addition to doing a basic test, as suggested in the original comment, it could also be useful to include a transient test that has some columns (probably crop columns) going back and forth between non-zero-weight and zero-weight a few times (when they&apos;re non-zero-weight, they should stay that way for a few years to allow crops to actually grow). I think we&apos;d expect final gridcell-average results to be the same regardless of whether the crop column stayed active or went inactive when it had 0 weight. This could be done with a single-point test. The point of this would be to catch problems with columns/patches going from active to inactive to active, as in https://github.com/NCAR/CLM/issues/12. However, catching these problems may rely on having the transition from active to inactive happen in the middle of the growing season.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2329</bug_id>
          
          <creation_ts>2016-07-06 12:27:50 -0600</creation_ts>
          <short_desc>code for initializing some isotope carbon state variables looks wrong</short_desc>
          <delta_ts>2017-10-17 12:57:58 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.5.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>cdkoven@lbl.gov</cc>
    
    <cc>dlawren@ucar.edu</cc>
    
    <cc>oleson@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-zx2SxRwf8QyIInNO4MvdL1UPYX2crnVKIXgmZd7endE</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7576</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2016-07-06 12:27:50 -0600</bug_when>
    <thetext>I&apos;m not sure what this code in CNVegCarbonStateType.F90: InitCold is trying to accomplish, but it looks wrong to me:

    if ( .not. is_restart() .and. get_nstep() == 1 ) then

       do p = bounds%begp,bounds%endp
          if (pftcon%c3psn(patch%itype(p)) == 1._r8) then
             this%grainc_patch(p)            = c12_cnveg_carbonstate_inst%grainc_patch(p)         * c3_r2
             this%grainc_storage_patch(p)    = c12_cnveg_carbonstate_inst%grainc_storage_patch(p) * c3_r2
             this%grainc_xfer_patch(p)       = c12_cnveg_carbonstate_inst%grainc_xfer_patch(p)    * c3_r2
             this%dispvegc_patch(p)          = c12_cnveg_carbonstate_inst%dispvegc_patch(p)       * c3_r2
             this%storvegc_patch(p)          = c12_cnveg_carbonstate_inst%storvegc_patch(p)       * c3_r2
             this%totvegc_patch(p)           = c12_cnveg_carbonstate_inst%totvegc_patch(p)        * c3_r2
             this%totc_patch(p)              = c12_cnveg_carbonstate_inst%totc_patch(p)           * c3_r2
             this%woodc_patch(p)             = c12_cnveg_carbonstate_inst%woodc_patch(p)          * c3_r2
          else
             this%grainc_patch(p)            = c12_cnveg_carbonstate_inst%grainc_patch(p)         * c4_r2
             this%grainc_storage_patch(p)    = c12_cnveg_carbonstate_inst%grainc_storage_patch(p) * c4_r2
             this%grainc_xfer_patch(p)       = c12_cnveg_carbonstate_inst%grainc_xfer_patch(p)    * c4_r2
             this%dispvegc_patch(p)          = c12_cnveg_carbonstate_inst%dispvegc_patch(p)       * c4_r2
             this%storvegc_patch(p)          = c12_cnveg_carbonstate_inst%storvegc_patch(p)       * c4_r2
             this%totvegc_patch(p)           = c12_cnveg_carbonstate_inst%totvegc_patch(p)        * c4_r2
             this%totc_patch(p)              = c12_cnveg_carbonstate_inst%totc_patch(p)           * c4_r2
             this%woodc_patch(p)             = c12_cnveg_carbonstate_inst%woodc_patch(p)          * c4_r2
          end if
       end do
    end if

It looks like there should probably be a conditional on what the carbon type is of the given instance (i.e., are we operating on c13, c14 or bulk C here?). I believe that c12_cnveg_carbonstate_inst is only present if we&apos;re operating on c13 or c14. That raises the question of why this code even runs - since it looks like it&apos;s trying to operate on an absent argument for the bulk C case. I think the answer is that this block of code is never, ever executed: I&apos;m thinking that the surrounding conditional:

    if ( .not. is_restart() .and. get_nstep() == 1 ) then

is always false in initialization.

I haven&apos;t confirmed any of these suspicions....</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7841</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik@ucar.edu</who>
    <bug_when>2017-01-23 20:51:42 -0700</bug_when>
    <thetext>Bill is right this code is never exercised, since the surrounding condition will always be .false. It also wouldn&apos;t work right for C12 cases, since c12_cnveg_carbonstate_inst wouldn&apos;t be passed down. 

I looked into the history of this and the intention was to provide backward compatibility for restart files that don&apos;t have C13/C14 values (so when you go from use_c13/use_c14 .false. to a case where it&apos;s true. The bad code came in with clm4_5_1_r097.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8272</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-10-17 12:57:58 -0600</bug_when>
    <thetext>Erik, I wonder if this is related to the carbon isotope deaths that we&apos;ve been seeing recently?</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2377</bug_id>
          
          <creation_ts>2016-11-15 05:04:24 -0700</creation_ts>
          <short_desc>Change urban code to use downscaled atmospheric forcings</short_desc>
          <delta_ts>2016-11-15 05:09:32 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P4</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>oleson@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-JEk1DyGmBtBmOPlp07NLote6kmpLlyWFP96xsKWvEaU</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7750</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2016-11-15 05:04:24 -0700</bug_when>
    <thetext>Most of the code uses the downscaled, column-level atmospheric forcings where relevant. However, the urban code still uses the gridcell-level, non-downscaled forcings in some places (search for &apos;not_downscaled&apos; in the urban modules). This is simply because, when I was originally changing the code to use the downscaled forcings, it looked like it would be a fair amount of work to change the urban code to be fully consistent, so I punted on that.

This causes problems if you extend either the urban domain or the CISM domain so that the two overlap in any grid cells - i.e., if there are any active urban points in the CISM domain.

Once this is done, we can:

(1) Remove the check for column-gridcell equality in atm2lndMod: check_downscale_consistency

(2) Remove the code that I&apos;m about to add to glc2lndMod: update_glc2lnd_topo that prevents downscaling over urban points</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7751</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2016-11-15 05:09:32 -0700</bug_when>
    <thetext>To see what to change for the two &quot;once this is done&quot; points in my original report, look for comments like this that I&apos;m adding in the code:

BUG(wjs, 2016-11-15, bugz 2377)</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2385</bug_id>
          
          <creation_ts>2016-12-05 15:07:27 -0700</creation_ts>
          <short_desc>Possible changes for having create_crop_landunit always true</short_desc>
          <delta_ts>2016-12-05 15:07:27 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>andre@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-qt8hJP8iYKFajwJfXAt1mDe3Z_8sV_IupoUB1_S4LSg</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7765</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2016-12-05 15:07:27 -0700</bug_when>
    <thetext>Here are some notes from March 28, 2013, about what I thought would need to change once we were ready to set create_crop_landunit to true always. I&apos;m not sure how much here is still correct, relevant, or necessary. I can dig up my other notes that are referenced here if they would be helpful:


Once dynamic landunits are in place, we can always use create_crop_landunit=true. So far this hasn&apos;t been possible, because we need to maintain create_crop_landunit=false when doing transient landcover change (because otherwise changing crop area would imply changing landunit areas, which so far hasn&apos;t been allowed).

Here are some things that will need to be done to accomplish this:

• In mkpftMod: mkpftInit: Change setting of num_natpft &amp; num_cft in the case numpft == numstdpft
	- we will now ALWAYS have num_natpft = numstdpft - numstdcft, and num_cft = numpft - num_natpft. 
	- so we can get rid of the conditional that sets num_natpft and num_cft
	- see May 14, 2013 notes in Changing weights specification in surface dataset for diffs needed for this (mkpftMod.F90 changes under &quot;Making surface datasets for running with my new code&quot;)


	I&apos;m not sure if we&apos;re still allowing the use of raw datasets with just the 16 standard PFTs. I know we&apos;re allowing that for the transient pft dataset, but I&apos;m not sure about the static-in-time dataset. But it might be irrelevant... with the above change, we might be handling things the same in the code regardless of the number of PFTs on the dataset, at least with respect to the static-in-time datasets (see below for notes on the transient dataset)

• Need PCT_CROP to be time-varying on the pftdyn dataset. 

When transient pft info comes from a file with just the 17 pfts (as it currently does), this would be interpreted as: PFTs 0-14 treated as before. Assuming that PFT #16 is always 0%, then PCT_CFT can stay fixed in time (for surface datasets with generic crop: always 100% PFT #15; for surface datasets with specific crops: whatever is determined from the raw data file); PFT #15 will determine PCT_CROP through time.

To summarize: We&apos;ll have the following on the pftdyn dataset:
- PCT_NATVEG: no time dimension (essentially ignored for transient runs -- that&apos;s the whole point of my refactoring)
- PCT_CROP: varies in time
- PCT_PFT: varies in time
- PCT_CFT: no time dimension, at least for now

• Making sure transient pfts are handled right with respect to crops

- Make sure that the new formulation creates transient datasets correctly. 
	- In particular: it sounds like the transient raw dataset format won&apos;t change. So, I think we can interpret the % crop in the transient raw dataset to be the crop landunit area -- and then have the individual crop areas (as % of landunit) stay fixed (see also Surface dataset meeting 6-15-12)

NOTE: there may be conflicts between this bullet and notes in the previous bullet... need to figure out how exactly we should handle transient pfts now:
	- can we have the case where the static dataset has 24 pfts but transient has 16?
	- If so, confirm how this should be handled</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2388</bug_id>
          
          <creation_ts>2016-12-10 14:55:01 -0700</creation_ts>
          <short_desc>Answer changes in ICLM45ED hobart-nag tests with unrelated code changes</short_desc>
          <delta_ts>2016-12-10 14:55:01 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Ben Andre">andre@ucar.edu</assigned_to>
          <cc>erik@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-qN1_JxZRqpm4dF_D8UZIkDsZDjdDhlEOyO36aEMlui8</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7773</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2016-12-10 14:55:01 -0700</bug_when>
    <thetext>Both in comparing r207 with r206 and r208 with r207, we are seeing answer changes in these tests:

 FAIL ERS_D_Ld5.f10_f10.ICLM45ED.hobart_nag.clm-edTest BASELINE
 FAIL SMS_D_Ld5.f10_f10.ICLM45ED.hobart_nag.clm-edTest BASELINE

The only difference in the out-of-the-box history fields is NBP; from adding more fields, I see that this is caused by a difference in fire_c_to_atm.

All other ED tests – including very similar tests on yellowstone – pass the baseline comparisons.

This isn&apos;t a basic reproducibility problem: I get bit-for-bit answers when comparing a fresh checkout of r207 with the r207 baselines. Rather, it seems like changes in unrelated parts of the code are somehow affecting this fire variable in ED, just with the nag compiler.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2392</bug_id>
          
          <creation_ts>2016-12-21 09:21:21 -0700</creation_ts>
          <short_desc>I think the fire code won&apos;t work right when CNDV is used along with transient crop areas</short_desc>
          <delta_ts>2016-12-21 09:21:21 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>dlawren@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-6YRVKUdUgiTYk8zXwqBExNLcan6mirbY5JlDua_HJrc</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7780</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2016-12-21 09:21:21 -0700</bug_when>
    <thetext>Fang Li&apos;s fire code (CNFireXXX) has code to handle deforestation-related fires. I think these are meant to be associated with human-induced land cover change. When the fire code was first written, I believe CLM only allowed one of transient PFTs or CNDV to be active at a given time. However, moving forward we want to allow CNDV at the same time as prescribed transient crop areas. We currently pass the full area changes from all sources to the fire code. This means that (e.g.) if there is a decrease in tropical forest area due to prescribed land cover change, and a further decrease from CNDV, the fire code will see the total decrease and base deforestation-related fires on this total decrease. I *think* what we really want is for the fire code to just see the decrease from prescribed land cover change, since this represents human-induced deforestation.

There is a similar problem in theory from changes in glacier area: decreases in forest area due to expanding glaciers are seen the same way as human-induced land cover change by the fire code. However, in practice, we don&apos;t expect glacier expansion to occur in regions of tropical forests. But this same issue could also arise from future, internally-generated land cover change, such as the expansion of lakes / wetlands in inundated areas.

Off-hand, I can see two solutions to this problem:

(1) Separately track land cover change (dwt) from human sources. This would include changes in areas generated in dynpft_interp and dyncrop_interp, but not from other sources. This is a bit tricky because of these multiple streams of human-induced land cover change, and the fact that it can manifest as changes in pft%wtcol and/or col%wtgcell. I imagine this would be doable, but at the cost of some additional code complexity.

(2) Rather than trying to deduce the human induced land cover change from the various sources of land cover change in the model, instead have an explicit field specifying the rate of human-induced deforestation on the surface dataset and landuse_timeseries file - or specified as a stream. This would be a straightforward approach, though we&apos;d probably want to construct this field to be consistent with the actual land cover change in the model - and for that reason, may want it on the landuse_timeseries file rather than as a separate stream. One advantage of this approach is that it would provide a mechanism to specify rates of land cover change in a year-2000 run (i.e., a present day run, which has no land cover change). Another advantage is that gross transitions (rather than just net transitions) could be included in this field. (Note that if we wanted to go down this path, then it could make sense to specify a deforestation rate more generally in the code for a year-2000 run - i.e., used in other parts of the code than just the fire code.)</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2404</bug_id>
          
          <creation_ts>2017-01-16 10:21:20 -0700</creation_ts>
          <short_desc>Build-namelist calculation of CLM dtime assumes NCPL_BASE_PERIOD=ndays</short_desc>
          <delta_ts>2017-01-17 17:38:46 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>lipscomb@lanl.gov</cc>
    
    <cc>mvertens@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-o6sYhjm57meKMsSf9U_naTE0BpbpluIqIXokk2ipQlk</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7807</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-01-16 10:21:20 -0700</bug_when>
    <thetext>From Bill Lipscomb:

In file …/clm/bld/CLMBuildNamelist.pm, l. 1917, the base period is hardwired to 3600 * 24.  This means (if I understand correctly how dtime is computed) that if LND_NCPL is set to a large value (consistent with sub-daily atm coupling), I get a much shorter CLM time step than I want.

--

I agree with his assessment. Mariana is putting in a fix for a similar problem for mosart and rtm, but these are using some new shared python code. A similar fix is needed in CLM&apos;s perl-based build-namelist. It amounts to about 10 lines of code that need to be added to determine the basedt based on NCPL_BASE_PERIOD (I just don&apos;t remember what those 10 lines of code look like).

This is unlikely to affect users much: Bill Lipscomb was doing something unusual by changing NCPL_BASE_PERIOD. However, my understanding is that this will bite anyone who does change NCPL_BASE_PERIOD.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7809</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik@ucar.edu</who>
    <bug_when>2017-01-17 17:38:46 -0700</bug_when>
    <thetext>This will be fixed after the science freeze.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2405</bug_id>
          
          <creation_ts>2017-01-17 19:35:14 -0700</creation_ts>
          <short_desc>In init_interp: If a given type cannot be found: Consider using something other than bare ground</short_desc>
          <delta_ts>2017-01-19 13:20:12 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>Future</target_milestone>
          <dependson>2410</dependson>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>andre@ucar.edu</cc>
    
    <cc>dlawren@ucar.edu</cc>
    
    <cc>oleson@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-c6JGjS65n4e2KAzdOlFMehbZmqZZ2nONFECIauxbYDU</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7810</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-01-17 19:35:14 -0700</bug_when>
    <thetext>In init_interp: Currently, if there is a type (patch or col type) in your new run that was not present in the &quot;template&quot; run, init_interp will use the closest bare ground patch as a template. This most likely occurs when you interpolate from a non-crop run to a crop run, or a crop-without-irrigation run to a crop-with-irrigation run. But in principle, it could occur in other circumstances, too.

This has sometimes caused problems, such as the recent problem where new crop types were given the rootfr of bare ground - which was 0 for all levels. We have fixed these problems as we have discovered them, but it&apos;s possible there are other problems lurking now, or that may be added later.

At today&apos;s CLM-CMT meeting, we discussed possibly wanting to change this behavior so that, rather than using the bare ground patch as a template in these cases, it uses some vegetated patch. It&apos;s not clear what the rules should look like for how to choose the appropriate vegetated patch; this requires more thought.

This could become more important if/when each PFT is put on its own column: In this case, taking column-level values from the bare ground patch would give you very-non-spun-up C &amp; N pools, for example.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7821</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik@ucar.edu</who>
    <bug_when>2017-01-19 10:37:48 -0700</bug_when>
    <thetext>In bug 2410 I present a suggested solution for how this would work by adding an optional flag to restartvar &quot;ifmissingfrompft&quot; that would give the PFT index to use when interpolating (defaults to 0 bare-soil).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7825</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-01-19 13:20:12 -0700</bug_when>
    <thetext>The idea presented in bug 2410 won&apos;t work. I think we&apos;d need something like that that is NOT tied to individual restart variables, but rather is some field that applies to all variables.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2415</bug_id>
          
          <creation_ts>2017-01-26 09:44:05 -0700</creation_ts>
          <short_desc>Balance check doesn&apos;t check for possible errors in all points</short_desc>
          <delta_ts>2017-01-26 09:44:05 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>dlawren@ucar.edu</cc>
    
    <cc>l.vankampenhout@uu.nl</cc>
    
    <cc>oleson@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-f-s-bYw-iiSyCVp9MWFgnIFH4g3AlaQAxasNJSB85iM</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7843</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-01-26 09:44:05 -0700</bug_when>
    <thetext>Leo pointed this out, and I agree with his assessment:

I noticed that the following code from BalanceCheckMod does not check on the maximum error over all columns, merely checks the last column found. 
So there is a possibility that the abort is not triggered when it should have been. 


       ! Soil energy balance check

       found = .false.
       do c = bounds%begc,bounds%endc
          if (col%active(c)) then
             if (abs(errsoi_col(c)) &gt; 1.0e-6_r8 ) then
                found = .true.
                indexc = c
             end if
          end if
       end do
       if ( found ) then
          write(iulog,*)&apos;WARNING: BalanceCheck: soil balance error (W/m2)&apos;
          write(iulog,*)&apos;nstep         = &apos;,nstep
          write(iulog,*)&apos;errsoi_col    = &apos;,errsoi_col(indexc)
          if (abs(errsoi_col(indexc)) &gt; 1.e-4_r8 .and. (nstep &gt; 2) ) then
             write(iulog,*)&apos;clm model is stopping&apos;
             call endrun(decomp_index=indexc, clmlevel=namec, msg=errmsg(sourcefile, __LINE__))
          end if
       end if



We should change this code (and other code in BalanceCheck mod if there is other code that follows this pattern) to check for the maximum error across all points.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2416</bug_id>
          
          <creation_ts>2017-01-26 14:22:25 -0700</creation_ts>
          <short_desc>TruncateCandNStates should abort if just one of C or N is near-zero</short_desc>
          <delta_ts>2017-01-26 16:46:50 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>andre@ucar.edu</cc>
    
    <cc>dlawren@ucar.edu</cc>
    
    <cc>oleson@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-HHgiB7Dt6ZNADPI272D5UDZz2Tjx6rQWCKdyUZlmu3A</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7844</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-01-26 14:22:25 -0700</bug_when>
    <thetext>In CNPrecisionControlMod: TruncateCandNStates: Currently, if either C or N is near-zero, then both are set to 0. This can cause errors to be swept under the rug, when C &amp; N are in inconsistent states.

We agreed in yesterday&apos;s clm-cmt meeting that the behavior should be changed so that: If C is within roundoff of zero but N is substantially bigger than 0, then we should abort with an error message - and vice versa.

The main choice to make is how to define &quot;substantially bigger than 0&quot;.

I said I&apos;d take this on, but my plate is overflowing, so I&apos;m filing this as something to come back to.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7845</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-01-26 14:23:00 -0700</bug_when>
    <thetext>Once we make this change, we should run many years of a crop simulation to make sure this error isn&apos;t triggered... if it is, we need to determine why.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7846</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-01-26 16:46:50 -0700</bug_when>
    <thetext>From Rosie:

On the TruncateCandNStates business, I know that Keith had experimented with many different configurations for that, mostly to do with trying to avoid getting silly-high C:N ratios, and thus getting into strange feedback loops as a result.  So, I guess I wanted to add a word of caution that that piece of code and how it affects the wider model is extremely fragile. We had suspected that some fraction of the strange behaviour might be related to the shifting crop allometries, etc. so maybe a more crop-centric look at it would help, but I&apos;d proceed with extreme caution!</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2423</bug_id>
          
          <creation_ts>2017-02-13 14:35:32 -0700</creation_ts>
          <short_desc>ncd_io should abort if variable not read, unless caller requests otherwise</short_desc>
          <delta_ts>2017-02-13 14:35:43 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>andre@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-deY-39RTm2vYirtZYw07Wwzq-FRKbmufG7XXGKePgmo</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7860</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-02-13 14:35:32 -0700</bug_when>
    <thetext>Motivated by bug 2422:

It seems fragile that ncd_io - as well as the restartvar routine that&apos;s built on top of it - returns a readvar flag that the caller is expected to check. Typically, I&apos;d think that we want to abort if trying to read a variable if it isn&apos;t found, so this should be the default behavior.

Callers could then indicate that they want to continue despite the variable not being found, e.g., by:

(1) Providing an optional argument, allow_not_found - if present and true, then it&apos;s okay if the variable isn&apos;t found; this is indicated by the readvar argument

OR

(2) Making readvar an optional argument. If it&apos;s absent (which would be the typical case), then abort if the variable isn&apos;t found. If it&apos;s present, then use the current behavior of setting readvar rather than aborting if the variable isn&apos;t found.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2427</bug_id>
          
          <creation_ts>2017-02-23 12:13:23 -0700</creation_ts>
          <short_desc>Change SHR_ASSERT calls to avoid using errMsg</short_desc>
          <delta_ts>2017-02-23 12:13:51 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Bill Sacks">sacks@ucar.edu</assigned_to>
          <cc>andre@ucar.edu</cc>
    
    <cc>erik@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-X5lHTFAVkZDQlVnAL_mxOZdY5lwwfjKEZYokXqdfAvU</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7874</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-02-23 12:13:23 -0700</bug_when>
    <thetext>I have just made a cime PR that allows you to pass file and line information directly to SHR_ASSERT. This avoids the ridiculously large overhead of the shr_log_errMsg call.

https://github.com/ESMCI/cime/pull/1183

Once this version of cime comes into CLM, we should rework the SHR_ASSERT calls to use this new interface rather than using errMsg.

I have started a branch for this here:

https://svn-ccsm-models.cgd.ucar.edu/clm2/branches/assert_file_line

where I have just changed one file for testing purposes.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7875</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-02-23 12:13:51 -0700</bug_when>
    <thetext>This change will significantly speed up CLM in debug mode, but should have little or no impact in production mode.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2438</bug_id>
          
          <creation_ts>2017-03-31 15:00:36 -0600</creation_ts>
          <short_desc>Introduce xml variable controlling reseeding and snow resetting</short_desc>
          <delta_ts>2017-03-31 15:00:36 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-RBO0kHzH2NAbshGBwczLQx0FZWpk3GOSgHnaAiM46W8</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7914</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-03-31 15:00:36 -0600</bug_when>
    <thetext>We&apos;d like to have a single xml variable (proposed name RESET_SNOW_N_SEEDS_CLM_FOR_COUPLED_RUN) that controls both:

(1) whether to do reseeding

(2) whether to reset snow (reset_snow - new namelist variabl)

since those are typically done at the same time.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2461</bug_id>
          
          <creation_ts>2017-05-13 20:16:15 -0600</creation_ts>
          <short_desc>Multi-instance tests failing sporadically</short_desc>
          <delta_ts>2017-06-13 11:40:13 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>andre@ucar.edu</cc>
    
    <cc>fischer@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-i80GldX9ZBpY7fL6s11_1YGzcLBhD1acKLXLYSymnFc</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8020</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-05-13 20:16:15 -0600</bug_when>
    <thetext>In the last few CLM tags, we have found that multi-instance tests fail sporadically.

This includes

NCK_Ld1.f10_f10.ICRUCLM45.cheyenne_intel.clm-default
ERI_N2_Ld9.f19_g16.ICRUCLM45BGCCROP.cheyenne_intel

and sometimes their yellowstone versions (according to Ben).

I wonder if this is due to bug 2289.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8073</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik@ucar.edu</who>
    <bug_when>2017-06-13 11:40:13 -0600</bug_when>
    <thetext>Chris Fisher is seeing problems here as well...

Hi Erik,

We have a multi-instance test on cheyenne that has always been failing.  I&apos;m finally taking a closer look at it now.
The test is NCK_Ld1.f10_f10.ICRUCLM45.cheyenne_intel.clm-default and it passes on yellowstone.  If you don&apos;t know,
the NCK test runs a single instance case, the reruns with two instance cases, and compares to the single instance case.
I&apos;m getting answer changes in the first instance, but the second instance is bfb.  If I change the processor layout on the 
cheyenne test to match the layout on yellowstone, I can get the test to pass.

I&apos;ve traced the answer changes to Sl_t, Sl_snowh and Fall_lwup at time step zero.  So I think something is going on during
the initialization for Sl_t (lnd2atm_inst%t_rad_grc), Sl_snowh (lnd2atm_inst%h2osno_grc), and  Fall_lwup(lnd2atm_inst%eflx_lwrad_out_grc)
that&apos;s sensitive to the number of mpi tasks.  Do you have any more of idea what&apos;s going on?

Thanks</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2475</bug_id>
          
          <creation_ts>2017-06-13 20:46:37 -0600</creation_ts>
          <short_desc>Should SSP test set HIST_OPTION, HIST_N and some other variables?</short_desc>
          <delta_ts>2017-06-13 20:47:00 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>andre@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-dEBrE2KgcTOT66nFEYM06eC7OZYeja1pm6s7Mb_A9zM</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8076</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-06-13 20:46:37 -0600</bug_when>
    <thetext>In moving the SSP test into CLM, I noticed that it doesn&apos;t set HIST_OPTION or HIST_N. All other system tests set these in order to produce and compare cpl hist files. Is this omission intentional, or should this be made consistent with the other tests in this respect?

Other common options missing from SSP are:

    &lt;CONTINUE_RUN&gt;FALSE&lt;/CONTINUE_RUN&gt;

(not really needed since that&apos;s the default, but could be added to be consistent with other tests)

    &lt;REST_OPTION&gt;none&lt;/REST_OPTION&gt;

I&apos;m not clear on whether this last one is wanted for SSP.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8077</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-06-13 20:47:00 -0600</bug_when>
    <thetext>By the way: Once I bring my cime-update branch to the trunk, these can be set in components/clm/cime_config/config_tests.xml</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2483</bug_id>
          
          <creation_ts>2017-07-03 14:04:11 -0600</creation_ts>
          <short_desc>Improve procedure for creating new initial conditions files for LII tests</short_desc>
          <delta_ts>2017-07-06 14:26:02 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>andre@ucar.edu</cc>
    
    <cc>erik@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-BEFXfEcrqAxaqpsdn7jZPA_xK5oKKV5UYB7Re_mKGtc</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8099</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-07-03 14:04:11 -0600</bug_when>
    <thetext>Currently, to produce new initial conditions files for LII tests (when the old file becomes incompatible with the new model configuration), we run a case with use_init_interp = .true. and take the finidat_interp_dest.nc file to produce the new initial conditions file. This feels a bit risky to me: It feels like there could be cases where the LII test will pass with a file created in this way, but would fail with an initial conditions file that was generated from a multi-year spinup and was not run through init_interp.

One example I can think of is: If a variable mistakenly has interp_flag=&apos;skip&apos;, then its value on finidat_interp_dest.nc would be its cold start value. Then a future LII test would fail to catch that it had interp_flag=&apos;skip&apos;, because the value would be the cold start value in both cases of the LII test. (I&apos;m not super-concerned about this, because the LII test would presumably have been failing before the recreation of initial conditions in this scenario.)

So it feels like we should come up with a procedure for recreating LII initial conditions that gives us files that have been through at least a few years of spinup, rather than using the finidat_interp_dest files for this purpose.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2485</bug_id>
          
          <creation_ts>2017-07-05 18:41:28 -0600</creation_ts>
          <short_desc>CLM&apos;s &apos;ed&apos; testlist still has old-style compsets</short_desc>
          <delta_ts>2017-07-05 18:41:28 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>andre@ucar.edu</cc>
    
    <cc>erik@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-DSMi1V87XNEUIEELe2yimmsZ84S2Tc4mGfqV_6aNig0</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8105</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-07-05 18:41:28 -0600</bug_when>
    <thetext>On CLM&apos;s compsetchanges branch, we have updated most test lists to use the new compset names. However, the &apos;ed&apos; testlist still mostly has old-style compsets. This should either be changed or this testlist should be deleted.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2486</bug_id>
          
          <creation_ts>2017-07-06 08:53:43 -0600</creation_ts>
          <short_desc>Failure in camdenNJ test in prebeta test list</short_desc>
          <delta_ts>2017-10-03 09:45:59 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>andre@ucar.edu</cc>
    
    <cc>fischer@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-sHfFtU2iz0RrgRJLTDuYFJdfvrfhLAB73UBe6l-Mx3c</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8106</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-07-06 08:53:43 -0600</bug_when>
    <thetext>This test fails:

ERI_D_Ld9.1x1_camdenNJ.I2000Clm50BgcCru.cheyenne_intel.clm-default

with the following traceback:

0: NetCDF: Invalid dimension ID or name
0:Image              PC                Routine            Line        Source
0:cesm.exe           0000000004902E6D  Unknown               Unknown  Unknown
0:cesm.exe           0000000004342276  pio_support_mp_pi         120  pio_support.F90
0:cesm.exe           0000000004340A2C  pio_utils_mp_chec          74  pio_utils.F90
0:cesm.exe           000000000430CE8E  nf_mod_mp_pio_inq        1288  nf_mod.F90
0:cesm.exe           0000000000C1F93F  ncdio_pio_mp_chec         360  ncdio_pio.F90.in
0:cesm.exe           0000000000D755E1  surfrdmod_mp_surf         535  surfrdMod.F90
0:cesm.exe           0000000000D71E52  surfrdmod_mp_surf         414  surfrdMod.F90
0:cesm.exe           00000000008AD2BF  clm_initializemod         181  clm_initializeMod.F90
0:cesm.exe           00000000008432A9  lnd_comp_mct_mp_l         198  lnd_comp_mct.F90
0:cesm.exe           000000000045B981  component_mod_mp_         227  component_mod.F90
0:cesm.exe           0000000000426B62  cesm_comp_mod_mp_        1179  cesm_comp_mod.F90
0:cesm.exe           000000000045282C  MAIN__                     63  cesm_driver.F90

This is in the prebeta test list. We don&apos;t have any 1x1_camdenNJ tests in the aux_clm test list. I&apos;m not sure whether we want to get this working (and add it to the aux_clm test list) or just drop support for camdenNJ.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8107</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-07-06 08:58:27 -0600</bug_when>
    <thetext>(This is on CLM&apos;s compsetchanges branch, which is about to come to the trunk.)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8112</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-07-06 13:06:12 -0600</bug_when>
    <thetext>I see that we were also missing a camdenNJ test in the aux_clm45 test suite prior to the compsetchanges branch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8251</commentid>
    <comment_count>3</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-10-03 09:45:59 -0600</bug_when>
    <thetext>With recent versions of cime, this fails with

      ERROR: Need to provide valid mapping file between glc and lnd in xml variable glc2lnd_smapname 

This points out another problem with this test: This single-point case should be using a compset with SGLC, not CISM.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2488</bug_id>
          
          <creation_ts>2017-07-06 13:16:08 -0600</creation_ts>
          <short_desc>Floating overflow in SoilBiogeochemNitrifDenitrifMod.F90</short_desc>
          <delta_ts>2017-09-14 13:57:09 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>andre@ucar.edu</cc>
    
    <cc>cdkoven@lbl.gov</cc>
    
    <cc>dlawren@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-P6sFsBnZ1ckm0QBmxIhxlDAlMjEX3OYT4FxPLHidzUM</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8114</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-07-06 13:16:08 -0600</bug_when>
    <thetext>On the compsetchanges branch (soon to be clm4_5_16_r249), the following tests are failing:

SMS_Ld5_D_P24x1.f10_f10_musgs.IHistClm50Bgc.hobart_nag.clm-decStart
ERP_D_P24x1.f10_f10_musgs.IHistClm50Bgc.hobart_nag.clm-decStart
ERP_D.f10_f10_musgs.IHistClm50Bgc.yellowstone_gnu.clm-decStart

The two hobart_nag tests point to line 443 of SoilBiogeochemNitrifDenitrifMod.F90. The last one dies in the same module; no line numbers are available, but my guess is that it&apos;s the same problem.

This death occurs in this block of code:

            if ( soil_co2_prod(c,j) &gt; 0 ) then
               ratio_no3_co2(c,j) = smin_no3_massdens_vr(c,j) / soil_co2_prod(c,j)
            else
               ! fucntion saturates at large no3/co2 ratios, so set as some nominally large number
               ratio_no3_co2(c,j) = 100._r8
            endif

where line 443 is:

               ratio_no3_co2(c,j) = smin_no3_massdens_vr(c,j) / soil_co2_prod(c,j)

Probably the conditional needs to be changed so that if soil_co2_prod is *close* to 0, some alternative is used, but this needs some scientific input.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8121</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik@ucar.edu</who>
    <bug_when>2017-07-07 15:38:10 -0600</bug_when>
    <thetext>I looked into the case on yellowstone with gnu in the ddt debugger, and soil_co2_prod(c,j) is order 1.e-317, so extremely small, while smin_no3_massdens_vr(c,j) was order 1.e-3.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8208</commentid>
    <comment_count>2</comment_count>
    <who name="Erik Kluzek">erik@ucar.edu</who>
    <bug_when>2017-09-14 13:57:09 -0600</bug_when>
    <thetext>Here&apos;s the fix I have on a branch that I&apos;ll bring to the trunk...

Index: soilbiogeochem/SoilBiogeochemNitrifDenitrifMod.F90
===================================================================
--- soilbiogeochem/SoilBiogeochemNitrifDenitrifMod.F90	(revision 86613)
+++ soilbiogeochem/SoilBiogeochemNitrifDenitrifMod.F90	(working copy)
@@ -439,7 +439,7 @@
             ratio_k1(c,j) = max(1.7_r8, 38.4_r8 - 350._r8 * diffus(c,j))
 
             ! ratio function (figure 7c)
-            if ( soil_co2_prod(c,j) &gt; 0 ) then
+            if ( soil_co2_prod(c,j) &gt; 1.0e-9_r8 ) then
                ratio_no3_co2(c,j) = smin_no3_massdens_vr(c,j) / soil_co2_prod(c,j)
             else
                ! fucntion saturates at large no3/co2 ratios, so set as some nominally large number</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2489</bug_id>
          
          <creation_ts>2017-07-06 13:21:37 -0600</creation_ts>
          <short_desc>Clm45BgcCrop case dies due to negative leafn</short_desc>
          <delta_ts>2017-10-25 07:46:59 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>REOPENED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P2</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>andre@ucar.edu</cc>
    
    <cc>dlawren@ucar.edu</cc>
    
    <cc>dll@ucar.edu</cc>
    
    <cc>oleson@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion>clm4_5_16_r255</cf_fixedinversion>

      
          <token>1513387204-LtcG70bpcoVPA1W09L9qlBiGUCKG71aWTvH8d9KvSqc</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8115</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-07-06 13:21:37 -0600</bug_when>
    <thetext>In the compsetchanges branch (soon to be clm4_5_16_r249), this test is dying:

ERP_D.f10_f10_musgs.IHistClm50Bgc.yellowstone_gnu.clm-decStart

with message:

28: ERROR: Carbon or Nitrogen patch negative =    30.5688132018826
28:  -6.01119011968369
28: ERROR: limits =   -60.0000000000000       -6.00000000000000
28: ENDRUN:
28: ERROR: carbon or nitrogen state critically negative ERROR in CNPrecisionControl
28: Mod.F90 at line 207

This is from this call:

      ! leaf C and N
      call TruncateCandNStates( bounds, filter_soilp, num_soilp, cs%leafc_patch(bounds%begp:bounds%endp), &amp;
                                ns%leafn_patch(bounds%begp:bounds%endp), &amp;
                                pc(bounds%begp:), pn(bounds%begp:), __LINE__, &amp;
                                c13=c13cs%leafc_patch, c14=c14cs%leafc_patch, &amp;
                                pc13=pc13(bounds%begp:), pc14=pc14(bounds%begp:) )

which I&apos;m pretty sure means that the problem is in leafn_patch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8116</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-07-06 13:26:36 -0600</bug_when>
    <thetext>Oops, I copied the wrong test name. The failure is actually in:

ERS_Ly5_P72x1.f10_f10_musgs.IHistClm45BgcCrop.cheyenne_intel.clm-cropMonthOutput</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8117</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-07-06 13:28:13 -0600</bug_when>
    <thetext>This test was newly added in this branch, in order to maintain a long production test of CLM45 in the test list.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8200</commentid>
    <comment_count>3</comment_count>
    <who name="Erik Kluzek">erik@ucar.edu</who>
    <bug_when>2017-09-08 15:23:53 -0600</bug_when>
    <thetext>Danica and Keith found they needed to do the following to get simulations to run:

 It sets the cnegcrit to -600 and nnegcrit to -60

That&apos;s much larger than we are comfortable with. But, this has been how the model has worked for some time, we just didn&apos;t notice it as we didn&apos;t check for negative values for C and N variables.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8219</commentid>
    <comment_count>4</comment_count>
    <who name="Erik Kluzek">erik@ucar.edu</who>
    <bug_when>2017-09-19 10:53:26 -0600</bug_when>
    <thetext>Fixed in clm4_5_16_r255</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8295</commentid>
    <comment_count>5</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-10-25 07:45:58 -0600</bug_when>
    <thetext>This test is still failing in my branch off of r260, seemingly for the same reason: the death is from this call:

      call TruncateCandNStates( bounds, filter_soilp, num_soilp, cs%leafc_patch(bounds%begp:bounds%endp), &amp;
                                ns%leafn_patch(bounds%begp:bounds%endp), &amp;
                                pc(bounds%begp:), pn(bounds%begp:), __LINE__, &amp;
                                c13=c13cs%leafc_patch, c14=c14cs%leafc_patch, &amp;
                                pc13=pc13(bounds%begp:), pc14=pc14(bounds%begp:) )</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8296</commentid>
    <comment_count>6</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-10-25 07:46:59 -0600</bug_when>
    <thetext>It looks like the proposed changes didn&apos;t make it into the code:

  real(r8), public :: ccrit    =  1.e-8_r8              ! critical carbon state value for truncation (gC/m2)
  real(r8), public :: cnegcrit = -6.e+1_r8              ! critical negative carbon state value for abort (gC/m2)
  real(r8), public :: ncrit    =  1.e-8_r8              ! critical nitrogen state value for truncation (gN/m2)
  real(r8), public :: nnegcrit = -6.e+0_r8              ! critical negative nitrogen state value for abort (gN/m2)</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2496</bug_id>
          
          <creation_ts>2017-07-26 06:34:15 -0600</creation_ts>
          <short_desc>Logic for initializing C isotopes and maybe other variables incorrect when using init_interp</short_desc>
          <delta_ts>2017-07-26 06:34:15 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Ben Andre">andre@ucar.edu</assigned_to>
          <cc>cdkoven@lbl.gov</cc>
    
    <cc>dlawren@ucar.edu</cc>
    
    <cc>erik@ucar.edu</cc>
    
    <cc>mvertens@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-6NvjizUu0drHqX8NU8Dk1yqS5-XKPYnEDeFAp8q-ulw</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8159</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-07-26 06:34:15 -0600</bug_when>
    <thetext>Ben pointed this problem out with respect to water isotopes, but I realized that the same problem occurs in existing code for carbon isotopes and possibly other variables: For a number of variables, there is code in the Restart routine that says: If the variable isn&apos;t found on the restart file, then initialize it based on some other variable that is guaranteed to be on the restart file - e.g., initialize c13 to the bulk C value times some constant. My understanding is that this code is important when you&apos;re transitioning from a run without some option (e.g., without ciso) to a run with that option turned on.

This code works fine if use_init_interp = .false., but I&apos;m pretty sure it won&apos;t work with use_init_interp = .true.: Imagine you&apos;re doing a run with ciso true, pointing to an finidat file that was generated with ciso false, with use_init_interp true. In this case, finidat_interp_dest.nc is written with all of the C isotope fields present, at their cold start values. In init_interp, these fields will be skipped because they&apos;re not found on the source finidat file - and thus they will remain present in the finidat_interp_dest file, with values at the cold start values. Then, back in the CLM Restart routines, the code that checks whether the variable is present on the restart file will say, &quot;Yup, it&apos;s present&quot;, and so the code for newly-initializing the C isotope fields will never be executed.

Ben and I discussed a number of solutions yesterday, none of them completely satisfying. I won&apos;t lay those all out here. But I will lay out one more variation that I just thought of, which has the advantage of NOT requiring finding and changing all of the existing code that has patterns like the C isotope code:

When we write a restart file, add a new attribute to every field like &quot;valid_data&quot; (though we may want to come up with a better name). In the restartvar routine, that would be set to 1 (true) everywhere. Then, in initInterp, in the conditional that checks whether a given output variable is absent from the input file (the lines of code around the message, &quot;variable is NOT on input file&quot;): Set this valid_data attribute to 0 (false). (Aside: it&apos;s important that the new attribute value take up no more space than the old attribute value, according to what&apos;s allowed in netcdf when you have left &apos;define&apos; mode. So, for example, it would NOT work to set it to &apos;true&apos; originally and &apos;false&apos; in init_interp.) Then, back in the restartvar routine, on read: it would check the value of this valid_data attribute; if 0, then it skips reading the data and sets readvar to .false.

Ben, note that, unlike the solutions we were brainstorming yesterday, this solution does NOT involve identifying the relevant variables and giving them a new interpinic_flag behavior; instead, this solution would apply to ALL variables. I believe it&apos;s safe to apply this to all variables. i.e., for these variables that aren&apos;t present on the finidat source file, the end result should be the same whether or not we read the data in the Restart routine: they should end up at their cold start values in either case. But if we go with this solution, we may want to give this a little more thought to make sure it&apos;s safe.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2513</bug_id>
          
          <creation_ts>2017-09-20 15:38:17 -0600</creation_ts>
          <short_desc>Workaround for gnu compiler bug (7.2.0 and later): assigning to character array via associate</short_desc>
          <delta_ts>2017-10-17 16:09:43 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P1</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>andre@ucar.edu</cc>
    
    <cc>jedwards@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-K-MTaI23tMcChT_7c_bvp6_ehUCfbT06D5eJ1n4Fil0</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8224</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-09-20 15:38:17 -0600</bug_when>
    <thetext>This bug in recent versions of gfortran (affecting 7.2.0, 8.0 and possibly other versions):

https://gcc.gnu.org/bugzilla/show_bug.cgi?id=82121

means that we get compilation errors like this:

/Users/jedwards/cesm/cesm2_0_alpha/components/clm/src/soilbiogeochem/SoilBiogeochemDecompCascadeBGCMod.F90:425:6:



       decomp_pool_name_restart(i_litr1) = &apos;litr1&apos;

      1

Error: Unclassifiable statement at (1)

/Users/jedwards/cesm/cesm2_0_alpha/components/clm/src/soilbiogeochem/SoilBiogeochemDecompCascadeBGCMod.F90:426:6:



       decomp_pool_name_history(i_litr1) = &apos;LITR1&apos;

      1




A workaround would be to set these variables directly rather than via associate statements. We could try doing a find &amp; replace of decomp_pool_name  with decomp_cascade_con%decomp_pool_name. I&apos;m not sure if this issue appears in other places, too.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8225</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik@ucar.edu</who>
    <bug_when>2017-09-20 16:09:06 -0600</bug_when>
    <thetext>I did some checking, and character data is rare enough, especially in associate statements that I think the only other place this occurs is: 

components/clm/src/soilbiogeochem/SoilBiogeochemDecompCascadeCNMod.F90

It also looks like this workaround is reasonably straightforward. Here it is for the BGC version...

Index: SoilBiogeochemDecompCascadeBGCMod.F90
===================================================================
--- SoilBiogeochemDecompCascadeBGCMod.F90	(revision 86700)
+++ SoilBiogeochemDecompCascadeBGCMod.F90	(working copy)
@@ -361,10 +361,6 @@
          cascade_donor_pool             =&gt; decomp_cascade_con%cascade_donor_pool                 , &amp; ! Output: [integer           (:)     ]  which pool is C taken from for a given decomposition step 
          cascade_receiver_pool          =&gt; decomp_cascade_con%cascade_receiver_pool              , &amp; ! Output: [integer           (:)     ]  which pool is C added to for a given decomposition step   
          floating_cn_ratio_decomp_pools =&gt; decomp_cascade_con%floating_cn_ratio_decomp_pools     , &amp; ! Output: [logical           (:)     ]  TRUE =&gt; pool has fixed C:N ratio                          
-         decomp_pool_name_restart       =&gt; decomp_cascade_con%decomp_pool_name_restart           , &amp; ! Output: [character(len=8)  (:)     ]  name of pool for restart files                   
-         decomp_pool_name_history       =&gt; decomp_cascade_con%decomp_pool_name_history           , &amp; ! Output: [character(len=8)  (:)     ]  name of pool for history files                   
-         decomp_pool_name_long          =&gt; decomp_cascade_con%decomp_pool_name_long              , &amp; ! Output: [character(len=20) (:)     ]  name of pool for netcdf long names              
-         decomp_pool_name_short         =&gt; decomp_cascade_con%decomp_pool_name_short             , &amp; ! Output: [character(len=8)  (:)     ]  name of pool for netcdf short names              
          is_litter                      =&gt; decomp_cascade_con%is_litter                          , &amp; ! Output: [logical           (:)     ]  TRUE =&gt; pool is a litter pool                             
          is_soil                        =&gt; decomp_cascade_con%is_soil                            , &amp; ! Output: [logical           (:)     ]  TRUE =&gt; pool is a soil pool                               
          is_cwd                         =&gt; decomp_cascade_con%is_cwd                             , &amp; ! Output: [logical           (:)     ]  TRUE =&gt; pool is a cwd pool                                
@@ -422,10 +418,10 @@
 
       !-------------------  list of pools and their attributes  ------------
       floating_cn_ratio_decomp_pools(i_litr1) = .true.
-      decomp_pool_name_restart(i_litr1) = &apos;litr1&apos;
-      decomp_pool_name_history(i_litr1) = &apos;LITR1&apos;
-      decomp_pool_name_long(i_litr1) = &apos;litter 1&apos;
-      decomp_pool_name_short(i_litr1) = &apos;L1&apos;
+      decomp_cascade_con%decomp_pool_name_restart(i_litr1) = &apos;litr1&apos;
+      decomp_cascade_con%decomp_pool_name_history(i_litr1) = &apos;LITR1&apos;
+      decomp_cascade_con%decomp_pool_name_long(i_litr1) = &apos;litter 1&apos;
+      decomp_cascade_con%decomp_pool_name_short(i_litr1) = &apos;L1&apos;
       is_litter(i_litr1) = .true.
       is_soil(i_litr1) = .false.
       is_cwd(i_litr1) = .false.
@@ -436,10 +432,10 @@
       is_lignin(i_litr1) = .false.
 
       floating_cn_ratio_decomp_pools(i_litr2) = .true.
-      decomp_pool_name_restart(i_litr2) = &apos;litr2&apos;
-      decomp_pool_name_history(i_litr2) = &apos;LITR2&apos;
-      decomp_pool_name_long(i_litr2) = &apos;litter 2&apos;
-      decomp_pool_name_short(i_litr2) = &apos;L2&apos;
+      decomp_cascade_con%decomp_pool_name_restart(i_litr2) = &apos;litr2&apos;
+      decomp_cascade_con%decomp_pool_name_history(i_litr2) = &apos;LITR2&apos;
+      decomp_cascade_con%decomp_pool_name_long(i_litr2) = &apos;litter 2&apos;
+      decomp_cascade_con%decomp_pool_name_short(i_litr2) = &apos;L2&apos;
       is_litter(i_litr2) = .true.
       is_soil(i_litr2) = .false.
       is_cwd(i_litr2) = .false.
@@ -450,10 +446,10 @@
       is_lignin(i_litr2) = .false.
 
       floating_cn_ratio_decomp_pools(i_litr3) = .true.
-      decomp_pool_name_restart(i_litr3) = &apos;litr3&apos;
-      decomp_pool_name_history(i_litr3) = &apos;LITR3&apos;
-      decomp_pool_name_long(i_litr3) = &apos;litter 3&apos;
-      decomp_pool_name_short(i_litr3) = &apos;L3&apos;
+      decomp_cascade_con%decomp_pool_name_restart(i_litr3) = &apos;litr3&apos;
+      decomp_cascade_con%decomp_pool_name_history(i_litr3) = &apos;LITR3&apos;
+      decomp_cascade_con%decomp_pool_name_long(i_litr3) = &apos;litter 3&apos;
+      decomp_cascade_con%decomp_pool_name_short(i_litr3) = &apos;L3&apos;
       is_litter(i_litr3) = .true.
       is_soil(i_litr3) = .false.
       is_cwd(i_litr3) = .false.
@@ -466,10 +462,10 @@
       if (.not. use_fates) then
          ! CWD
          floating_cn_ratio_decomp_pools(i_cwd) = .true.
-         decomp_pool_name_restart(i_cwd) = &apos;cwd&apos;
-         decomp_pool_name_history(i_cwd) = &apos;CWD&apos;
-         decomp_pool_name_long(i_cwd) = &apos;coarse woody debris&apos;
-         decomp_pool_name_short(i_cwd) = &apos;CWD&apos;
+         decomp_cascade_con%decomp_pool_name_restart(i_cwd) = &apos;cwd&apos;
+         decomp_cascade_con%decomp_pool_name_history(i_cwd) = &apos;CWD&apos;
+         decomp_cascade_con%decomp_pool_name_long(i_cwd) = &apos;coarse woody debris&apos;
+         decomp_cascade_con%decomp_pool_name_short(i_cwd) = &apos;CWD&apos;
          is_litter(i_cwd) = .false.
          is_soil(i_cwd) = .false.
          is_cwd(i_cwd) = .true.
@@ -486,10 +482,10 @@
          i_soil1 = 4
       endif
       floating_cn_ratio_decomp_pools(i_soil1) = .false.
-      decomp_pool_name_restart(i_soil1) = &apos;soil1&apos;
-      decomp_pool_name_history(i_soil1) = &apos;SOIL1&apos;
-      decomp_pool_name_long(i_soil1) = &apos;soil 1&apos;
-      decomp_pool_name_short(i_soil1) = &apos;S1&apos;
+      decomp_cascade_con%decomp_pool_name_restart(i_soil1) = &apos;soil1&apos;
+      decomp_cascade_con%decomp_pool_name_history(i_soil1) = &apos;SOIL1&apos;
+      decomp_cascade_con%decomp_pool_name_long(i_soil1) = &apos;soil 1&apos;
+      decomp_cascade_con%decomp_pool_name_short(i_soil1) = &apos;S1&apos;
       is_litter(i_soil1) = .false.
       is_soil(i_soil1) = .true.
       is_cwd(i_soil1) = .false.
@@ -505,10 +501,10 @@
          i_soil2 = 5
       endif
       floating_cn_ratio_decomp_pools(i_soil2) = .false.
-      decomp_pool_name_restart(i_soil2) = &apos;soil2&apos;
-      decomp_pool_name_history(i_soil2) = &apos;SOIL2&apos;
-      decomp_pool_name_long(i_soil2) = &apos;soil 2&apos;
-      decomp_pool_name_short(i_soil2) = &apos;S2&apos;
+      decomp_cascade_con%decomp_pool_name_restart(i_soil2) = &apos;soil2&apos;
+      decomp_cascade_con%decomp_pool_name_history(i_soil2) = &apos;SOIL2&apos;
+      decomp_cascade_con%decomp_pool_name_long(i_soil2) = &apos;soil 2&apos;
+      decomp_cascade_con%decomp_pool_name_short(i_soil2) = &apos;S2&apos;
       is_litter(i_soil2) = .false.
       is_soil(i_soil2) = .true.
       is_cwd(i_soil2) = .false.
@@ -524,10 +520,10 @@
          i_soil3 = 6
       endif
       floating_cn_ratio_decomp_pools(i_soil3) = .false.
-      decomp_pool_name_restart(i_soil3) = &apos;soil3&apos;
-      decomp_pool_name_history(i_soil3) = &apos;SOIL3&apos;
-      decomp_pool_name_long(i_soil3) = &apos;soil 3&apos;
-      decomp_pool_name_short(i_soil3) = &apos;S3&apos;
+      decomp_cascade_con%decomp_pool_name_restart(i_soil3) = &apos;soil3&apos;
+      decomp_cascade_con%decomp_pool_name_history(i_soil3) = &apos;SOIL3&apos;
+      decomp_cascade_con%decomp_pool_name_long(i_soil3) = &apos;soil 3&apos;
+      decomp_cascade_con%decomp_pool_name_short(i_soil3) = &apos;S3&apos;
       is_litter(i_soil3) = .false.
       is_soil(i_soil3) = .true.
       is_cwd(i_soil3) = .false.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8276</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-10-17 16:09:43 -0600</bug_when>
    <thetext>Changing this to P1 because we feel it&apos;s important to resolve this for the release.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2525</bug_id>
          
          <creation_ts>2017-10-25 06:34:04 -0600</creation_ts>
          <short_desc>test_build_namelist.pl fails in clm4_5_16_r260</short_desc>
          <delta_ts>2017-10-25 09:48:08 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>andre@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-6n702jvmLckfSCZ-rtGH1MjtySKsSJJxGf0Kii8TdUk</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8293</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-10-25 06:34:04 -0600</bug_when>
    <thetext>Running

prove test_build_namelist.pl

from

clm4_5_16_r260/components/clm/bld/test_build_namelist

gives a number of failures. I&apos;m not sure how old this problem is: I run these unit tests whenever I change CLMBuildNamelist, but it&apos;s been a while since I changed that, so I haven&apos;t run this myself for quite a few tags.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8294</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-10-25 06:35:23 -0600</bug_when>
    <thetext>This was on yellowstone. On cheyenne I can&apos;t even get it off the ground:

Cannot detect source of &apos;./test_build_namelist.pl&apos;! at /usr/lib/perl5/5.18.2/TAP/Parser/IteratorFactory.pm line 263.
	TAP::Parser::IteratorFactory::detect_source(&apos;TAP::Parser::IteratorFactory=HASH(0xebe190)&apos;, &apos;TAP::Parser::Source=HASH(0xebe160)&apos;) called at /usr/lib/perl5/5.18.2/TAP/Parser/IteratorFactory.pm line 213
	TAP::Parser::IteratorFactory::make_iterator(&apos;TAP::Parser::IteratorFactory=HASH(0xebe190)&apos;, &apos;TAP::Parser::Source=HASH(0xebe160)&apos;) called at /usr/lib/perl5/5.18.2/TAP/Parser.pm line 469
	TAP::Parser::_initialize(&apos;TAP::Parser=HASH(0xee2000)&apos;, &apos;HASH(0xa70b98)&apos;) called at /usr/lib/perl5/5.18.2/TAP/Object.pm line 58
	TAP::Object::new(&apos;TAP::Parser&apos;, &apos;HASH(0xa70b98)&apos;) called at /usr/lib/perl5/5.18.2/TAP/Object.pm line 133
	TAP::Object::_construct(&apos;TAP::Harness=HASH(0x7baa40)&apos;, &apos;TAP::Parser&apos;, &apos;HASH(0xa70b98)&apos;) called at /usr/lib/perl5/5.18.2/TAP/Harness.pm line 779
	TAP::Harness::make_parser(&apos;TAP::Harness=HASH(0x7baa40)&apos;, &apos;TAP::Parser::Scheduler::Job=HASH(0xebc510)&apos;) called at /usr/lib/perl5/5.18.2/TAP/Harness.pm line 578
	TAP::Harness::_aggregate_single(&apos;TAP::Harness=HASH(0x7baa40)&apos;, &apos;TAP::Parser::Aggregator=HASH(0xdcc5d8)&apos;, &apos;TAP::Parser::Scheduler=HASH(0xebc4b0)&apos;) called at /usr/lib/perl5/5.18.2/TAP/Harness.pm line 670
	TAP::Harness::aggregate_tests(&apos;TAP::Harness=HASH(0x7baa40)&apos;, &apos;TAP::Parser::Aggregator=HASH(0xdcc5d8)&apos;, &apos;./test_build_namelist.pl&apos;) called at /usr/lib/perl5/5.18.2/TAP/Harness.pm line 485
	TAP::Harness::__ANON__() called at /usr/lib/perl5/5.18.2/TAP/Harness.pm line 498
	TAP::Harness::runtests(&apos;TAP::Harness=HASH(0x7baa40)&apos;, &apos;./test_build_namelist.pl&apos;) called at /usr/lib/perl5/5.18.2/App/Prove.pm line 554
	App::Prove::_runtests(&apos;App::Prove=HASH(0x7a27a8)&apos;, &apos;HASH(0xc9ba30)&apos;, &apos;TAP::Harness&apos;, &apos;./test_build_namelist.pl&apos;) called at /usr/lib/perl5/5.18.2/App/Prove.pm line 512
	App::Prove::run(&apos;App::Prove=HASH(0x7a27a8)&apos;) called at /usr/bin/prove line 11</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8297</commentid>
    <comment_count>2</comment_count>
    <who name="Erik Kluzek">erik@ucar.edu</who>
    <bug_when>2017-10-25 09:29:01 -0600</bug_when>
    <thetext>I do run this every tag, since it&apos;s so quick there is no reason not to. I just checked out the tag and found somewhat strange results. For me it works on both cheyenne and yellowstone, but it gives 47 FAILs on cheyenne and 4 on yellowstone. I also have a sandbox that has the trunk checkout out (and I updated it to latest) and that works fine with no fails. As far as I can see the trunk (and my sandbox) is identical to the tag.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8298</commentid>
    <comment_count>3</comment_count>
    <who name="Erik Kluzek">erik@ucar.edu</who>
    <bug_when>2017-10-25 09:40:45 -0600</bug_when>
    <thetext>I just ran it on a sandbox updated to the trunk on hobart, and on my laptop, and both work and give 1 FAIL.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8299</commentid>
    <comment_count>4</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-10-25 09:45:44 -0600</bug_when>
    <thetext>Now it&apos;s working for me on cheyenne; I&apos;m not sure what the problem was before.

But on both yellowstone and cheyenne from r260, 18 tests are failing. Oddly, the list of tests failing differs on the two:

yellowstone:

test_build_namelist.pl .. 1/?
#   Failed test &apos;test_do_transient_crops__default_transient_crop died (Can&apos;t use string (&quot;0&quot;) as a HASH ref while &quot;strict refs&quot; in use at ..//CLMBuildNamelist.pm line 3838.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_do_transient_crops-&gt;test_do_transient_crops__default_transient_crop)

#   Failed test &apos;test_do_transient_crops__override_default died (Can&apos;t use string (&quot;0&quot;) as a HASH ref while &quot;strict refs&quot; in use at ..//CLMBuildNamelist.pm line 3838.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_do_transient_crops-&gt;test_do_transient_crops__override_default)
test_build_namelist.pl .. 29/?
#   Failed test &apos;test_do_harvest__default_transient_cn died (Can&apos;t use string (&quot;0&quot;) as a HASH ref while &quot;strict refs&quot; in use at ..//CLMBuildNamelist.pm line 3838.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_do_harvest-&gt;test_do_harvest__default_transient_cn)

#   Failed test &apos;test_do_harvest__override_default died (Can&apos;t use string (&quot;0&quot;) as a HASH ref while &quot;strict refs&quot; in use at ..//CLMBuildNamelist.pm line 3838.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_do_harvest-&gt;test_do_harvest__override_default)

#   Failed test &apos;test_do_transient_pfts__default_transient died (Can&apos;t use string (&quot;0&quot;) as a HASH ref while &quot;strict refs&quot; in use at ..//CLMBuildNamelist.pm line 3838.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_do_transient_pfts-&gt;test_do_transient_pfts__default_transient)

#   Failed test &apos;test_do_transient_pfts__override_default died (Can&apos;t use string (&quot;0&quot;) as a HASH ref while &quot;strict refs&quot; in use at ..//CLMBuildNamelist.pm line 3838.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_do_transient_pfts-&gt;test_do_transient_pfts__override_default)

#   Failed test &apos;test_XXX__WWW died (Undefined subroutine &amp;CLMBuildNamelist::message called at t/template_test_XXX.pm line 87.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_XXX-&gt;test_XXX__WWW)

#   Failed test &apos;test_XXX__YYY died (Undefined subroutine &amp;CLMBuildNamelist::message called at t/template_test_XXX.pm line 68.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_XXX-&gt;test_XXX__YYY)

#   Failed test &apos;test_setup_cmdl_vichydro__set_use_vichydro died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ..//CLMBuildNamelist.pm line 1335.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_vichydro-&gt;test_setup_cmdl_vichydro__set_use_vichydro)

#   Failed test &apos;test_fates_mode__use_century_decomp died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ..//CLMBuildNamelist.pm line 804.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_fates_mode-&gt;test_fates_mode__use_century_decomp)

#   Failed test &apos;test_fates_mode__use_century_decomp_false died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ..//CLMBuildNamelist.pm line 804.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_fates_mode-&gt;test_fates_mode__use_century_decomp_false)

#   Failed test &apos;test_fates_mode__use_fates_spitfire died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ..//CLMBuildNamelist.pm line 804.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_fates_mode-&gt;test_fates_mode__use_fates_spitfire)

#   Failed test &apos;test_fates_mode__use_fates_spitfire_false died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ..//CLMBuildNamelist.pm line 804.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_fates_mode-&gt;test_fates_mode__use_fates_spitfire_false)

#   Failed test &apos;test_fates_mode__use_lch4 died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ..//CLMBuildNamelist.pm line 804.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_fates_mode-&gt;test_fates_mode__use_lch4)

#   Failed test &apos;test_fates_mode__use_lch4_true died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ..//CLMBuildNamelist.pm line 804.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_fates_mode-&gt;test_fates_mode__use_lch4_true)

#   Failed test &apos;test_fates_mode__use_nitrif_denitrif died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ..//CLMBuildNamelist.pm line 804.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_fates_mode-&gt;test_fates_mode__use_nitrif_denitrif)

#   Failed test &apos;test_fates_mode__use_vertsoilc died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ..//CLMBuildNamelist.pm line 804.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_fates_mode-&gt;test_fates_mode__use_vertsoilc)

#   Failed test &apos;test_fates_mode__use_vertsoilc_false died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ..//CLMBuildNamelist.pm line 804.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_fates_mode-&gt;test_fates_mode__use_vertsoilc_false)
# Looks like you failed 18 tests of 114.
test_build_namelist.pl .. Dubious, test returned 18 (wstat 4608, 0x1200)
Failed 18/114 subtests

Test Summary Report
-------------------
test_build_namelist.pl (Wstat: 4608 Tests: 114 Failed: 18)
  Failed tests:  18, 22, 36, 40, 54, 56, 74, 76, 88, 96
                98, 102, 104, 106, 108, 110, 112, 114
  Non-zero exit status: 18
Files=1, Tests=114,  1 wallclock secs ( 0.03 usr  0.01 sys +  0.53 cusr  0.04 csys =  0.61 CPU)
Result: FAIL





cheyenne:

test_build_namelist.pl .. 1/?
#   Failed test &apos;test_do_harvest__default_transient_cn died (Can&apos;t use string (&quot;0&quot;) as a HASH ref while &quot;strict refs&quot; in use at ../CLMBuildNamelist.pm line 3838.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_do_harvest-&gt;test_do_harvest__default_transient_cn)

#   Failed test &apos;test_do_harvest__override_default died (Can&apos;t use string (&quot;0&quot;) as a HASH ref while &quot;strict refs&quot; in use at ../CLMBuildNamelist.pm line 3838.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_do_harvest-&gt;test_do_harvest__override_default)

#   Failed test &apos;test_do_transient_pfts__default_transient died (Can&apos;t use string (&quot;0&quot;) as a HASH ref while &quot;strict refs&quot; in use at ../CLMBuildNamelist.pm line 3838.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_do_transient_pfts-&gt;test_do_transient_pfts__default_transient)

#   Failed test &apos;test_do_transient_pfts__override_default died (Can&apos;t use string (&quot;0&quot;) as a HASH ref while &quot;strict refs&quot; in use at ../CLMBuildNamelist.pm line 3838.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_do_transient_pfts-&gt;test_do_transient_pfts__override_default)

#   Failed test &apos;test_do_transient_crops__default_transient_crop died (Can&apos;t use string (&quot;0&quot;) as a HASH ref while &quot;strict refs&quot; in use at ../CLMBuildNamelist.pm line 3838.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_do_transient_crops-&gt;test_do_transient_crops__default_transient_crop)

#   Failed test &apos;test_do_transient_crops__override_default died (Can&apos;t use string (&quot;0&quot;) as a HASH ref while &quot;strict refs&quot; in use at ../CLMBuildNamelist.pm line 3838.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_do_transient_crops-&gt;test_do_transient_crops__override_default)

#   Failed test &apos;test_XXX__WWW died (Undefined subroutine &amp;CLMBuildNamelist::message called at t/template_test_XXX.pm line 87.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_XXX-&gt;test_XXX__WWW)

#   Failed test &apos;test_XXX__YYY died (Undefined subroutine &amp;CLMBuildNamelist::message called at t/template_test_XXX.pm line 68.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_XXX-&gt;test_XXX__YYY)

#   Failed test &apos;test_fates_mode__use_century_decomp died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ../CLMBuildNamelist.pm line 804.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_fates_mode-&gt;test_fates_mode__use_century_decomp)

#   Failed test &apos;test_fates_mode__use_century_decomp_false died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ../CLMBuildNamelist.pm line 804.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_fates_mode-&gt;test_fates_mode__use_century_decomp_false)

#   Failed test &apos;test_fates_mode__use_fates_spitfire died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ../CLMBuildNamelist.pm line 804.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_fates_mode-&gt;test_fates_mode__use_fates_spitfire)

#   Failed test &apos;test_fates_mode__use_fates_spitfire_false died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ../CLMBuildNamelist.pm line 804.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_fates_mode-&gt;test_fates_mode__use_fates_spitfire_false)

#   Failed test &apos;test_fates_mode__use_lch4 died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ../CLMBuildNamelist.pm line 804.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_fates_mode-&gt;test_fates_mode__use_lch4)

#   Failed test &apos;test_fates_mode__use_lch4_true died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ../CLMBuildNamelist.pm line 804.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_fates_mode-&gt;test_fates_mode__use_lch4_true)

#   Failed test &apos;test_fates_mode__use_nitrif_denitrif died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ../CLMBuildNamelist.pm line 804.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_fates_mode-&gt;test_fates_mode__use_nitrif_denitrif)

#   Failed test &apos;test_fates_mode__use_vertsoilc died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ../CLMBuildNamelist.pm line 804.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_fates_mode-&gt;test_fates_mode__use_vertsoilc)

#   Failed test &apos;test_fates_mode__use_vertsoilc_false died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ../CLMBuildNamelist.pm line 804.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_fates_mode-&gt;test_fates_mode__use_vertsoilc_false)

#   Failed test &apos;test_setup_cmdl_vichydro__set_use_vichydro died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ../CLMBuildNamelist.pm line 1335.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_vichydro-&gt;test_setup_cmdl_vichydro__set_use_vichydro)
# Looks like you failed 18 tests of 114.
test_build_namelist.pl .. Dubious, test returned 18 (wstat 4608, 0x1200)
Failed 18/114 subtests

Test Summary Report
-------------------
test_build_namelist.pl (Wstat: 4608 Tests: 114 Failed: 18)
  Failed tests:  13, 17, 31, 33, 53, 57, 67, 69, 86, 88
                92, 94, 96, 98, 100, 102, 104, 114
  Non-zero exit status: 18
Files=1, Tests=114,  1 wallclock secs ( 0.03 usr  0.01 sys +  0.45 cusr  0.05 csys =  0.54 CPU)
Result: FAIL</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8300</commentid>
    <comment_count>5</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-10-25 09:48:08 -0600</bug_when>
    <thetext>I also get 18 fails on my Mac. However, from rerunning it multiple times, I see that the list of failures differs each time I run it... but I consistently get 18 failures.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2527</bug_id>
          
          <creation_ts>2017-10-26 13:55:27 -0600</creation_ts>
          <short_desc>Try to rework atm2lndType initialization to follow the typical pattern</short_desc>
          <delta_ts>2017-10-26 13:55:27 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Bill Sacks">sacks@ucar.edu</assigned_to>
          <cc>andre@ucar.edu</cc>
    
    <cc>erik@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-stij4od6OXdBxrPdrlKlXLnS82mCGymckLJePYZOk40</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8302</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-10-26 13:55:27 -0600</bug_when>
    <thetext>Motivated by bug 2526:

I noticed that the initialization code in atm2lndType doesn&apos;t follow the typical CLM pattern. Specifically, initAllocate initializes these variables to 0, then initHistory can overwrite these 0s with spval; there is no initCold. Typically, initAllocate would set these to NaN, and there would be an initCold after initHistory.

We should try to bring this more in line with the typical pattern. One reason to do this is to prevent accidental behavior changes that arise simply from adding or removing a history field (and thus by adding or removing the setting to spval).

I hope this won&apos;t change answers... but I am worried it might. If it does change answers, this likely suggests that some spval&apos;s have been leaking into the code where they shouldn&apos;t, maybe due to accumulator variables (see also bug 2526).</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2537</bug_id>
          
          <creation_ts>2017-11-22 14:24:36 -0700</creation_ts>
          <short_desc>Climate accumulator fields incorrect for CNDV</short_desc>
          <delta_ts>2017-11-29 16:09:12 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>dlawren@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-48_Mab5v-goMcyJSCbY6dPlSgFbuDHvbZ4nD-EPHtd0</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8358</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-11-22 14:24:36 -0700</bug_when>
    <thetext>CNDV&apos;s establishment rules use a number of climate accumulators, including some GDD accumulators. However, the temperature field used in these GDD accumulators is t_ref2m, which I believe is only valid over active (non-zero-weight) patches. This is a problem, since it appears that these GDD accumulators are used to determine the establishment of not-yet-active patches. Thus, I believe that CNDV is using a garbage GDD field in its establishment rules.

With some upcoming changes I&apos;m planning to make, accumulator fields will only accumulate over active points - in contrast to the current situation where they accumulate constantly (including over inactive points), but may be accumulating garbage over inactive points. This will change the behavior somewhat for these GDD accumulators in CNDV, though I&apos;m not sure that either is more &quot;right&quot; than the other: both the old and new seem to be doing the wrong thing with respect to CNDV establishment.

My proposed solution is to change the CNDV code to depend on the atmosphere&apos;s forcing temperature (the downscaled column-level variable) rather than t_ref2m. Dave Lawrence thinks this is reasonable - that, for these purposes, atmospheric forcing temperature is close enough to 2-m reference temperature. This column-level variable would be valid whenever there is a vegetated column, which should be sufficient for CNDV.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8362</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-11-22 14:58:59 -0700</bug_when>
    <thetext>*** Bug 2538 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8363</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-11-22 15:00:02 -0700</bug_when>
    <thetext>Note that AGDDTW is also used to determine heat stress. I&apos;m not sure if that should also be changed to use column-level forcing temperature for consistency and simplicity, or if it&apos;s important to continue to use 2-m temperature for that.

Also, note that AGDDTW is based on another accumulator (of 10-day running average temperature). So that one would also need to be changed to use column-level forcing temperature.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8365</commentid>
    <comment_count>3</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-11-22 15:04:51 -0700</bug_when>
    <thetext>See also the somewhat-related bug 2539</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8372</commentid>
    <comment_count>4</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-11-27 10:15:47 -0700</bug_when>
    <thetext>Note that changing these patch-level CNDV variables to column-level will carry some challenges for backwards compatibility. This is do-able, but needs to be done carefully.

We&apos;ve found that it&apos;s problematic to change the subgrid level of a restart variable without changing its name - particularly for init_interp. So we should give new names to the column-level versions of these variables.

If these variable changes only affect CNDV, we probably don&apos;t need to put in place special logic to give continuous results with old restart files. i.e., it&apos;s probably okay if these accumulators get reset when using old restart files. However, this should be given some more thought. It&apos;s possible that we&apos;d at least want to hack together a new-style restart file (with these variables at col-level rather than patch-level) for the sake of CNDV tests in our test suite?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8373</commentid>
    <comment_count>5</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-11-27 11:19:57 -0700</bug_when>
    <thetext>TDA (used to set t_mo_patch and t_mo_min_patch) should also be moved to column-level. This should be easy, since it&apos;s fundamentally based on a col-level variable.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8375</commentid>
    <comment_count>6</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-11-29 16:09:12 -0700</bug_when>
    <thetext>CNDV also uses patch-level PREC365 for establishment rules. I think that field is currently okay for CNDV, but with my upcoming changes for bug 2526, this would become broken. I plan to move that field to column-level as part of fixing bug 2526: this should be pretty easy to do.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2539</bug_id>
          
          <creation_ts>2017-11-22 15:04:27 -0700</creation_ts>
          <short_desc>CNDV logic for agdd20 and tmomin20 needs to be revised to account for when a given patch/column becomes active</short_desc>
          <delta_ts>2017-11-22 15:04:27 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-_SKdd-GcDxft_FBErdf7Bta2YG774AxswZYc3Oh_VfM</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8364</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-11-22 15:04:27 -0700</bug_when>
    <thetext>CNDVDriver has the following logic:

      do p = bounds%begp, bounds%endp
         if (kyr == 2) then ! slevis: add &quot;.and. start_type==arb_ic&quot; here?
            tmomin20(p) = t_mo_min(p) ! NO, b/c want to be able to start dgvm
            agdd20(p) = agdd(p)       ! w/ clmi file from non-dgvm simulation
         end if
         tmomin20(p) = (19._r8 * tmomin20(p) + t_mo_min(p)) / 20._r8
         agdd20(p)   = (19._r8 * agdd20(p)   + agdd(p)    ) / 20._r8
      end do

However, this assumes that t_mo_min and agdd are valid from the start of the simulation. I believe that this is not the case for these patch-level variables. And with some changes I&apos;m planning to make soon, accumulator fields will always be invalid for inactive points, making this certainly not the case.

I think the solution here is to use something like the nyrs_crop_active_patch that&apos;s used for crop gdd accumulation, rather than using a scalar year counter for all patches.

See also the somewhat-related bug 2537.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2541</bug_id>
          
          <creation_ts>2017-11-29 16:34:22 -0700</creation_ts>
          <short_desc>runaccum accumulation fields shouldn&apos;t assume a certain min and max</short_desc>
          <delta_ts>2017-11-29 16:34:22 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-RUHklNIJPlHqqHS7iAlhW8Lum2yFBJX1ly3v9yUc7iA</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8376</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-11-29 16:34:22 -0700</bug_when>
    <thetext>accumulMod.F90 has the following code for runaccum accumulation fields:

       accum(nf)%val(beg:end,1) = min(max(accum(nf)%val(beg:end,1) + field(beg:end), 0._r8), 99999._r8)

Note the min &amp; max applications here.

Currently this min &amp; max application is okay, since runaccum is currently only used for GDD-type variables. But this could easily trip someone up who expects this generic infrastructure to truly be generic.

These min &amp; max values should be applied on a field-by-field basis, not in the generic infrastructure. I think it would be best for the min &amp; max values to be applied to the field by the caller, before the call to update_accum_field. However, I could accept specifying min and max values as optional arguments when calling init_accum_field if that were deemed preferable.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2542</bug_id>
          
          <creation_ts>2017-11-30 16:13:33 -0700</creation_ts>
          <short_desc>Consider handling accumulator fields more robustly with dynamic landunits</short_desc>
          <delta_ts>2017-11-30 16:13:33 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Bill Sacks">sacks@ucar.edu</assigned_to>
          <cc>erik@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-raPsZJU9T1foRIgixZagvIfixPhx9yGkuUoLsL0L6Qs</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8377</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-11-30 16:13:33 -0700</bug_when>
    <thetext>To fix bug 2526, I plan to make accumulators not accumulate over inactive points. This should fix any egregious issues with accumulator fields with dynamic landunits. However, in some cases (for certain accumulator fields), it could be helpful for a newly-active patch/column to initialize its accumulator field with some reasonable value, based on the value from an existing active patch/column in that gridcell. We could use infrastructure like dynInitColumns for this.

For example, Rosie suggested we may want to do this for one of the accumulators in FATES (which is based on temperature and relative humidity).</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2544</bug_id>
          
          <creation_ts>2017-12-06 10:32:11 -0700</creation_ts>
          <short_desc>Crop GDD accumulation gives large weight to the first years</short_desc>
          <delta_ts>2017-12-06 10:32:11 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks@ucar.edu</reporter>
          <assigned_to name="Erik Kluzek">erik@ucar.edu</assigned_to>
          <cc>dlawren@ucar.edu</cc>
    
    <cc>dll@ucar.edu</cc>
    
    <cc>lawrence@ucar.edu</cc>
    
    <cc>oleson@ucar.edu</cc>
    
    <cc>rfisher@ucar.edu</cc>
          
          <cf_fixedinversion></cf_fixedinversion>

      
          <token>1513387204-RtOw4OaqOnaWq9_-ZJjDU8SdhZdC075q9roWm_e2IiI</token>

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8381</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks@ucar.edu</who>
    <bug_when>2017-12-06 10:32:11 -0700</bug_when>
    <thetext>The crop GDD accumulation logic (in CNPhenologyClimate) gives disproportionately large weight to the first years when a crop is active: At the end of each year, it updates gdd020 (and similar variables) with:

gdd020(p)  = (yravgm1* gdd020(p)  + gdd0(p))  / yravg

where yravgm1 = 19 and yravg = 20.

This means that, at the end of yr2, gdd020 is (19*(gdd0 in year1) + 1*(gdd0 in year2))/20, etc.

This should probably be reworked to give all years equal weighting, e.g., by using the logic in accumulMod for running averages. Or better yet, this could be refactored to actually use accumulMod.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>