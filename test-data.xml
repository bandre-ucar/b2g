<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "http://bugs.cgd.ucar.edu/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.12"
          urlbase="http://bugs.cgd.ucar.edu/"
          
          maintainer="systems@cgd.ucar.edu"
>

    <bug>
          <bug_id>2527</bug_id>
          
          <creation_ts>2017-10-26 13:55:00 -0600</creation_ts>
          <short_desc>Try to rework atm2lndType initialization to follow the typical pattern</short_desc>
          <delta_ts>2017-10-26 13:55:27 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Bill Sacks">sacks</assigned_to>
          <cc>andre</cc>
    
    <cc>erik</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8302</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-10-26 13:55:27 -0600</bug_when>
    <thetext>Motivated by bug 2526:

I noticed that the initialization code in atm2lndType doesn&apos;t follow the typical CLM pattern. Specifically, initAllocate initializes these variables to 0, then initHistory can overwrite these 0s with spval; there is no initCold. Typically, initAllocate would set these to NaN, and there would be an initCold after initHistory.

We should try to bring this more in line with the typical pattern. One reason to do this is to prevent accidental behavior changes that arise simply from adding or removing a history field (and thus by adding or removing the setting to spval).

I hope this won&apos;t change answers... but I am worried it might. If it does change answers, this likely suggests that some spval&apos;s have been leaking into the code where they shouldn&apos;t, maybe due to accumulator variables (see also bug 2526).</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2526</bug_id>
          
          <creation_ts>2017-10-26 13:50:00 -0600</creation_ts>
          <short_desc>Some CLM accumulated fields (via accumulMod) are incorrect with dynamic landunits</short_desc>
          <delta_ts>2017-10-27 12:25:44 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Bill Sacks">sacks</assigned_to>
          <cc>andre</cc>
    
    <cc>dlawren</cc>
    
    <cc>dll</cc>
    
    <cc>erik</cc>
    
    <cc>fyke</cc>
    
    <cc>lawrence</cc>
    
    <cc>oleson</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8301</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-10-26 13:50:01 -0600</bug_when>
    <thetext>I have found evidence that at least some CLM accumulated fields (e.g., 10-day running-averages, and other fields accumulated via accumulMod) are incorrect when we have dynamic landunits (or even transient PFTs in some cases). This could affect the behavior in transient crop or transient glacier cases.

It appears that the accumulation code doesn&apos;t handle the possibility that patches or columns may come in and out of existence, and instead assumes that data are always valid at all points. This means that, as long as a patch or column has 0 weight (i.e., is inactive), the accumulation code continues to average in the variable&apos;s initial value. In some cases, this may be relatively innocuous, but in other cases this can cause very wrong behavior. The biggest problems may arise when the variable&apos;s initial value is spval: in this case, once the column initiates, it will be using accumulated values of 1e36, and it takes a VERY long time for these values to reach some reasonable magnitude given the exponential-decay implementation of accumulMod.

I discovered this problem in testing https://svn-ccsm-models.cgd.ucar.edu/clm2/branch_tags/rename_atm2lnd_diags_tags/rename_atm2lnd_diags_n01_clm4_5_16_r261 . The relevant change was that this initializes forc_pbot_downscaled_col to spval rather than leaving it at its value of 0 set in initAllocate (yes, note that initAllocate in this module sets things to 0 rather than NaN). This caused (small) differences in Vcmx25Z in the test SMS_Ly3_Mmpi-serial.1x1_smallvilleIA.IHistClm50BgcCropGs.yellowstone_gnu.clm-cropMonthOutput and I tracked those differences down to (very large) differences in PBOT_240. By doing vector output of PBOT_240 in this test, I see that: on the trunk, this seems to start at 0 in newly-initiating patches; on the branch, this seems to start at spval in newly-initiating patches.

I suspect that there are other problems like this in some other accumulator variables.

I think the best solution could be (1) to change the accumulation code to ignore inactive columns - so that, as soon as a column first becomes active, it acts as if it&apos;s the start of the simulation (starting the counter at 1 at that point, and keeping the accumulated value at the initial prescribed value until that point).

Other solutions could be: (2) using the dyn column state updater to update accumulator variables; (3) using dynInitColumns to initialize accumulator variables in newly-appearing columns (though note that this problem applies to patch-level variables, too, so this may not work without some extension of this infrastructure); (4) ensuring that any accumulated variable has valid values over even inactive points (but I think this will be tricky to ensure, especially as people potentially add new accumulator variables); (5) making sure that the initial cold-start value for anything that&apos;s accumulated is the same as the initial value that is sent to the accumulator code (so that, by continually averaging in that value, we&apos;re not messing things up too badly).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8310</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-10-27 10:56:56 -0600</bug_when>
    <thetext>I just did a quick look through the code for all accumulation fields in the model (by searching for init_accum_field). I then looked at which science modules these various fields are used in. From this, it looks like all of the accumulation fields are used for vegetation dynamics, and so this issue should not have a direct effect on glacier SMB.

So with respect to glacier dynamics, I believe the only effect of this bug would be on vegetation dynamics in retreating-glacier regions; I don&apos;t expect vegetation dynamics to be reasonable in these areas right now anyway, because we haven&apos;t yet taken the time to tweak and tune the initial below ground carbon &amp; nitrogen states to give reasonable vegetation regrowth.

Thus, I think the main scientific impact of this bug (if any) would be in areas with transient PFTs and/or transient crops.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8311</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-10-27 12:25:44 -0600</bug_when>
    <thetext>Actually, I just realized another reason why this shouldn&apos;t be an issue for land ice purposes: All columns (glacier and vegetated) are always active over the CISM domain. So, again, any impact of this bug would be felt in transient vegetation / transient crop runs.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2525</bug_id>
          
          <creation_ts>2017-10-25 06:34:00 -0600</creation_ts>
          <short_desc>test_build_namelist.pl fails in clm4_5_16_r260</short_desc>
          <delta_ts>2017-10-25 09:48:08 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8293</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-10-25 06:34:04 -0600</bug_when>
    <thetext>Running

prove test_build_namelist.pl

from

clm4_5_16_r260/components/clm/bld/test_build_namelist

gives a number of failures. I&apos;m not sure how old this problem is: I run these unit tests whenever I change CLMBuildNamelist, but it&apos;s been a while since I changed that, so I haven&apos;t run this myself for quite a few tags.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8294</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-10-25 06:35:23 -0600</bug_when>
    <thetext>This was on yellowstone. On cheyenne I can&apos;t even get it off the ground:

Cannot detect source of &apos;./test_build_namelist.pl&apos;! at /usr/lib/perl5/5.18.2/TAP/Parser/IteratorFactory.pm line 263.
	TAP::Parser::IteratorFactory::detect_source(&apos;TAP::Parser::IteratorFactory=HASH(0xebe190)&apos;, &apos;TAP::Parser::Source=HASH(0xebe160)&apos;) called at /usr/lib/perl5/5.18.2/TAP/Parser/IteratorFactory.pm line 213
	TAP::Parser::IteratorFactory::make_iterator(&apos;TAP::Parser::IteratorFactory=HASH(0xebe190)&apos;, &apos;TAP::Parser::Source=HASH(0xebe160)&apos;) called at /usr/lib/perl5/5.18.2/TAP/Parser.pm line 469
	TAP::Parser::_initialize(&apos;TAP::Parser=HASH(0xee2000)&apos;, &apos;HASH(0xa70b98)&apos;) called at /usr/lib/perl5/5.18.2/TAP/Object.pm line 58
	TAP::Object::new(&apos;TAP::Parser&apos;, &apos;HASH(0xa70b98)&apos;) called at /usr/lib/perl5/5.18.2/TAP/Object.pm line 133
	TAP::Object::_construct(&apos;TAP::Harness=HASH(0x7baa40)&apos;, &apos;TAP::Parser&apos;, &apos;HASH(0xa70b98)&apos;) called at /usr/lib/perl5/5.18.2/TAP/Harness.pm line 779
	TAP::Harness::make_parser(&apos;TAP::Harness=HASH(0x7baa40)&apos;, &apos;TAP::Parser::Scheduler::Job=HASH(0xebc510)&apos;) called at /usr/lib/perl5/5.18.2/TAP/Harness.pm line 578
	TAP::Harness::_aggregate_single(&apos;TAP::Harness=HASH(0x7baa40)&apos;, &apos;TAP::Parser::Aggregator=HASH(0xdcc5d8)&apos;, &apos;TAP::Parser::Scheduler=HASH(0xebc4b0)&apos;) called at /usr/lib/perl5/5.18.2/TAP/Harness.pm line 670
	TAP::Harness::aggregate_tests(&apos;TAP::Harness=HASH(0x7baa40)&apos;, &apos;TAP::Parser::Aggregator=HASH(0xdcc5d8)&apos;, &apos;./test_build_namelist.pl&apos;) called at /usr/lib/perl5/5.18.2/TAP/Harness.pm line 485
	TAP::Harness::__ANON__() called at /usr/lib/perl5/5.18.2/TAP/Harness.pm line 498
	TAP::Harness::runtests(&apos;TAP::Harness=HASH(0x7baa40)&apos;, &apos;./test_build_namelist.pl&apos;) called at /usr/lib/perl5/5.18.2/App/Prove.pm line 554
	App::Prove::_runtests(&apos;App::Prove=HASH(0x7a27a8)&apos;, &apos;HASH(0xc9ba30)&apos;, &apos;TAP::Harness&apos;, &apos;./test_build_namelist.pl&apos;) called at /usr/lib/perl5/5.18.2/App/Prove.pm line 512
	App::Prove::run(&apos;App::Prove=HASH(0x7a27a8)&apos;) called at /usr/bin/prove line 11</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8297</commentid>
    <comment_count>2</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-10-25 09:29:01 -0600</bug_when>
    <thetext>I do run this every tag, since it&apos;s so quick there is no reason not to. I just checked out the tag and found somewhat strange results. For me it works on both cheyenne and yellowstone, but it gives 47 FAILs on cheyenne and 4 on yellowstone. I also have a sandbox that has the trunk checkout out (and I updated it to latest) and that works fine with no fails. As far as I can see the trunk (and my sandbox) is identical to the tag.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8298</commentid>
    <comment_count>3</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-10-25 09:40:45 -0600</bug_when>
    <thetext>I just ran it on a sandbox updated to the trunk on hobart, and on my laptop, and both work and give 1 FAIL.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8299</commentid>
    <comment_count>4</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-10-25 09:45:44 -0600</bug_when>
    <thetext>Now it&apos;s working for me on cheyenne; I&apos;m not sure what the problem was before.

But on both yellowstone and cheyenne from r260, 18 tests are failing. Oddly, the list of tests failing differs on the two:

yellowstone:

test_build_namelist.pl .. 1/?
#   Failed test &apos;test_do_transient_crops__default_transient_crop died (Can&apos;t use string (&quot;0&quot;) as a HASH ref while &quot;strict refs&quot; in use at ..//CLMBuildNamelist.pm line 3838.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_do_transient_crops-&gt;test_do_transient_crops__default_transient_crop)

#   Failed test &apos;test_do_transient_crops__override_default died (Can&apos;t use string (&quot;0&quot;) as a HASH ref while &quot;strict refs&quot; in use at ..//CLMBuildNamelist.pm line 3838.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_do_transient_crops-&gt;test_do_transient_crops__override_default)
test_build_namelist.pl .. 29/?
#   Failed test &apos;test_do_harvest__default_transient_cn died (Can&apos;t use string (&quot;0&quot;) as a HASH ref while &quot;strict refs&quot; in use at ..//CLMBuildNamelist.pm line 3838.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_do_harvest-&gt;test_do_harvest__default_transient_cn)

#   Failed test &apos;test_do_harvest__override_default died (Can&apos;t use string (&quot;0&quot;) as a HASH ref while &quot;strict refs&quot; in use at ..//CLMBuildNamelist.pm line 3838.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_do_harvest-&gt;test_do_harvest__override_default)

#   Failed test &apos;test_do_transient_pfts__default_transient died (Can&apos;t use string (&quot;0&quot;) as a HASH ref while &quot;strict refs&quot; in use at ..//CLMBuildNamelist.pm line 3838.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_do_transient_pfts-&gt;test_do_transient_pfts__default_transient)

#   Failed test &apos;test_do_transient_pfts__override_default died (Can&apos;t use string (&quot;0&quot;) as a HASH ref while &quot;strict refs&quot; in use at ..//CLMBuildNamelist.pm line 3838.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_do_transient_pfts-&gt;test_do_transient_pfts__override_default)

#   Failed test &apos;test_XXX__WWW died (Undefined subroutine &amp;CLMBuildNamelist::message called at t/template_test_XXX.pm line 87.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_XXX-&gt;test_XXX__WWW)

#   Failed test &apos;test_XXX__YYY died (Undefined subroutine &amp;CLMBuildNamelist::message called at t/template_test_XXX.pm line 68.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_XXX-&gt;test_XXX__YYY)

#   Failed test &apos;test_setup_cmdl_vichydro__set_use_vichydro died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ..//CLMBuildNamelist.pm line 1335.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_vichydro-&gt;test_setup_cmdl_vichydro__set_use_vichydro)

#   Failed test &apos;test_fates_mode__use_century_decomp died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ..//CLMBuildNamelist.pm line 804.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_fates_mode-&gt;test_fates_mode__use_century_decomp)

#   Failed test &apos;test_fates_mode__use_century_decomp_false died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ..//CLMBuildNamelist.pm line 804.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_fates_mode-&gt;test_fates_mode__use_century_decomp_false)

#   Failed test &apos;test_fates_mode__use_fates_spitfire died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ..//CLMBuildNamelist.pm line 804.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_fates_mode-&gt;test_fates_mode__use_fates_spitfire)

#   Failed test &apos;test_fates_mode__use_fates_spitfire_false died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ..//CLMBuildNamelist.pm line 804.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_fates_mode-&gt;test_fates_mode__use_fates_spitfire_false)

#   Failed test &apos;test_fates_mode__use_lch4 died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ..//CLMBuildNamelist.pm line 804.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_fates_mode-&gt;test_fates_mode__use_lch4)

#   Failed test &apos;test_fates_mode__use_lch4_true died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ..//CLMBuildNamelist.pm line 804.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_fates_mode-&gt;test_fates_mode__use_lch4_true)

#   Failed test &apos;test_fates_mode__use_nitrif_denitrif died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ..//CLMBuildNamelist.pm line 804.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_fates_mode-&gt;test_fates_mode__use_nitrif_denitrif)

#   Failed test &apos;test_fates_mode__use_vertsoilc died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ..//CLMBuildNamelist.pm line 804.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_fates_mode-&gt;test_fates_mode__use_vertsoilc)

#   Failed test &apos;test_fates_mode__use_vertsoilc_false died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ..//CLMBuildNamelist.pm line 804.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_fates_mode-&gt;test_fates_mode__use_vertsoilc_false)
# Looks like you failed 18 tests of 114.
test_build_namelist.pl .. Dubious, test returned 18 (wstat 4608, 0x1200)
Failed 18/114 subtests

Test Summary Report
-------------------
test_build_namelist.pl (Wstat: 4608 Tests: 114 Failed: 18)
  Failed tests:  18, 22, 36, 40, 54, 56, 74, 76, 88, 96
                98, 102, 104, 106, 108, 110, 112, 114
  Non-zero exit status: 18
Files=1, Tests=114,  1 wallclock secs ( 0.03 usr  0.01 sys +  0.53 cusr  0.04 csys =  0.61 CPU)
Result: FAIL





cheyenne:

test_build_namelist.pl .. 1/?
#   Failed test &apos;test_do_harvest__default_transient_cn died (Can&apos;t use string (&quot;0&quot;) as a HASH ref while &quot;strict refs&quot; in use at ../CLMBuildNamelist.pm line 3838.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_do_harvest-&gt;test_do_harvest__default_transient_cn)

#   Failed test &apos;test_do_harvest__override_default died (Can&apos;t use string (&quot;0&quot;) as a HASH ref while &quot;strict refs&quot; in use at ../CLMBuildNamelist.pm line 3838.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_do_harvest-&gt;test_do_harvest__override_default)

#   Failed test &apos;test_do_transient_pfts__default_transient died (Can&apos;t use string (&quot;0&quot;) as a HASH ref while &quot;strict refs&quot; in use at ../CLMBuildNamelist.pm line 3838.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_do_transient_pfts-&gt;test_do_transient_pfts__default_transient)

#   Failed test &apos;test_do_transient_pfts__override_default died (Can&apos;t use string (&quot;0&quot;) as a HASH ref while &quot;strict refs&quot; in use at ../CLMBuildNamelist.pm line 3838.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_do_transient_pfts-&gt;test_do_transient_pfts__override_default)

#   Failed test &apos;test_do_transient_crops__default_transient_crop died (Can&apos;t use string (&quot;0&quot;) as a HASH ref while &quot;strict refs&quot; in use at ../CLMBuildNamelist.pm line 3838.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_do_transient_crops-&gt;test_do_transient_crops__default_transient_crop)

#   Failed test &apos;test_do_transient_crops__override_default died (Can&apos;t use string (&quot;0&quot;) as a HASH ref while &quot;strict refs&quot; in use at ../CLMBuildNamelist.pm line 3838.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_do_transient_crops-&gt;test_do_transient_crops__override_default)

#   Failed test &apos;test_XXX__WWW died (Undefined subroutine &amp;CLMBuildNamelist::message called at t/template_test_XXX.pm line 87.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_XXX-&gt;test_XXX__WWW)

#   Failed test &apos;test_XXX__YYY died (Undefined subroutine &amp;CLMBuildNamelist::message called at t/template_test_XXX.pm line 68.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_XXX-&gt;test_XXX__YYY)

#   Failed test &apos;test_fates_mode__use_century_decomp died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ../CLMBuildNamelist.pm line 804.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_fates_mode-&gt;test_fates_mode__use_century_decomp)

#   Failed test &apos;test_fates_mode__use_century_decomp_false died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ../CLMBuildNamelist.pm line 804.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_fates_mode-&gt;test_fates_mode__use_century_decomp_false)

#   Failed test &apos;test_fates_mode__use_fates_spitfire died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ../CLMBuildNamelist.pm line 804.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_fates_mode-&gt;test_fates_mode__use_fates_spitfire)

#   Failed test &apos;test_fates_mode__use_fates_spitfire_false died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ../CLMBuildNamelist.pm line 804.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_fates_mode-&gt;test_fates_mode__use_fates_spitfire_false)

#   Failed test &apos;test_fates_mode__use_lch4 died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ../CLMBuildNamelist.pm line 804.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_fates_mode-&gt;test_fates_mode__use_lch4)

#   Failed test &apos;test_fates_mode__use_lch4_true died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ../CLMBuildNamelist.pm line 804.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_fates_mode-&gt;test_fates_mode__use_lch4_true)

#   Failed test &apos;test_fates_mode__use_nitrif_denitrif died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ../CLMBuildNamelist.pm line 804.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_fates_mode-&gt;test_fates_mode__use_nitrif_denitrif)

#   Failed test &apos;test_fates_mode__use_vertsoilc died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ../CLMBuildNamelist.pm line 804.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_fates_mode-&gt;test_fates_mode__use_vertsoilc)

#   Failed test &apos;test_fates_mode__use_vertsoilc_false died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ../CLMBuildNamelist.pm line 804.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_fates_mode-&gt;test_fates_mode__use_vertsoilc_false)

#   Failed test &apos;test_setup_cmdl_vichydro__set_use_vichydro died (Can&apos;t call method &quot;verbose_message&quot; on an undefined value at ../CLMBuildNamelist.pm line 1335.)&apos;
#   at test_build_namelist.pl line 54.
#   (in test_vichydro-&gt;test_setup_cmdl_vichydro__set_use_vichydro)
# Looks like you failed 18 tests of 114.
test_build_namelist.pl .. Dubious, test returned 18 (wstat 4608, 0x1200)
Failed 18/114 subtests

Test Summary Report
-------------------
test_build_namelist.pl (Wstat: 4608 Tests: 114 Failed: 18)
  Failed tests:  13, 17, 31, 33, 53, 57, 67, 69, 86, 88
                92, 94, 96, 98, 100, 102, 104, 114
  Non-zero exit status: 18
Files=1, Tests=114,  1 wallclock secs ( 0.03 usr  0.01 sys +  0.45 cusr  0.05 csys =  0.54 CPU)
Result: FAIL</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8300</commentid>
    <comment_count>5</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-10-25 09:48:08 -0600</bug_when>
    <thetext>I also get 18 fails on my Mac. However, from rerunning it multiple times, I see that the list of failures differs each time I run it... but I consistently get 18 failures.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2513</bug_id>
          
          <creation_ts>2017-09-20 15:38:00 -0600</creation_ts>
          <short_desc>Workaround for gnu compiler bug (7.2.0 and later): assigning to character array via associate</short_desc>
          <delta_ts>2017-10-17 16:09:43 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P1</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>jedwards</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8224</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-09-20 15:38:17 -0600</bug_when>
    <thetext>This bug in recent versions of gfortran (affecting 7.2.0, 8.0 and possibly other versions):

https://gcc.gnu.org/bugzilla/show_bug.cgi?id=82121

means that we get compilation errors like this:

/Users/jedwards/cesm/cesm2_0_alpha/components/clm/src/soilbiogeochem/SoilBiogeochemDecompCascadeBGCMod.F90:425:6:



       decomp_pool_name_restart(i_litr1) = &apos;litr1&apos;

      1

Error: Unclassifiable statement at (1)

/Users/jedwards/cesm/cesm2_0_alpha/components/clm/src/soilbiogeochem/SoilBiogeochemDecompCascadeBGCMod.F90:426:6:



       decomp_pool_name_history(i_litr1) = &apos;LITR1&apos;

      1




A workaround would be to set these variables directly rather than via associate statements. We could try doing a find &amp; replace of decomp_pool_name  with decomp_cascade_con%decomp_pool_name. I&apos;m not sure if this issue appears in other places, too.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8225</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-09-20 16:09:06 -0600</bug_when>
    <thetext>I did some checking, and character data is rare enough, especially in associate statements that I think the only other place this occurs is: 

components/clm/src/soilbiogeochem/SoilBiogeochemDecompCascadeCNMod.F90

It also looks like this workaround is reasonably straightforward. Here it is for the BGC version...

Index: SoilBiogeochemDecompCascadeBGCMod.F90
===================================================================
--- SoilBiogeochemDecompCascadeBGCMod.F90	(revision 86700)
+++ SoilBiogeochemDecompCascadeBGCMod.F90	(working copy)
@@ -361,10 +361,6 @@
          cascade_donor_pool             =&gt; decomp_cascade_con%cascade_donor_pool                 , &amp; ! Output: [integer           (:)     ]  which pool is C taken from for a given decomposition step 
          cascade_receiver_pool          =&gt; decomp_cascade_con%cascade_receiver_pool              , &amp; ! Output: [integer           (:)     ]  which pool is C added to for a given decomposition step   
          floating_cn_ratio_decomp_pools =&gt; decomp_cascade_con%floating_cn_ratio_decomp_pools     , &amp; ! Output: [logical           (:)     ]  TRUE =&gt; pool has fixed C:N ratio                          
-         decomp_pool_name_restart       =&gt; decomp_cascade_con%decomp_pool_name_restart           , &amp; ! Output: [character(len=8)  (:)     ]  name of pool for restart files                   
-         decomp_pool_name_history       =&gt; decomp_cascade_con%decomp_pool_name_history           , &amp; ! Output: [character(len=8)  (:)     ]  name of pool for history files                   
-         decomp_pool_name_long          =&gt; decomp_cascade_con%decomp_pool_name_long              , &amp; ! Output: [character(len=20) (:)     ]  name of pool for netcdf long names              
-         decomp_pool_name_short         =&gt; decomp_cascade_con%decomp_pool_name_short             , &amp; ! Output: [character(len=8)  (:)     ]  name of pool for netcdf short names              
          is_litter                      =&gt; decomp_cascade_con%is_litter                          , &amp; ! Output: [logical           (:)     ]  TRUE =&gt; pool is a litter pool                             
          is_soil                        =&gt; decomp_cascade_con%is_soil                            , &amp; ! Output: [logical           (:)     ]  TRUE =&gt; pool is a soil pool                               
          is_cwd                         =&gt; decomp_cascade_con%is_cwd                             , &amp; ! Output: [logical           (:)     ]  TRUE =&gt; pool is a cwd pool                                
@@ -422,10 +418,10 @@
 
       !-------------------  list of pools and their attributes  ------------
       floating_cn_ratio_decomp_pools(i_litr1) = .true.
-      decomp_pool_name_restart(i_litr1) = &apos;litr1&apos;
-      decomp_pool_name_history(i_litr1) = &apos;LITR1&apos;
-      decomp_pool_name_long(i_litr1) = &apos;litter 1&apos;
-      decomp_pool_name_short(i_litr1) = &apos;L1&apos;
+      decomp_cascade_con%decomp_pool_name_restart(i_litr1) = &apos;litr1&apos;
+      decomp_cascade_con%decomp_pool_name_history(i_litr1) = &apos;LITR1&apos;
+      decomp_cascade_con%decomp_pool_name_long(i_litr1) = &apos;litter 1&apos;
+      decomp_cascade_con%decomp_pool_name_short(i_litr1) = &apos;L1&apos;
       is_litter(i_litr1) = .true.
       is_soil(i_litr1) = .false.
       is_cwd(i_litr1) = .false.
@@ -436,10 +432,10 @@
       is_lignin(i_litr1) = .false.
 
       floating_cn_ratio_decomp_pools(i_litr2) = .true.
-      decomp_pool_name_restart(i_litr2) = &apos;litr2&apos;
-      decomp_pool_name_history(i_litr2) = &apos;LITR2&apos;
-      decomp_pool_name_long(i_litr2) = &apos;litter 2&apos;
-      decomp_pool_name_short(i_litr2) = &apos;L2&apos;
+      decomp_cascade_con%decomp_pool_name_restart(i_litr2) = &apos;litr2&apos;
+      decomp_cascade_con%decomp_pool_name_history(i_litr2) = &apos;LITR2&apos;
+      decomp_cascade_con%decomp_pool_name_long(i_litr2) = &apos;litter 2&apos;
+      decomp_cascade_con%decomp_pool_name_short(i_litr2) = &apos;L2&apos;
       is_litter(i_litr2) = .true.
       is_soil(i_litr2) = .false.
       is_cwd(i_litr2) = .false.
@@ -450,10 +446,10 @@
       is_lignin(i_litr2) = .false.
 
       floating_cn_ratio_decomp_pools(i_litr3) = .true.
-      decomp_pool_name_restart(i_litr3) = &apos;litr3&apos;
-      decomp_pool_name_history(i_litr3) = &apos;LITR3&apos;
-      decomp_pool_name_long(i_litr3) = &apos;litter 3&apos;
-      decomp_pool_name_short(i_litr3) = &apos;L3&apos;
+      decomp_cascade_con%decomp_pool_name_restart(i_litr3) = &apos;litr3&apos;
+      decomp_cascade_con%decomp_pool_name_history(i_litr3) = &apos;LITR3&apos;
+      decomp_cascade_con%decomp_pool_name_long(i_litr3) = &apos;litter 3&apos;
+      decomp_cascade_con%decomp_pool_name_short(i_litr3) = &apos;L3&apos;
       is_litter(i_litr3) = .true.
       is_soil(i_litr3) = .false.
       is_cwd(i_litr3) = .false.
@@ -466,10 +462,10 @@
       if (.not. use_fates) then
          ! CWD
          floating_cn_ratio_decomp_pools(i_cwd) = .true.
-         decomp_pool_name_restart(i_cwd) = &apos;cwd&apos;
-         decomp_pool_name_history(i_cwd) = &apos;CWD&apos;
-         decomp_pool_name_long(i_cwd) = &apos;coarse woody debris&apos;
-         decomp_pool_name_short(i_cwd) = &apos;CWD&apos;
+         decomp_cascade_con%decomp_pool_name_restart(i_cwd) = &apos;cwd&apos;
+         decomp_cascade_con%decomp_pool_name_history(i_cwd) = &apos;CWD&apos;
+         decomp_cascade_con%decomp_pool_name_long(i_cwd) = &apos;coarse woody debris&apos;
+         decomp_cascade_con%decomp_pool_name_short(i_cwd) = &apos;CWD&apos;
          is_litter(i_cwd) = .false.
          is_soil(i_cwd) = .false.
          is_cwd(i_cwd) = .true.
@@ -486,10 +482,10 @@
          i_soil1 = 4
       endif
       floating_cn_ratio_decomp_pools(i_soil1) = .false.
-      decomp_pool_name_restart(i_soil1) = &apos;soil1&apos;
-      decomp_pool_name_history(i_soil1) = &apos;SOIL1&apos;
-      decomp_pool_name_long(i_soil1) = &apos;soil 1&apos;
-      decomp_pool_name_short(i_soil1) = &apos;S1&apos;
+      decomp_cascade_con%decomp_pool_name_restart(i_soil1) = &apos;soil1&apos;
+      decomp_cascade_con%decomp_pool_name_history(i_soil1) = &apos;SOIL1&apos;
+      decomp_cascade_con%decomp_pool_name_long(i_soil1) = &apos;soil 1&apos;
+      decomp_cascade_con%decomp_pool_name_short(i_soil1) = &apos;S1&apos;
       is_litter(i_soil1) = .false.
       is_soil(i_soil1) = .true.
       is_cwd(i_soil1) = .false.
@@ -505,10 +501,10 @@
          i_soil2 = 5
       endif
       floating_cn_ratio_decomp_pools(i_soil2) = .false.
-      decomp_pool_name_restart(i_soil2) = &apos;soil2&apos;
-      decomp_pool_name_history(i_soil2) = &apos;SOIL2&apos;
-      decomp_pool_name_long(i_soil2) = &apos;soil 2&apos;
-      decomp_pool_name_short(i_soil2) = &apos;S2&apos;
+      decomp_cascade_con%decomp_pool_name_restart(i_soil2) = &apos;soil2&apos;
+      decomp_cascade_con%decomp_pool_name_history(i_soil2) = &apos;SOIL2&apos;
+      decomp_cascade_con%decomp_pool_name_long(i_soil2) = &apos;soil 2&apos;
+      decomp_cascade_con%decomp_pool_name_short(i_soil2) = &apos;S2&apos;
       is_litter(i_soil2) = .false.
       is_soil(i_soil2) = .true.
       is_cwd(i_soil2) = .false.
@@ -524,10 +520,10 @@
          i_soil3 = 6
       endif
       floating_cn_ratio_decomp_pools(i_soil3) = .false.
-      decomp_pool_name_restart(i_soil3) = &apos;soil3&apos;
-      decomp_pool_name_history(i_soil3) = &apos;SOIL3&apos;
-      decomp_pool_name_long(i_soil3) = &apos;soil 3&apos;
-      decomp_pool_name_short(i_soil3) = &apos;S3&apos;
+      decomp_cascade_con%decomp_pool_name_restart(i_soil3) = &apos;soil3&apos;
+      decomp_cascade_con%decomp_pool_name_history(i_soil3) = &apos;SOIL3&apos;
+      decomp_cascade_con%decomp_pool_name_long(i_soil3) = &apos;soil 3&apos;
+      decomp_cascade_con%decomp_pool_name_short(i_soil3) = &apos;S3&apos;
       is_litter(i_soil3) = .false.
       is_soil(i_soil3) = .true.
       is_cwd(i_soil3) = .false.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8276</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-10-17 16:09:43 -0600</bug_when>
    <thetext>Changing this to P1 because we feel it&apos;s important to resolve this for the release.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2511</bug_id>
          
          <creation_ts>2017-09-18 00:28:00 -0600</creation_ts>
          <short_desc>Overflow with Carbon isotopes...</short_desc>
          <delta_ts>2017-10-05 11:49:56 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.x Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P1</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>cdkoven</cc>
    
    <cc>dlawren</cc>
    
    <cc>dll</cc>
    
    <cc>oleson</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8210</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-09-18 00:28:32 -0600</bug_when>
    <thetext>This occurs about 20 days in with clm4_5_16_r255 with SMS_D_Lm9.f10_f10_musgs.I1850Clm50BgcCrop.cheyenne_intel.clm-ciso_monthly

or with a Hist case as well.

44: Negative conc. in ch4tran. c,j,deficit (mol):        3113           1
44:  2.390122000974219E-003
44: Negative conc. in ch4tran. c,j,deficit (mol):        3126           1
44:  2.186088406244086E-003
7:forrtl: error (72): floating overflow
7:Image              PC                Routine            Line        Source
7:cesm.exe           00000000049EF671  Unknown               Unknown  Unknown
7:cesm.exe           00000000049ED7AB  Unknown               Unknown  Unknown
7:cesm.exe           00000000049A0114  Unknown               Unknown  Unknown
7:cesm.exe           000000000499FF26  Unknown               Unknown  Unknown
7:cesm.exe           0000000004925079  Unknown               Unknown  Unknown
7:cesm.exe           000000000493166C  Unknown               Unknown  Unknown
7:libpthread-2.19.s  00002AAAAFAC1870  Unknown               Unknown  Unknown
7:cesm.exe           0000000003119840  cncisofluxmod_mp_        1594  CNCIsoFluxMod.F90
7:cesm.exe           00000000030A7468  cncisofluxmod_mp_         149  CNCIsoFluxMod.F90
7:cesm.exe           0000000002B9C9FD  cndrivermod_mp_cn         531  CNDriverMod.F90
7:cesm.exe           00000000011604E0  cnvegetationfacad         837  CNVegetationFacade.F90
7:cesm.exe           000000000089677F  clm_driver_mp_clm         803  clm_driver.F90
7:cesm.exe           0000000000849921  lnd_comp_mct_mp_l         444  lnd_comp_mct.F90
7:cesm.exe           0000000000469CBE  component_mod_mp_         681  component_mod.F90
7:cesm.exe           000000000043BD99  cesm_comp_mod_mp_        2639  cesm_comp_mod.F90
7:cesm.exe           000000000045285B  MAIN__                     68  cesm_driver.F90</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8211</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-09-18 11:37:12 -0600</bug_when>
    <thetext>The problem is from this line:

        if (ctot_state(i) /= 0._r8 .and. ciso_state(i) /= 0._r8) then
           ciso_flux(i) = ctot_flux(i) * (ciso_state(i)/ctot_state(i)) * frax
        else

ciso_state is set to something like -5e+305 for some reason, and hence dividing by the small value of ctot_state makes it overflow.

And a similar test fails on yellowstone.

SMS_D_Lm13.f10_f10_musgs.I1850Clm50BgcCrop.yellowstone_intel.clm-ciso_monthly

I think this worked in simulations that were done because they weren&apos;t run in DEBUG mode. 

I&apos;m going to leave this problem as an expected fail.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8212</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-09-18 14:10:17 -0600</bug_when>
    <thetext>From a quick look through the code: It looks like it could be worth determining which of the many fluxes added to / subtracted from cpool in CStateUpdate1 has this huge value.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8213</commentid>
    <comment_count>3</comment_count>
    <who name="Keith Oleson">oleson</who>
    <bug_when>2017-09-18 17:11:24 -0600</bug_when>
    <thetext>This bug seems quite similar to a bug Charlie and Danica fixed with regard to crop seed C as follows from Danica:

&quot;I&apos;m happy to dive into the details of the bugs when you return. A brief description (you shouldn&apos;t think about it much while you&apos;re traveling): The bugs mostly dealt with the crop seed deficit &amp; the fact that crop seed C wasn&apos;t initialized with isotope values. In the desert regions, the deficit accumulated when crops didn&apos;t grow and the seed C was still getting removed and was subtracted from total veg. C, causing that pool to go negative in crop regions when the crops didn&apos;t grow. The fix is to treat the deficit similar to the excess maintenance respiration pool, and subtract it from the total soil column C rather than veg C. It&apos;s not a perfect solution, but it works and is consistent with some of the other fixes that were previously implemented. The third bug was the one that we found during the CESM meeting (live stem C) that didn&apos;t get incorporated into the tests that we were doing.&quot;

However, I believe we were getting large negative values of ciso_state which I think was associated with totvegc, and the line number in the error here seems to indicate that it is a cpool problem, not a totvegc problem, so this may be a red herring.

I&apos;m not sure exactly what the bug fix was (I&apos;m adding Danica on this bug report), but it seems like we could check to make sure it didn&apos;t get lost or something, just in case it is related to the current problem.

I guess this particular test must be new since clm4_5_16_r252, because this test wasn&apos;t present in my cheyenne testing with smanchanges_n06_clm4_5_16_r252.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8221</commentid>
    <comment_count>4</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-09-19 11:21:22 -0600</bug_when>
    <thetext>OK, I did more testing, and found this is a problem in more situations than I thought. Hence, I&apos;m upping it&apos;s priority and importance.

It does show up in runs with DEBUG=FALSE, just with different behavior with the flux_dribbler complaining. My tests were with f10, so I tried f09 and get the same problem. The tests that Keith did were with f09, and I also replicated his test when I first took this over again. That may mean I can go back through and see what update on the branch caused the test to break. It could be an update to a newer version of CLM, or another update that happened.

And yes this is a new test in order to exercise running crop and c-isotopes on at the same time.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8255</commentid>
    <comment_count>5</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-10-05 11:49:56 -0600</bug_when>
    <thetext>OK, when I use a properly spunup initial condition file (with isotopes on) these tests work fine.

ERS_D_Lm9.f10_f10_musgs.IHistClm50BgcCrop.cheyenne_intel.clm-ciso_monthly
SMS_D_Lm9.f10_f10_musgs.I1850Clm50BgcCrop.cheyenne_intel.clm-ciso_monthly

So it&apos;s a problem of starting up from a non-isotope case to an isotope case.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2500</bug_id>
          
          <creation_ts>2017-08-09 11:37:00 -0600</creation_ts>
          <short_desc>ne30 case fails on hobart_nag due to floating overflow</short_desc>
          <delta_ts>2017-08-23 10:14:35 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.x Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          <dependson>2447</dependson>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>dlawren</cc>
    
    <cc>fischer</cc>
    
    <cc>mvertens</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8180</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-08-09 11:37:27 -0600</bug_when>
    <thetext>ERP_D_Ld5.ne30_g16.I1850Clm50BgcCrop.hobart_nag.clm-default fails in clm4_5_16_r253 as follows below. Chris Fischer also had it fail in: cesm2_0_alpha07c. And looking back it fails in cesm2_0_alpha07b, but works in cesm2_0_alpha07a (according to looking at the baselines on hobart, which have history files for 07a, but are missing for 07b and 07c). 07a had clm4_5_16_r242, and 07b jumps from r243 up to clm4_5_16_r249, so most likely this problem starts occurring somewhere between r243 and r249.

I&apos;m flagging bug 2447 -- because maybe this is the same issue?

Also, note we don&apos;t do this test in aux_clm -- but do with CESM alpha or beta testing for some reason? Shouldn&apos;t we also test this in aux_clm?

Here&apos;s the failure from the cesm.log file. Looks like it happens just after initialization.

   Creating variable usurf
   Creating variable uvel
   Creating variable vvel
    Writing to file ERP_D_Ld5.ne30_g16.I1850Clm50BgcCrop.hobart_nag.clm-default.20170809_104356_hxvib8.cism.initial_hist.0001-01-01-00000.nc at time    0.0000000000000000
Runtime Error: *** Arithmetic exception: Floating overflow - aborting

cesm.exe:26853 terminated with signal 6 at PC=7f287d4b85f7 SP=7ffcf514c1e8.  Backtrace:
/lib64/libc.so.6(gsignal+0x37)[0x7f287d4b85f7]
/lib64/libc.so.6(abort+0x148)[0x7f287d4b9ce8]
/usr/local/nag-6.1/lib/NAG_Fortran/libf61rts.so.1(__NAGf90_signal_handler+0xa2)[0x7f287dbe7642]
/lib64/libpthread.so.0(+0xf100)[0x7f287e424100]
/scratch/cluster/erik/ERP_D_Ld5.ne30_g16.I1850Clm50BgcCrop.hobart_nag.clm-default.20170809_104356_hxvib8/bld/cesm.exe[0x141cc7f]
/scratch/cluster/erik/ERP_D_Ld5.ne30_g16.I1850Clm50BgcCrop.hobart_nag.clm-default.20170809_104356_hxvib8/bld/cesm.exe[0x1cc6d63]
/scratch/cluster/erik/ERP_D_Ld5.ne30_g16.I1850Clm50BgcCrop.hobart_nag.clm-default.20170809_104356_hxvib8/bld/cesm.exe[0xdfe84c]
/scratch/cluster/erik/ERP_D_Ld5.ne30_g16.I1850Clm50BgcCrop.hobart_nag.clm-default.20170809_104356_hxvib8/bld/cesm.exe[0x821b11]
/scratch/cluster/erik/ERP_D_Ld5.ne30_g16.I1850Clm50BgcCrop.hobart_nag.clm-default.20170809_104356_hxvib8/bld/cesm.exe[0x7c2f46]
/scratch/cluster/erik/ERP_D_Ld5.ne30_g16.I1850Clm50BgcCrop.hobart_nag.clm-default.20170809</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8189</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-08-23 10:14:35 -0600</bug_when>
    <thetext>From addr2line, I get the following point of failure:

/fs/cgd/data0/erik/clm_trunk/components/clm/src/soilbiogeochem/SoilBiogeochemCompetitionMod.F90:665

which is:

smin_no3_to_plant_vr(c,j) = (smin_no3_vr(c,j)/dt)*((plant_ndemand(c)* &amp;
     nuptake_prof(c,j)-smin_nh4_to_plant_vr(c,j))*compet_plant_no3 / sum_no3_demand_scaled(c,j))</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2497</bug_id>
          
          <creation_ts>2017-07-28 14:27:00 -0600</creation_ts>
          <short_desc>psi_soil_ref obsolete</short_desc>
          <delta_ts>2017-07-28 14:27:33 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter>djk2120</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8167</commentid>
    <comment_count>0</comment_count>
    <who name="">djk2120</who>
    <bug_when>2017-07-28 14:27:33 -0600</bug_when>
    <thetext>psi_soil_ref, which is on the parameter file and referenced in PhotosynthesisMod.F90, is now obsolete following Sean&apos;s updates to the soil-root conductances in PHS</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2496</bug_id>
          
          <creation_ts>2017-07-26 06:34:00 -0600</creation_ts>
          <short_desc>Logic for initializing C isotopes and maybe other variables incorrect when using init_interp</short_desc>
          <delta_ts>2017-07-26 06:34:15 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Ben Andre">andre</assigned_to>
          <cc>cdkoven</cc>
    
    <cc>dlawren</cc>
    
    <cc>erik</cc>
    
    <cc>mvertens</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8159</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-07-26 06:34:15 -0600</bug_when>
    <thetext>Ben pointed this problem out with respect to water isotopes, but I realized that the same problem occurs in existing code for carbon isotopes and possibly other variables: For a number of variables, there is code in the Restart routine that says: If the variable isn&apos;t found on the restart file, then initialize it based on some other variable that is guaranteed to be on the restart file - e.g., initialize c13 to the bulk C value times some constant. My understanding is that this code is important when you&apos;re transitioning from a run without some option (e.g., without ciso) to a run with that option turned on.

This code works fine if use_init_interp = .false., but I&apos;m pretty sure it won&apos;t work with use_init_interp = .true.: Imagine you&apos;re doing a run with ciso true, pointing to an finidat file that was generated with ciso false, with use_init_interp true. In this case, finidat_interp_dest.nc is written with all of the C isotope fields present, at their cold start values. In init_interp, these fields will be skipped because they&apos;re not found on the source finidat file - and thus they will remain present in the finidat_interp_dest file, with values at the cold start values. Then, back in the CLM Restart routines, the code that checks whether the variable is present on the restart file will say, &quot;Yup, it&apos;s present&quot;, and so the code for newly-initializing the C isotope fields will never be executed.

Ben and I discussed a number of solutions yesterday, none of them completely satisfying. I won&apos;t lay those all out here. But I will lay out one more variation that I just thought of, which has the advantage of NOT requiring finding and changing all of the existing code that has patterns like the C isotope code:

When we write a restart file, add a new attribute to every field like &quot;valid_data&quot; (though we may want to come up with a better name). In the restartvar routine, that would be set to 1 (true) everywhere. Then, in initInterp, in the conditional that checks whether a given output variable is absent from the input file (the lines of code around the message, &quot;variable is NOT on input file&quot;): Set this valid_data attribute to 0 (false). (Aside: it&apos;s important that the new attribute value take up no more space than the old attribute value, according to what&apos;s allowed in netcdf when you have left &apos;define&apos; mode. So, for example, it would NOT work to set it to &apos;true&apos; originally and &apos;false&apos; in init_interp.) Then, back in the restartvar routine, on read: it would check the value of this valid_data attribute; if 0, then it skips reading the data and sets readvar to .false.

Ben, note that, unlike the solutions we were brainstorming yesterday, this solution does NOT involve identifying the relevant variables and giving them a new interpinic_flag behavior; instead, this solution would apply to ALL variables. I believe it&apos;s safe to apply this to all variables. i.e., for these variables that aren&apos;t present on the finidat source file, the end result should be the same whether or not we read the data in the Restart routine: they should end up at their cold start values in either case. But if we go with this solution, we may want to give this a little more thought to make sure it&apos;s safe.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2490</bug_id>
          
          <creation_ts>2017-07-10 13:03:00 -0600</creation_ts>
          <short_desc>CNBalanceCheckMod.f90 gives an error on hobart using gnu with openmpi</short_desc>
          <delta_ts>2017-07-10 13:03:13 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>Other</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Alice Bertini">aliceb</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8122</commentid>
    <comment_count>0</comment_count>
    <who name="Alice Bertini">aliceb</who>
    <bug_when>2017-07-10 13:03:13 -0600</bug_when>
    <thetext>Test specific:
hobart using compiler/gnu/5.4.0 and mpi/gcc/openmpi-2.0.2-static
test - ERS_Pm.f09_g17.B1850.hobart_gnu.allactive-defaultio
cesm2_0_alpha06n with CLM tag 
https://svn-ccsm-models.cgd.ucar.edu/clm2/trunk_tags/clm4_5_16_r242/components/clm

gives the following cesm.log error in CNBalanceCheckMod.F90 at line 217:

cbalance warning      307135   927330467.36064720        1.1400000000000001E+036
 column cbalance error    =    927330467.36064720           307135
 Latdeg,Londeg=   84.345549738219987        330.00000000000000
 begcb                    =    1.1400000000000001E+036
 endcb                    =    1.1400000000000001E+036
 delta store              =    0.0000000000000000
 --- Inputs ---
 gpp                      =    0.0000000000000000
 --- Outputs ---
 er                       =    0.0000000000000000
 col_fire_closs           =    0.0000000000000000
 col_hrv_xsmrpool_to_atm  =    0.0000000000000000
 wood_harvestc            =    0.0000000000000000
 grainc_to_cropprodc      =    0.0000000000000000
 -1*som_c_leached         =    927330467.36064720

*******

The same test, same tag works fine with compiler/intel/15.0.2.164 andmpi/intel/mvapich2-2.1-qlc. Was also able to successfully run a PFS test and
a regular B1850, f09_g17 9 month case for both compilers and libraries. 

So, I think there&apos;s either a problem with the test or the compiler / mpilib 
configuration for this test.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2489</bug_id>
          
          <creation_ts>2017-07-06 13:21:00 -0600</creation_ts>
          <short_desc>Clm45BgcCrop case dies due to negative leafn</short_desc>
          <delta_ts>2017-10-25 07:46:59 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>REOPENED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P2</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>dlawren</cc>
    
    <cc>dll</cc>
    
    <cc>oleson</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion>clm4_5_16_r255</cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8115</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-07-06 13:21:37 -0600</bug_when>
    <thetext>In the compsetchanges branch (soon to be clm4_5_16_r249), this test is dying:

ERP_D.f10_f10_musgs.IHistClm50Bgc.yellowstone_gnu.clm-decStart

with message:

28: ERROR: Carbon or Nitrogen patch negative =    30.5688132018826
28:  -6.01119011968369
28: ERROR: limits =   -60.0000000000000       -6.00000000000000
28: ENDRUN:
28: ERROR: carbon or nitrogen state critically negative ERROR in CNPrecisionControl
28: Mod.F90 at line 207

This is from this call:

      ! leaf C and N
      call TruncateCandNStates( bounds, filter_soilp, num_soilp, cs%leafc_patch(bounds%begp:bounds%endp), &amp;
                                ns%leafn_patch(bounds%begp:bounds%endp), &amp;
                                pc(bounds%begp:), pn(bounds%begp:), __LINE__, &amp;
                                c13=c13cs%leafc_patch, c14=c14cs%leafc_patch, &amp;
                                pc13=pc13(bounds%begp:), pc14=pc14(bounds%begp:) )

which I&apos;m pretty sure means that the problem is in leafn_patch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8116</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-07-06 13:26:36 -0600</bug_when>
    <thetext>Oops, I copied the wrong test name. The failure is actually in:

ERS_Ly5_P72x1.f10_f10_musgs.IHistClm45BgcCrop.cheyenne_intel.clm-cropMonthOutput</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8117</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-07-06 13:28:13 -0600</bug_when>
    <thetext>This test was newly added in this branch, in order to maintain a long production test of CLM45 in the test list.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8200</commentid>
    <comment_count>3</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-09-08 15:23:53 -0600</bug_when>
    <thetext>Danica and Keith found they needed to do the following to get simulations to run:

 It sets the cnegcrit to -600 and nnegcrit to -60

That&apos;s much larger than we are comfortable with. But, this has been how the model has worked for some time, we just didn&apos;t notice it as we didn&apos;t check for negative values for C and N variables.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8219</commentid>
    <comment_count>4</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-09-19 10:53:26 -0600</bug_when>
    <thetext>Fixed in clm4_5_16_r255</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8295</commentid>
    <comment_count>5</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-10-25 07:45:58 -0600</bug_when>
    <thetext>This test is still failing in my branch off of r260, seemingly for the same reason: the death is from this call:

      call TruncateCandNStates( bounds, filter_soilp, num_soilp, cs%leafc_patch(bounds%begp:bounds%endp), &amp;
                                ns%leafn_patch(bounds%begp:bounds%endp), &amp;
                                pc(bounds%begp:), pn(bounds%begp:), __LINE__, &amp;
                                c13=c13cs%leafc_patch, c14=c14cs%leafc_patch, &amp;
                                pc13=pc13(bounds%begp:), pc14=pc14(bounds%begp:) )</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8296</commentid>
    <comment_count>6</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-10-25 07:46:59 -0600</bug_when>
    <thetext>It looks like the proposed changes didn&apos;t make it into the code:

  real(r8), public :: ccrit    =  1.e-8_r8              ! critical carbon state value for truncation (gC/m2)
  real(r8), public :: cnegcrit = -6.e+1_r8              ! critical negative carbon state value for abort (gC/m2)
  real(r8), public :: ncrit    =  1.e-8_r8              ! critical nitrogen state value for truncation (gN/m2)
  real(r8), public :: nnegcrit = -6.e+0_r8              ! critical negative nitrogen state value for abort (gN/m2)</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2488</bug_id>
          
          <creation_ts>2017-07-06 13:16:00 -0600</creation_ts>
          <short_desc>Floating overflow in SoilBiogeochemNitrifDenitrifMod.F90</short_desc>
          <delta_ts>2017-09-14 13:57:09 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>cdkoven</cc>
    
    <cc>dlawren</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8114</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-07-06 13:16:08 -0600</bug_when>
    <thetext>On the compsetchanges branch (soon to be clm4_5_16_r249), the following tests are failing:

SMS_Ld5_D_P24x1.f10_f10_musgs.IHistClm50Bgc.hobart_nag.clm-decStart
ERP_D_P24x1.f10_f10_musgs.IHistClm50Bgc.hobart_nag.clm-decStart
ERP_D.f10_f10_musgs.IHistClm50Bgc.yellowstone_gnu.clm-decStart

The two hobart_nag tests point to line 443 of SoilBiogeochemNitrifDenitrifMod.F90. The last one dies in the same module; no line numbers are available, but my guess is that it&apos;s the same problem.

This death occurs in this block of code:

            if ( soil_co2_prod(c,j) &gt; 0 ) then
               ratio_no3_co2(c,j) = smin_no3_massdens_vr(c,j) / soil_co2_prod(c,j)
            else
               ! fucntion saturates at large no3/co2 ratios, so set as some nominally large number
               ratio_no3_co2(c,j) = 100._r8
            endif

where line 443 is:

               ratio_no3_co2(c,j) = smin_no3_massdens_vr(c,j) / soil_co2_prod(c,j)

Probably the conditional needs to be changed so that if soil_co2_prod is *close* to 0, some alternative is used, but this needs some scientific input.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8121</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-07-07 15:38:10 -0600</bug_when>
    <thetext>I looked into the case on yellowstone with gnu in the ddt debugger, and soil_co2_prod(c,j) is order 1.e-317, so extremely small, while smin_no3_massdens_vr(c,j) was order 1.e-3.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8208</commentid>
    <comment_count>2</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-09-14 13:57:09 -0600</bug_when>
    <thetext>Here&apos;s the fix I have on a branch that I&apos;ll bring to the trunk...

Index: soilbiogeochem/SoilBiogeochemNitrifDenitrifMod.F90
===================================================================
--- soilbiogeochem/SoilBiogeochemNitrifDenitrifMod.F90	(revision 86613)
+++ soilbiogeochem/SoilBiogeochemNitrifDenitrifMod.F90	(working copy)
@@ -439,7 +439,7 @@
             ratio_k1(c,j) = max(1.7_r8, 38.4_r8 - 350._r8 * diffus(c,j))
 
             ! ratio function (figure 7c)
-            if ( soil_co2_prod(c,j) &gt; 0 ) then
+            if ( soil_co2_prod(c,j) &gt; 1.0e-9_r8 ) then
                ratio_no3_co2(c,j) = smin_no3_massdens_vr(c,j) / soil_co2_prod(c,j)
             else
                ! fucntion saturates at large no3/co2 ratios, so set as some nominally large number</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2486</bug_id>
          
          <creation_ts>2017-07-06 08:53:00 -0600</creation_ts>
          <short_desc>Failure in camdenNJ test in prebeta test list</short_desc>
          <delta_ts>2017-10-03 09:45:59 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>fischer</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8106</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-07-06 08:53:43 -0600</bug_when>
    <thetext>This test fails:

ERI_D_Ld9.1x1_camdenNJ.I2000Clm50BgcCru.cheyenne_intel.clm-default

with the following traceback:

0: NetCDF: Invalid dimension ID or name
0:Image              PC                Routine            Line        Source
0:cesm.exe           0000000004902E6D  Unknown               Unknown  Unknown
0:cesm.exe           0000000004342276  pio_support_mp_pi         120  pio_support.F90
0:cesm.exe           0000000004340A2C  pio_utils_mp_chec          74  pio_utils.F90
0:cesm.exe           000000000430CE8E  nf_mod_mp_pio_inq        1288  nf_mod.F90
0:cesm.exe           0000000000C1F93F  ncdio_pio_mp_chec         360  ncdio_pio.F90.in
0:cesm.exe           0000000000D755E1  surfrdmod_mp_surf         535  surfrdMod.F90
0:cesm.exe           0000000000D71E52  surfrdmod_mp_surf         414  surfrdMod.F90
0:cesm.exe           00000000008AD2BF  clm_initializemod         181  clm_initializeMod.F90
0:cesm.exe           00000000008432A9  lnd_comp_mct_mp_l         198  lnd_comp_mct.F90
0:cesm.exe           000000000045B981  component_mod_mp_         227  component_mod.F90
0:cesm.exe           0000000000426B62  cesm_comp_mod_mp_        1179  cesm_comp_mod.F90
0:cesm.exe           000000000045282C  MAIN__                     63  cesm_driver.F90

This is in the prebeta test list. We don&apos;t have any 1x1_camdenNJ tests in the aux_clm test list. I&apos;m not sure whether we want to get this working (and add it to the aux_clm test list) or just drop support for camdenNJ.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8107</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-07-06 08:58:27 -0600</bug_when>
    <thetext>(This is on CLM&apos;s compsetchanges branch, which is about to come to the trunk.)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8112</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-07-06 13:06:12 -0600</bug_when>
    <thetext>I see that we were also missing a camdenNJ test in the aux_clm45 test suite prior to the compsetchanges branch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8251</commentid>
    <comment_count>3</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-10-03 09:45:59 -0600</bug_when>
    <thetext>With recent versions of cime, this fails with

      ERROR: Need to provide valid mapping file between glc and lnd in xml variable glc2lnd_smapname 

This points out another problem with this test: This single-point case should be using a compset with SGLC, not CISM.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2485</bug_id>
          
          <creation_ts>2017-07-05 18:41:00 -0600</creation_ts>
          <short_desc>CLM&apos;s &apos;ed&apos; testlist still has old-style compsets</short_desc>
          <delta_ts>2017-07-05 18:41:28 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>erik</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8105</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-07-05 18:41:28 -0600</bug_when>
    <thetext>On CLM&apos;s compsetchanges branch, we have updated most test lists to use the new compset names. However, the &apos;ed&apos; testlist still mostly has old-style compsets. This should either be changed or this testlist should be deleted.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2483</bug_id>
          
          <creation_ts>2017-07-03 14:04:00 -0600</creation_ts>
          <short_desc>Improve procedure for creating new initial conditions files for LII tests</short_desc>
          <delta_ts>2017-07-06 14:26:02 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>erik</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8099</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-07-03 14:04:11 -0600</bug_when>
    <thetext>Currently, to produce new initial conditions files for LII tests (when the old file becomes incompatible with the new model configuration), we run a case with use_init_interp = .true. and take the finidat_interp_dest.nc file to produce the new initial conditions file. This feels a bit risky to me: It feels like there could be cases where the LII test will pass with a file created in this way, but would fail with an initial conditions file that was generated from a multi-year spinup and was not run through init_interp.

One example I can think of is: If a variable mistakenly has interp_flag=&apos;skip&apos;, then its value on finidat_interp_dest.nc would be its cold start value. Then a future LII test would fail to catch that it had interp_flag=&apos;skip&apos;, because the value would be the cold start value in both cases of the LII test. (I&apos;m not super-concerned about this, because the LII test would presumably have been failing before the recreation of initial conditions in this scenario.)

So it feels like we should come up with a procedure for recreating LII initial conditions that gives us files that have been through at least a few years of spinup, rather than using the finidat_interp_dest files for this purpose.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2475</bug_id>
          
          <creation_ts>2017-06-13 20:46:00 -0600</creation_ts>
          <short_desc>Should SSP test set HIST_OPTION, HIST_N and some other variables?</short_desc>
          <delta_ts>2017-06-13 20:47:00 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8076</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-06-13 20:46:37 -0600</bug_when>
    <thetext>In moving the SSP test into CLM, I noticed that it doesn&apos;t set HIST_OPTION or HIST_N. All other system tests set these in order to produce and compare cpl hist files. Is this omission intentional, or should this be made consistent with the other tests in this respect?

Other common options missing from SSP are:

    &lt;CONTINUE_RUN&gt;FALSE&lt;/CONTINUE_RUN&gt;

(not really needed since that&apos;s the default, but could be added to be consistent with other tests)

    &lt;REST_OPTION&gt;none&lt;/REST_OPTION&gt;

I&apos;m not clear on whether this last one is wanted for SSP.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8077</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-06-13 20:47:00 -0600</bug_when>
    <thetext>By the way: Once I bring my cime-update branch to the trunk, these can be set in components/clm/cime_config/config_tests.xml</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2470</bug_id>
          
          <creation_ts>2017-06-06 15:56:00 -0600</creation_ts>
          <short_desc>CLM is getting the mask from the clm namelist_defaults rather than from top level scripts</short_desc>
          <delta_ts>2017-06-06 15:56:42 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.x Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>dlawren</cc>
    
    <cc>mvertens</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8060</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-06-06 15:56:42 -0600</bug_when>
    <thetext>This is certainly in clm4_5_16_r243 and goes quite a way back. Quite a while ago CLM had to assume the land ocean mask based on the specific grid. The high level CESM scripts have evolved so that now the env variable MASK_GRID is set which can be used to set the mask for all of the standard global grids. The only thing that CLM uses with the mask is to find the appropriate initial conditions file. Since, we are interpolating for CLM45 and CLM50 the assumed mask doesn&apos;t matter. But, it does matter for CLM40, and when we tried to go from testing g16 masks to g17 CLM thought the mask was g16 and so found g16 finidat files, but they are incompatible when running at a g17 mask.

So to fix this we need to make sure components/clm/cime_config/buildnml sends MASK_GRID to clm build-namelist with the -mask option (for standard global grids). When the MASK_GRID is null it should use the assumed mask (which should only be for single point or regional cases).</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2469</bug_id>
          
          <creation_ts>2017-06-05 15:50:00 -0600</creation_ts>
          <short_desc>Cleanup restartvar_{DIMS}d_{TYPE} to ONLY be valid for a 1d interface as we already have a restart_2d_{TYPE}_bounds interface for 2D</short_desc>
          <delta_ts>2017-06-05 15:56:45 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          <dependson>2468</dependson>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>dlawren</cc>
    
    <cc>mvertens</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8057</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-06-05 15:50:59 -0600</bug_when>
    <thetext>restUtilMod.F90.in has two interfaces for restartvars, one should really only be used for the 1d interface and the second for the 2d one. The first one is supposed general, but it doesn&apos;t do enough checking to be correct for a 2d case. The only valid options are 1d and 2d anyway, so generalizing the first to work for both isn&apos;t worth it. So the data array should be data(:) and dim2name removed from the first interface and changed to restartvar_1d_{TYPE}. Note, the other thing that distinguishes the two is the optional arguments: lowerb2, and upperb2 are possible for the 2d case, but not the 1d one. And in the 1d case, dim1name is NOT a required argument like it is in the 2d one (along with dim2name).

Bug 2468 came to be because of this problem since switchdim is really required when dimname2name is set.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8058</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-06-05 15:56:45 -0600</bug_when>
    <thetext>You could also save duplication between the two methods, by having a private subroutine call that both interfaces would call for the part that&apos;s identical between both. The main guts of the two are completely duplicated. It would make the two interfaces clearer if the bulk of the differences between the two just had to do with the 1d versus 2d difference. And that could be accomplished by a private subroutine that both call.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2467</bug_id>
          
          <creation_ts>2017-06-01 12:01:00 -0600</creation_ts>
          <short_desc>Case on non-year boundary dies with error about ignoring ic_date for a crop case, even though for a branch or hybrid case</short_desc>
          <delta_ts>2017-06-12 14:50:28 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P1</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>klindsay</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8050</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-06-01 12:01:20 -0600</bug_when>
    <thetext>Keith Lindsay ran into a problem where CLM&apos;s build-namelist died with an error about ignoring the IC-date for a crop case even though it&apos;s a branch case. The error condition applies when trying to find an finidat file not for a branch or hybrid case, or a case where the finidat file is provided.

Here&apos;s the email communication from Keith, and my reply
Hi,

I&apos;m trying to do a coupled run that is a branch off of another run of mine. The non-ocean codebase is the same as Cecile&apos;s B1850 149 case.

CASEROOT=/glade/p/work/klindsay/cesm20_cases/B1850/b.e20.B1850.f09_g17.pi_control.all.149.marbl_dev_klindsay_n60.C

user_nl_clm is the same as Cecile&apos;s, except that I&apos;ve commented out the setting of finidat, as I want to use the IC from the run that I&apos;m branching from.

When I run preview_namelists, I get the following error from CLM build-namelist

err=ERROR : CLM build-namelist::CLMBuildNamelist::setup_logic_initial_conditions() : using ignore_ic_date is incompatable with crop!

The run that I&apos;m branching off of is also a branch, and that worked fine. The only difference between the runs is RUN_REFDATE.
In the case that works, RUN_REFDATE is on a year boundary, and in this case, RUN_REFDATE is not, it is 0031-01-03.
I&apos;m not sure why this would cause a problem, if it is the problem.

I&apos;m inferring that I&apos;m doing something non-supported, but I don&apos;t what that is.
I&apos;m not knowingly setting ignore_ic_date, I don&apos;t see it anywhere in $CASEROOT.

I could use some help here.

Thanks, Keith

Erik Kluzek &lt;erik@ucar.edu&gt;
11:55 AM (1 minute ago)

to Keith, Keith, David 

Categorize this message as:Personal 
Never show this again
Keith

Since, you are starting up from a reference case (so finding an finidat file doesn&apos;t matter) this is CLM build-namelist aborting on something it really shouldn&apos;t. I&apos;m going to create a bug report on this issue.

But, for your immediate problem you can either remove the setting of &quot;-ignore_ic_date&quot; in CLM buildnml...

/glade/p/cgd/oce/people/klindsay/svn_co/cesm2_0_alpha06h_finalclm50paramsfile_n26_clm4_5_15_r233_mosart1_0_23_marbl_dev_klindsay_n60/components/clm/cime_config/buildnml

where it sets the variable &quot;ignore&quot; to either &quot;-ignore_ic_year&quot; or &quot;-ignore_ic_date&quot;.

Or you could remove the abort in 

/glade/p/cgd/oce/people/klindsay/svn_co/cesm2_0_alpha06h_finalclm50paramsfile_n26_clm4_5_15_r233_mosart1_0_23_marbl_dev_klindsay_n60/components/clm/bld/CLMBuildNamelist.pm

by removing or commenting out the line...

fatal_error(&quot;using ignore_ic_date is incompatable with crop!&quot;);</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8051</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-06-01 12:53:27 -0600</bug_when>
    <thetext>Keith points out the following, which indicates a related but slightly different issue:

Thanks for the quick response. The latter work-around has me up and running.

FYI, the former work-around led to the error message:
err=ERROR : CLM build-namelist::CLMBuildNamelist::setup_logic_initial_conditions() : use_init_interp is set BUT finidat is NOT, need to set both
It looks like build-namelist was picking up use_init_interp=.true. from namelist_defaults.
I guess I could have worked around this by explicitly setting use_init_interp=.false. in user_nl_clm.
But I wonder why it should be necessary to make such settings on a branch run.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2464</bug_id>
          
          <creation_ts>2017-05-19 12:12:00 -0600</creation_ts>
          <short_desc>allowlakeprod are outputing standard variables instead of the &quot;lake&quot; specific versions...</short_desc>
          <delta_ts>2017-05-20 08:32:00 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>cdkoven</cc>
    
    <cc>dlawren</cc>
    
    <cc>rfisher</cc>
    
    <cc>subin</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8035</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-05-19 12:12:34 -0600</bug_when>
    <thetext>When allowlakeprod is on, the lake specific version of variables should be output, and yet it&apos;s outputting the non-lake versions which already are output.

This is in clm4_5_16_r241. I need someone to look at this and check if I&apos;m right about this or not. I noticed this looking at the code for other issues.

[erik@yslogin1 biogeochem]$ svn diff ch4Mod.F90 
Index: ch4Mod.F90
===================================================================
--- ch4Mod.F90	(revision 85170)
+++ ch4Mod.F90	(working copy)
@@ -602,45 +602,45 @@
     end if
 
     if (hist_wrtch4diag .and. allowlakeprod) then
-       this%ch4_prod_depth_sat_col(begc:endc,1:nlevgrnd) = spval
+       this%ch4_prod_depth_lake_col(begc:endc,1:nlevgrnd) = spval
        call hist_addfld2d (fname=&apos;CH4_PROD_DEPTH_LAKE&apos;, units=&apos;mol/m3/s&apos;, type2d=&apos;levgrnd&apos;, &amp;
             avgflag=&apos;A&apos;, long_name=&apos;CH4 production in each soil layer, lake col. only&apos;, &amp;
-            ptr_col=this%ch4_prod_depth_sat_col)
+            ptr_col=this%ch4_prod_depth_lake_col)
     end if
 
     if (hist_wrtch4diag .and. allowlakeprod) then
-       this%conc_ch4_sat_col(begc:endc,1:nlevgrnd) = spval
+       this%conc_ch4_lake_col(begc:endc,1:nlevgrnd) = spval
        call hist_addfld2d (fname=&apos;CONC_CH4_LAKE&apos;, units=&apos;mol/m3&apos;, type2d=&apos;levgrnd&apos;, &amp;
             avgflag=&apos;A&apos;, long_name=&apos;CH4 Concentration each soil layer, lake col. only&apos;, &amp;
-            ptr_col=this%conc_ch4_sat_col)
+            ptr_col=this%conc_ch4_lake_col)
     end if
 
     if (hist_wrtch4diag .and. allowlakeprod) then
-       this%conc_o2_sat_col(begc:endc,1:nlevgrnd) = spval
+       this%conc_o2_lake_col(begc:endc,1:nlevgrnd) = spval
        call hist_addfld2d (fname=&apos;CONC_O2_LAKE&apos;, units=&apos;mol/m3&apos;, type2d=&apos;levgrnd&apos;, &amp;
             avgflag=&apos;A&apos;, long_name=&apos;O2 Concentration each soil layer, lake col. only&apos;, &amp;
-            ptr_col=this%conc_o2_sat_col)
+            ptr_col=this%conc_o2_lake_col)
     end if
 
     if (hist_wrtch4diag .and. allowlakeprod) then
-       this%ch4_surf_diff_sat_col(begc:endc) = spval
+       this%ch4_surf_diff_lake_col(begc:endc) = spval
        call hist_addfld1d (fname=&apos;CH4_SURF_DIFF_LAKE&apos;, units=&apos;mol/m2/s&apos;,  &amp;
             avgflag=&apos;A&apos;, long_name=&apos;diffusive surface CH4 flux, lake col. only (+ to atm)&apos;, &amp;
-            ptr_col=this%ch4_surf_diff_sat_col)
+            ptr_col=this%ch4_surf_diff_lake_col)
     end if
 
     if (hist_wrtch4diag .and. allowlakeprod) then
-       this%ch4_surf_ebul_sat_col(begc:endc) = spval
+       this%ch4_surf_ebul_lake_col(begc:endc) = spval
        call hist_addfld1d (fname=&apos;CH4_SURF_EBUL_LAKE&apos;, units=&apos;mol/m2/s&apos;,  &amp;
             avgflag=&apos;A&apos;, long_name=&apos;ebullition surface CH4 flux, lake col. only (+ to atm)&apos;, &amp;
-            ptr_col=this%ch4_surf_ebul_sat_col)
+            ptr_col=this%ch4_surf_ebul_lake_col)
     end if
 
     if (hist_wrtch4diag .and. allowlakeprod) then
-       this%ch4_oxid_depth_sat_col(begc:endc,1:nlevgrnd) = spval
+       this%ch4_oxid_depth_lake_col(begc:endc,1:nlevgrnd) = spval
        call hist_addfld2d (fname=&apos;CH4_OXID_DEPTH_LAKE&apos;, units=&apos;mol/m2/s&apos;, type2d=&apos;levgrnd&apos;,  &amp;
             avgflag=&apos;A&apos;, long_name=&apos;CH4 oxidation in each soil layer, lake col. only&apos;, &amp;
-            ptr_col=this%ch4_oxid_depth_sat_col)
+            ptr_col=this%ch4_oxid_depth_lake_col)
     end if
 
     if (hist_wrtch4diag) then</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8036</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-05-19 12:41:29 -0600</bug_when>
    <thetext>If this is a legit problem it goes back to the beginning of this work. The changes below also do work.

It also appears that we don&apos;t have any tests for allowlakeprod.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8037</commentid>
    <comment_count>2</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-05-19 13:04:14 -0600</bug_when>
    <thetext>Add Zack to the CC list.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8038</commentid>
    <comment_count>3</comment_count>
    <who name="David Lawrence">dlawren</who>
    <bug_when>2017-05-20 08:32:00 -0600</bug_when>
    <thetext>Zack is no longer working in the field so is not likely to comment.  We do not and have not used the lake production code so if this is a bug, it hasn&apos;t affected anything.  We have no current plans to use it, either, though if the fix is easy, we should go ahead and do it.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2461</bug_id>
          
          <creation_ts>2017-05-13 20:16:00 -0600</creation_ts>
          <short_desc>Multi-instance tests failing sporadically</short_desc>
          <delta_ts>2017-06-13 11:40:13 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>fischer</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8020</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-05-13 20:16:15 -0600</bug_when>
    <thetext>In the last few CLM tags, we have found that multi-instance tests fail sporadically.

This includes

NCK_Ld1.f10_f10.ICRUCLM45.cheyenne_intel.clm-default
ERI_N2_Ld9.f19_g16.ICRUCLM45BGCCROP.cheyenne_intel

and sometimes their yellowstone versions (according to Ben).

I wonder if this is due to bug 2289.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8073</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-06-13 11:40:13 -0600</bug_when>
    <thetext>Chris Fisher is seeing problems here as well...

Hi Erik,

We have a multi-instance test on cheyenne that has always been failing.  I&apos;m finally taking a closer look at it now.
The test is NCK_Ld1.f10_f10.ICRUCLM45.cheyenne_intel.clm-default and it passes on yellowstone.  If you don&apos;t know,
the NCK test runs a single instance case, the reruns with two instance cases, and compares to the single instance case.
I&apos;m getting answer changes in the first instance, but the second instance is bfb.  If I change the processor layout on the 
cheyenne test to match the layout on yellowstone, I can get the test to pass.

I&apos;ve traced the answer changes to Sl_t, Sl_snowh and Fall_lwup at time step zero.  So I think something is going on during
the initialization for Sl_t (lnd2atm_inst%t_rad_grc), Sl_snowh (lnd2atm_inst%h2osno_grc), and  Fall_lwup(lnd2atm_inst%eflx_lwrad_out_grc)
that&apos;s sensitive to the number of mpi tasks.  Do you have any more of idea what&apos;s going on?

Thanks</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2455</bug_id>
          
          <creation_ts>2017-05-09 12:44:00 -0600</creation_ts>
          <short_desc>PGI specific error at initialization</short_desc>
          <delta_ts>2017-05-09 12:44:28 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7985</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-05-09 12:44:28 -0600</bug_when>
    <thetext>Even after fixing bug 2454. PGI i showing problems on hobart with clm4_5_16_r237. It dies at startup with this error...

(   45)  h025.cgd.ucar.edu
(   46)  h025.cgd.ucar.edu
(   47)  h025.cgd.ucar.edu
 ERROR:
 GETFIL: FAILED to get /fs/cgd/csm/inputdata/share/domains/domain.clm/domain.lnd.fv10x15_USGS.110713.nc
 ERROR:


There doesn&apos;t seem to be anything wrong with this file, nor is it clear why this works in clm4_5_15_r236 and fails in this version.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2453</bug_id>
          
          <creation_ts>2017-05-05 13:04:00 -0600</creation_ts>
          <short_desc>Memory error with restart variable vcmx25t</short_desc>
          <delta_ts>2017-05-05 13:04:12 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>dlawren</cc>
    
    <cc>jedwards</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7980</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-05-05 13:04:12 -0600</bug_when>
    <thetext>clm4_5_15_r236. DDT detects a memory error deep in the PIO stack for this test...

SMS_D_Ld1.f10_f10.I1850CRUCLM50BGCCROP.yellowstone_intel.clm-clm50KSinkMOut.20170505_104938_gzzixi

It comes from this in Photosynthesis Restart read line 759

   call restartvar(ncid=ncid, flag=flag, varname=&apos;vcmx25t&apos;, xtype=ncd_double,  &amp;
         dim1name=&apos;pft&apos;, long_name=&apos;canopy profile of vcmax25&apos;, &amp;
         units=&apos;umol/m2/s&apos;, &amp;
         interpinic_flag=&apos;interp&apos;, readvar=readvar, data=this%luvcmax25top_patch)

The memory error it gives is:

Process 1: 

Memory error detected in /usr/lib64/libmlx4​-rdmav2.so:

mprotect failed

And then

Process 1: 

Process stopped in ​_​_memset​_sse2 from /lib64/libc.so.6 with signal SIGSEGV ​(Segmentation fault)​.

Reason/Origin: invalid permissions for mapped object
Your program will probably be terminated if you continue.
You can use the stack controls to see what the process was doing at the time.

The test itself fails outside the memory error, and it&apos;s unable to run beyond the memory problem. The test that is run in this case is run without DEBUG and hence runs to completion. 

This was brought in at clm4_5_15_r232. I tried with clm4_5_14_r231 and I get a similar error for soilresis_col. So I&apos;m documenting this error and will get back to it later.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2447</bug_id>
          
          <creation_ts>2017-04-30 22:10:00 -0600</creation_ts>
          <short_desc>Floating overflow for CLM50CROP case on hobart_nag in Photosynthesis</short_desc>
          <delta_ts>2017-09-14 13:52:50 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          <blocked>2500</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>dlawren</cc>
    
    <cc>mvertens</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7966</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-04-30 22:10:31 -0600</bug_when>
    <thetext>The case SMS_Ld5_D_P24x1.f10_f10.IHISTCLM50BGC.hobart_nag.clm-monthly fails with clm4_5_15_r236 with new fsurdat interpolated finidat datasets. It works as before, if the interpolated finidat file is not used as was done before.

The cesm.log file has:

 rtm decomp info proc =  23  begr =  249392  endr =  259200  numr =  9809
                 proc =  23  begrl=  83471  endrl=  84511  numrl=  1041
                 proc =  23  begro=  165922  endro=  174689  numro=  8768
 Opened existing file /fs/cgd/csm/inputdata/lnd/clm2/rtmdata/rdirc_0.5x0.5_simyr2000_slpmxvl_c120717.nc 917504
 Opened existing file /fs/cgd/csm/inputdata/rof/rtm/initdata/rtmi.I1850CRUCLM45BGC.0241-01-01.R05_simyr1850_c130515.nc 917504
Runtime Error: *** Runtime Error: *** Arithmetic exception: Floating overflow - aborting
/fs/cgd/data0/erik/clm_latestclm50datasets/components/clm/src/biogeophys/PhotosynthesisMod.F90, line 2899: Error occurred in PHOTOSYNTHESISMOD:PHOTOSYNTHESISHYDRAULICSTRESS
/fs/cgd/data0/erik/clm_latestclm50datasets/components/clm/src/biogeophys/CanopyFluxesMod.F90, line 835: Called by CANOPYFLUXESMOD:CANOPYFLUXES
/fs/cgd/data0/erik/clm_latestclm50datasets/components/clm/src/main/clm_driver.F90, line 542: Called by CLM_DRIVER:CLM_DRV
/fs/cgd/data0/erik/clm_latestclm50datasets/components/clm/src/cpl/lnd_comp_mct.F90, line 444: Called by LND_COMP_MCT:LND_RUN_MCT
/fs/cgd/data0/erik/clm_latestclm50datasets/c</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7967</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-04-30 22:11:52 -0600</bug_when>
    <thetext>The line referred to is the calculation of kn(p) when dayl_factor is not exactly zero:

         if (dayl_factor(p) .eq. 0._r8) then
            kn(p) =  0._r8
         else
            kn(p) = exp(0.00963_r8 * vcmax25top/dayl_factor(p) - 2.43_r8)
         end if

We may need to increase the tolerance of how close dayl_factor needs to be to zero is an initial guess of the problem.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8018</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-05-13 20:06:52 -0600</bug_when>
    <thetext>This test just passed for me, and it looks like it passed in Ben&apos;s testing of clm4_5_16_r238. However, my guess is that this could pop up again in the future unless this code is made more robust. Erik&apos;s proposed fix sounds good to me.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8019</commentid>
    <comment_count>3</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-05-13 20:07:21 -0600</bug_when>
    <thetext>So I&apos;m removing this from the xfail list, but keeping this bug open.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8207</commentid>
    <comment_count>4</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-09-14 13:52:50 -0600</bug_when>
    <thetext>Here&apos;s the fix I&apos;d like to bring to the trunk, and have on a branch.

Index: PhotosynthesisMod.F90
===================================================================
--- PhotosynthesisMod.F90	(revision 86613)
+++ PhotosynthesisMod.F90	(working copy)
@@ -1363,7 +1363,7 @@
          ! But not used as defined here if using sun/shade big leaf code. Instead,
          ! will use canopy integrated scaling factors from SurfaceAlbedo.
 
-         if (dayl_factor(p) .eq. 0._r8) then
+         if (dayl_factor(p)  &lt; 1.0e-12_r8) then
             kn(p) =  0._r8
          else
             kn(p) = exp(0.00963_r8 * vcmax25top/dayl_factor(p) - 2.43_r8)</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2442</bug_id>
          
          <creation_ts>2017-04-12 10:57:00 -0600</creation_ts>
          <short_desc>CLM deaths in restFile_enddef on cheyenne in some cases due to overflow of float to integer on restart</short_desc>
          <delta_ts>2017-07-12 19:29:50 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.x Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          <blocked>2445</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>cacraig</cc>
    
    <cc>eaton</cc>
    
    <cc>fischer</cc>
    
    <cc>jedwards</cc>
    
    <cc>mvertens</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7922</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-04-12 10:57:58 -0600</bug_when>
    <thetext>The following test fails on cheyenne due to overflow in conversion to a 4-byte integer.

ERS_D_Ld5.f09_g16.ICLM45ED.cheyenne_intel.clm-edTest

The traceback is...

1: RTM river discharge into ocean: ICE
1: pionfput_mod.F90         128           1           4         255           1
1: m3/s
1: pionfput_mod.F90         128           1           4           1           1 A
1: pio_support::pio_die:: myrank=          -1 : ERROR: nf_mod.F90:        1508 :
1: Overflow when type cast to 4-byte integer.
73: pio_support::pio_die:: myrank=          -1 : ERROR: nf_mod.F90:        1508 :
73: Overflow when type cast to 4-byte integer.
37: pio_support::pio_die:: myrank=          -1 : ERROR: nf_mod.F90:        1508 :
37: Overflow when type cast to 4-byte integer.
109: pio_support::pio_die:: myrank=          -1 : ERROR: nf_mod.F90:        1508 :
109: Overflow when type cast to 4-byte integer.
37:Image              PC                Routine            Line        Source
37:cesm.exe           0000000003A595ED  Unknown               Unknown  Unknown
37:cesm.exe           0000000003498576  pio_support_mp_pi         120  pio_support.F90
37:cesm.exe           0000000003496920  pio_utils_mp_chec          59  pio_utils.F90
37:cesm.exe           0000000003465CDD  nf_mod_mp_pio_end        1508  nf_mod.F90
37:cesm.exe           0000000000B9E118  ncdio_pio_mp_ncd_         386  ncdio_pio.F90.in
37:cesm.exe           0000000000C28127  restfilemod_mp_re         731  restFileMod.F90
37:cesm.exe           0000000000C20C30  restfilemod_mp_re         109  restFileMod.F90
37:cesm.exe           00000000008B18E2  clm_driver_mp_clm        1197  clm_driver.F90</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7931</commentid>
    <comment_count>1</comment_count>
    <who name="Ben Andre">andre</who>
    <bug_when>2017-04-14 11:52:42 -0600</bug_when>
    <thetext>We discussed this on the fates SW call, and the feeling was that the restart interface has change so much that it&apos;s not worth spending a lot of time on. If a quick look at this points to a an issue with fates, then please mark as expected fail and cheyenne will be tested and fixed with the upcoming fates reintegration.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7936</commentid>
    <comment_count>2</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-04-18 17:46:51 -0600</bug_when>
    <thetext>In the DDT debugging session I learned more about the problem here. The error happens on the PIO end definition call. I think what the problem is that the dimension of some variables exceed 32-byte integers (multiplying the dimensions together). numCohorts for this case is about 33 million. So multiplying by a thousand you exceed a signed 4-byte integer. It looks like the open statements are supposed to be opening with large file support 64BIT_OFFSET, so this shouldn&apos;t be a limitation, and yet it is.

The call it dies in is restFile_enddef in restFile_write...

    call subgridRestWrite(bounds, ncid, flag=&apos;define&apos; )

    call accumulRest( ncid, flag=&apos;define&apos; )

    call clm_instRest(bounds, ncid, flag=&apos;define&apos;)

    if (present(rdate)) then
       call hist_restart_ncd (bounds, ncid, flag=&apos;define&apos;, rdate=rdate )
    end if

    call restFile_enddef( ncid )

I tried building everything with 8 byte integers with &quot;-i8&quot; to the compiler and that failed in trying to resolve overloaded functions based on the data types.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7938</commentid>
    <comment_count>3</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-04-19 00:59:30 -0600</bug_when>
    <thetext>Jim suggested I try opening up 64BIT_DATA rather than 64BIT_OFFSET. So I tried that and it fails the same way.

Index: ../../../components/clm/src/main/ncdio_pio.F90.in
===================================================================
--- ../../../components/clm/src/main/ncdio_pio.F90.in	(revision 84459)
+++ ../../../components/clm/src/main/ncdio_pio.F90.in	(working copy)
@@ -24,7 +24,7 @@
   use perf_mod       , only : t_startf, t_stopf
   use fileutils      , only : getavu, relavu
   use mct_mod        , only : mct_gsMap, mct_gsMap_lsize, mct_gsMap_gsize, mct_gsMap_orderedPoints
-  use pio            , only : file_desc_t, io_desc_t, iosystem_desc_t, pio_64bit_offset
+  use pio            , only : file_desc_t, io_desc_t, iosystem_desc_t, pio_64bit_data
   use pio            , only : pio_bcast_error, pio_char, pio_clobber, pio_closefile, pio_createfile, pio_def_dim
   use pio            , only : pio_def_var, pio_double, pio_enddef, pio_get_att, pio_get_var, pio_global, pio_initdecomp
   use pio            , only : pio_inq_att, pio_inq_dimid, pio_inq_dimlen, pio_inq_dimname, pio_inq_vardimid, pio_inq_varid
@@ -259,7 +259,7 @@
        end if
     end if
 
-    ierr = pio_createfile(pio_subsystem, file, my_io_type, fname, ior(PIO_CLOBBER,PIO_64BIT_OFFSET))
+    ierr = pio_createfile(pio_subsystem, file, my_io_type, fname, ior(PIO_CLOBBER,PIO_64BIT_DATA))
 
     if(ierr/= PIO_NOERR) then
        call shr_sys_abort( &apos; ncd_pio_createfile ERROR: Failed to open file to write: &apos;//trim(fname))</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7952</commentid>
    <comment_count>4</comment_count>
    <who name="Ben Andre">andre</who>
    <bug_when>2017-04-25 18:09:18 -0600</bug_when>
    <thetext>TL,DR: A work around for this problem is to change the edTest to use netcdf instead of pnetcdf.

---------

I followed up on Jim and Erik discussion in Comment 3 by setting both PIO_64BIT_OFFSET and PIO_64BIT_DATA, but it didn&apos;t fix the error:

 
  -    ierr = pio_createfile(pio_subsystem, file, my_io_type, fname, ior(PIO_CLOBBER,PIO_64BIT_OFFSET))
  +    ierr = pio_createfile(pio_subsystem, file, my_io_type, fname, &amp;
  +       ior(ior(PIO_CLOBBER,PIO_64BIT_OFFSET),PIO_64BIT_DATA))
 

This case uses pio1 and pnetcdf by default. Replace pnetcdf for netcdf then this will run to completion:


  $ ./xmlquery PIO_TYPENAME
  	PIO_TYPENAME: [&apos;CPL:pnetcdf&apos;, &apos;ATM:netcdf&apos;, &apos;LND:netcdf&apos;, &apos;ICE:pnetcdf&apos;, &apos;OCN:pnetcdf&apos;, &apos;ROF:pnetcdf&apos;, &apos;GLC:pnetcdf&apos;, &apos;WAV:pnetcdf&apos;, &apos;ESP:pnetcdf&apos;]


It looks like yellowstone and cheyenne are using:

* cheyenne - pnetcdf 1.8.0

* yellowstone - pnetcdf 1.6.1

Looking at the release notes for pnetcdf:

https://trac.mcs.anl.gov/projects/parallel-netcdf/wiki/ReleaseNotes-1.7.0

  Other updates:

    * Conform with netCDF on the maximal dimension size for CDF-2 file format to be (2^32 - 4)

According to the netcdf doc

http://www.unidata.ucar.edu/software/netcdf/docs/netcdf_introduction.html

  NetCDF Classic Format
    ...
    For these users, 64-bit offset format is a natural choice. It greatly eases the size restrictions of netCDF classic files (see 64 bit Offset Limitations).

    Files with the 64-bit offsets are identified with a “CDF\002” at the beginning of the file. In this documentation this format is called “64-bit offset format.”

Looking at the hexdump of the file that I think is being written seems to indicate that this is a 64bit file:

    $ hexdump -C ERS_D_Ld5.f09_g16.ICLM45ED.cheyenne_intel.clm-edTest.junk-2442.clm2.rh0.0001-01-04-00000.nc 
    00000000  43 44 46 02 00 00 00 00  00 00 00 0a 00 00 00 1c  |CDF.............|

So I guess I don&apos;t really understand the netcdf file formats, but it seems like a contradiction that pnetcdf is now consistent with netcdf v2 format, but limits the size to 32 bits. Maybe something changed between pnetcdf 1.6 and 1.8 that we need to update the internals of the I/O stack?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7956</commentid>
    <comment_count>5</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-04-26 16:06:01 -0600</bug_when>
    <thetext>I talked to Ben about this afternoon. Jim has an idea about what is happening, and something bad in our definitions for ED is causing it to output in NetCDF2 format. This is also due to bad behavior on pnetcdf&apos;s, which is why going to netcdf works.

What I realized in 2445, is that even on yellowstone some of the files are being produced but I can&apos;t read them (a ncdump tells me the file is in a unrecognized format). So this problem affects yellowstone as well as it&apos;s creating files you can&apos;t read. cheyenne is actually being more courteous and stopping rather than creating mystery files that are unreadable. Although CLM is apparently able to read them because restart tests seem to work.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7957</commentid>
    <comment_count>6</comment_count>
    <who name="Jim Edwards">jedwards</who>
    <bug_when>2017-04-26 16:09:44 -0600</bug_when>
    <thetext>I think that you&apos;ll find that the files are unreadable only in certain versions of ncdump. You may need to load a netcdf mopdule so that you point to a newer version of this tool.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7958</commentid>
    <comment_count>7</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-04-26 17:43:26 -0600</bug_when>
    <thetext>(In reply to Jim Edwards from comment #6)
&gt; I think that you&apos;ll find that the files are unreadable only in certain
&gt; versions of ncdump. You may need to load a netcdf mopdule so that you point
&gt; to a newer version of this tool.

OK, I was able to find a version of ncdump that would work. Although only the version 4.4 versions would work, all of the older ones wouldn&apos;t. They give this...

ncdump -h $MYSCR/SMS_D_Ld5.f45_f45.ICLM45ED.yellowstone_intel.clm-edTest.20170424_133019_2sh1t7/run/SMS_D_Ld5.f45_f45.ICLM45ED.yellowstone_intel.clm-edTest.20170424_133019_2sh1t7.clm2.r.0001-01-06-00000.nc
ncdump: /glade/scratch/erik/SMS_D_Ld5.f45_f45.ICLM45ED.yellowstone_intel.clm-edTest.20170424_133019_2sh1t7/run/SMS_D_Ld5.f45_f45.ICLM45ED.yellowstone_intel.clm-edTest.20170424_133019_2sh1t7.clm2.r.0001-01-06-00000.nc: NetCDF: Unknown file format

But, then tools built on top of netcdf -- like ncview -- won&apos;t necessarily work presumably depending on the version of netcdf they were built with.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7962</commentid>
    <comment_count>8</comment_count>
    <who name="Ben Andre">andre</who>
    <bug_when>2017-04-28 19:18:14 -0600</bug_when>
    <thetext>TL,DR : My recommendation is to remove this test and mark the issue as won&apos;t fix. 

-------

Jim pointed out that the CDF2 format issue I was seeing was because 64bit offset and data are mutually exclusive. I reverted to 64bit data and it is correctly generating a CDF5 format file. So that was a red herring.

I verified that this is a problem with ED specific code by trying a couple of permutations on the test without ED and commenting out the calls to ED restart.

More debugging led me further into the ED restart stack which has been massively refactored in the upcoming fates tag. I ran the failing test on my incoming branch and it passes.

I&apos;m running the full ED/fates test suite on cheyenne this weekend to verify my branch is OK, and I&apos;ll ensure ED/Fates tests work on cheyenne when my tag comes in. My recommendation is to remove this test and mark the issue as won&apos;t fix.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7972</commentid>
    <comment_count>9</comment_count>
    <who name="Ben Andre">andre</who>
    <bug_when>2017-05-02 11:38:13 -0600</bug_when>
    <thetext>Update: I ran all ed and clm tests over the weekend and the results were as follows:

yellowstone:
  aux_clm :
    pass - ERS_D_Ld5.f09_g16.ICLM45ED.yellowstone_intel.clm-edTest

  ed : 
    pass - ERS_D_Ld5.f09_g16.ICLM45ED.yellowstone_gnu.clm-edTest
    pass - ERS_D_Ld5.f09_g16.ICLM45ED.yellowstone_intel.clm-edTest
    pass - ERS_D_Ld5.f09_g16.ICLM45ED.yellowstone_pgi.clm-edTest
    pass - ERS_D_Ld5.f09_g16.ICLM50FATES.yellowstone_gnu.clm-edTest
    pass - ERS_D_Ld5.f09_g16.ICLM50FATES.yellowstone_intel.clm-edTest
    pass - ERS_D_Ld5.f09_g16.ICLM50FATES.yellowstone_pgi.clm-edTest
    pass - ERS_D_Ld5.f19_g16.ICLM45ED.yellowstone_gnu.clm-edTest
    pass - ERS_D_Ld5.f19_g16.ICLM45ED.yellowstone_intel.clm-edTest
    pass - ERS_D_Ld5.f19_g16.ICLM45ED.yellowstone_pgi.clm-edTest
    pass - ERS_D_Ld5.f19_g16.ICLM50FATES.yellowstone_gnu.clm-edTest
    pass - ERS_D_Ld5.f19_g16.ICLM50FATES.yellowstone_intel.clm-edTest
    pass - ERS_D_Ld5.f19_g16.ICLM50FATES.yellowstone_pgi.clm-edTest

cheyenne:
  aux_clm : 
    pass - ERS_D_Ld5.f09_g16.ICLM45ED.cheyenne_intel.clm-edTest
  ed :
    fail - ERS_D_Ld5.f09_g16.ICLM50FATES.cheyenne_intel.clm-edTest
    fail - ERS_D_Ld5.f19_g16.ICLM50FATES.cheyenne_intel.clm-edTest
    pass - ERS_D_Ld5.f19_g16.ICLM45ED.cheyenne_intel.clm-edTest
    pass - ERS_D_Ld5.f09_g16.ICLM45ED.cheyenne_intel.clm-edTest


So, there&apos;s still a problem on cheyenne with high res, but only with clm5fates, not clm45ed.

Differences between clm45 and clm5 from the same test run:

 hexdump -C ../ERS_D_Ld5.f09_g16.ICLM45ED.cheyenne_intel.clm-edTest.C.04281953-edi/run/ERS_D_Ld5.f09_g16.ICLM45ED.cheyenne_intel.clm-edTest.C.04281953-edi.clm2.r.0001-01-04-00000.nc | head
00000000  43 44 46 02 00 00 00 00  00 00 00 0a 00 00 00 10  |CDF.............|

 hexdump -C ../ERS_D_Ld5.f09_g16.ICLM50FATES.cheyenne_intel.clm-edTest.C.04281953-edi/run/ERS_D_Ld5.f09_g16.ICLM50FATES.cheyenne_intel.clm-edTest.C.04281953-edi.clm2.r.0001-01-04-00000.nc | head
00000000  43 44 46 05 00 00 00 00  00 00 00 00 00 00 00 0a  |CDF.............|

Diff-ing the cases, it looks like with clm45 is using netcdf by default, while clm5 is using pnetcdf by default. Reviewing old fates history to figure out why, we encounter an issue a year ago that resulted in just setting all ED compsets to default to netcdf instead of pnetcdf. So, this is probably still broken for all ED/FATES compsets in the upcoming branch.

I spend a all day yesterday trying to track this down further by isolating the variables that cause the problem. I identified a couple of them, but haven&apos;t figured out yet why they are different.

I&apos;ll try to look at this more, but I think I&apos;m going to need a debug build of the I/O stack to understand what pnetcdf is unhappy with.

I need to do some other cleanup stuff to stay on track with the fates reintegration.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8055</commentid>
    <comment_count>10</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-06-02 11:52:20 -0600</bug_when>
    <thetext>Chris is now seeing this same problem in F compsets...

ERP_Ln9.f09_f09.F1850_DONOTUSE.cheyenne_intel.cam-outfrq9s_clm5</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8067</commentid>
    <comment_count>11</comment_count>
    <who name="Chris Fischer">fischer</who>
    <bug_when>2017-06-12 14:39:50 -0600</bug_when>
    <thetext>The only place I&apos;m seeing this error now is in

ERP_Ln9.f09_f09_mg17.FHIST_DEV.cheyenne_intel.cam-outfrq9s_clm5</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8068</commentid>
    <comment_count>12</comment_count>
    <who name="Chris Fischer">fischer</who>
    <bug_when>2017-06-12 14:40:32 -0600</bug_when>
    <thetext>I should also add this is for cesm2_0_alpha06o.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8069</commentid>
    <comment_count>13</comment_count>
    <who name="Cheryl Craig">cacraig</who>
    <bug_when>2017-06-12 15:40:28 -0600</bug_when>
    <thetext>So did CLM come up with a fix for this bug, or did it just &quot;go away&quot;.  Looking back over this exchange, it&apos;s not sounding like its an easy bug to find and fix.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8070</commentid>
    <comment_count>14</comment_count>
    <who name="Ben Andre">andre</who>
    <bug_when>2017-06-12 15:49:47 -0600</bug_when>
    <thetext>It went away.

It was originally only occurring when ED/fates was on. My original thought was that ED was doing something wrong with the indexing or data to cause the overflow, but after debugging it for a while and talking with Jim, we started thinking it was another issue where a struct was being incorrectly copied and something was getting corrupted or dropped. At some point when I was merging this stopped being reproducible, so I assumed it was actually a fates problem that was fixed by the fates restart refactor.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8071</commentid>
    <comment_count>15</comment_count>
    <who name="Jim Edwards">jedwards</who>
    <bug_when>2017-06-12 20:40:23 -0600</bug_when>
    <thetext>It&apos;s there in the F compset, I&apos;ve been able to reproduce with the simpler test
SMS_Ln9.f09_f09_mg17.FHIST_DEV.cheyenne_intel.cam-outfrq9s_clm5

An error in the enddef statement indicates that there was something wrong with an attribute.   
It appears to be located in the call to 
                                                                               
       call soilbiogeochem_nitrogenstate_inst%restart(bounds, ncid, flag=flag)                            
                                                                      
at around lines 527 of file clm_InstMod.F90 commenting out that line causes the enddef to complete.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8078</commentid>
    <comment_count>16</comment_count>
    <who name="Chris Fischer">fischer</who>
    <bug_when>2017-06-14 14:45:12 -0600</bug_when>
    <thetext>I was able to get FHIST_DEV to run by changing the number of nodes being used from 4 to 10.  This matches the layout being used on yellowstone.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8079</commentid>
    <comment_count>17</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-06-14 15:03:40 -0600</bug_when>
    <thetext>(In reply to Chris Fischer from comment #16)
&gt; I was able to get FHIST_DEV to run by changing the number of nodes being
&gt; used from 4 to 10.  This matches the layout being used on yellowstone.

This sounds like we just aren&apos;t giving enough processors for these cases on cheyenne, since memory (mostly) scales with processor count for CLM. So I&apos;m wondering if the FATES case, might run if we ran it with more processors?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8085</commentid>
    <comment_count>18</comment_count>
    <who name="Chris Fischer">fischer</who>
    <bug_when>2017-06-15 15:49:08 -0600</bug_when>
    <thetext>Brian E. was able to get f09_f09_mg17.FHIST_DEV.cheyenne_intel to fail using
10 nodes with NTASKS=120 and NTHRDS=3.  This is running on 10 nodes.


37: pio_support::pio_die:: myrank=          -1 : ERROR: nf_mod.F90:        1520 : 
37: Overflow when type cast to 4-byte integer.
37:Image              PC                Routine            Line        Source             
37:cesm.exe           000000000321971D  Unknown               Unknown  Unknown
37:cesm.exe           0000000002E96271  pio_support_mp_pi         120  pio_support.F90
37:cesm.exe           0000000002E947CA  pio_utils_mp_chec          60  pio_utils.F90
37:cesm.exe           0000000002E7F00C  nf_mod_mp_pio_end        1520  nf_mod.F90
37:cesm.exe           00000000023FD0EA  restfilemod_mp_re         732  restFileMod.F90
37:cesm.exe           000000000230C3ED  clm_driver_mp_clm        1168  clm_driver.F90
37:cesm.exe           00000000022FA863  lnd_comp_mct_mp_l         444  lnd_comp_mct.F90
37:cesm.exe           000000000043071B  component_mod_mp_         681  component_mod.F90
37:cesm.exe           00000000004195DE  cesm_comp_mod_mp_        2639  cesm_comp_mod.F90
37:cesm.exe           0000000000430436  MAIN__                     68  cesm_driver.F90</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8086</commentid>
    <comment_count>19</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-06-15 15:54:56 -0600</bug_when>
    <thetext>(In reply to Chris Fischer from comment #18)
&gt; Brian E. was able to get f09_f09_mg17.FHIST_DEV.cheyenne_intel to fail using
&gt; 10 nodes with NTASKS=120 and NTHRDS=3.  This is running on 10 nodes.
&gt; 
&gt; 
&gt; 37: pio_support::pio_die:: myrank=          -1 : ERROR: nf_mod.F90:       
&gt; 1520 : 
&gt; 37: Overflow when type cast to 4-byte integer.
&gt; 37:Image              PC                Routine            Line       
&gt; Source             
.
.
.
&gt; cesm_comp_mod.F90
&gt; 37:cesm.exe           0000000000430436  MAIN__                     68 
&gt; cesm_driver.F90

Chris if this is a size/memory issue using threads would run into it quicker. Can you try with 30 nodes NTASKS=360 and NTHRDS=3? If that works, it might be useful to see if it seems to consistently fail for smaller layouts and work for larger ones. And then see at what point it starts to fail...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8087</commentid>
    <comment_count>20</comment_count>
    <who name="Chris Fischer">fischer</who>
    <bug_when>2017-06-15 16:19:31 -0600</bug_when>
    <thetext>NTASKS=360 and NTHRDS=3 worked.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8136</commentid>
    <comment_count>21</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-07-12 19:25:14 -0600</bug_when>
    <thetext>Renaming this issue to reflect its more general incarnation</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8137</commentid>
    <comment_count>22</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-07-12 19:29:32 -0600</bug_when>
    <thetext>It sounds like Jim E was on the track of this bug earlier (comment 15). There are only 10 or so variables in the offending routine. Would it make sense to comment them out one by one to see which one is the problem?</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2439</bug_id>
          
          <creation_ts>2017-04-05 14:01:00 -0600</creation_ts>
          <short_desc>BalanceCheck: Calls get_proc_bounds from threaded region</short_desc>
          <delta_ts>2017-05-02 13:45:04 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          <dependson>2027</dependson>
    
    <dependson>2310</dependson>
    
    <dependson>2384</dependson>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Gautam Bisht">gbisht</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7918</commentid>
    <comment_count>0</comment_count>
    <who name="Gautam Bisht">gbisht</who>
    <bug_when>2017-04-05 14:01:12 -0600</bug_when>
    <thetext>The bug was discovered by Azamat Mametjanov (azamat@mcs.anl.gov) with ACME, but it is also applicable to CLM. BalanceCheck() is called by each thread. When a balance check is violated, the thread attempts to determine the global index and if CLM had more than 1 thread, the code will crash. Below is the call sequence:

BalanceCheck()
 - GetGlobalIndex()
   - call get_proc_bounds()</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7973</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-05-02 13:45:04 -0600</bug_when>
    <thetext>Note, we have several other bugs recognized with this problem. I added them to the depends on above.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2438</bug_id>
          
          <creation_ts>2017-03-31 15:00:00 -0600</creation_ts>
          <short_desc>Introduce xml variable controlling reseeding and snow resetting</short_desc>
          <delta_ts>2017-03-31 15:00:36 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7914</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-03-31 15:00:36 -0600</bug_when>
    <thetext>We&apos;d like to have a single xml variable (proposed name RESET_SNOW_N_SEEDS_CLM_FOR_COUPLED_RUN) that controls both:

(1) whether to do reseeding

(2) whether to reset snow (reset_snow - new namelist variabl)

since those are typically done at the same time.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2427</bug_id>
          
          <creation_ts>2017-02-23 12:13:00 -0700</creation_ts>
          <short_desc>Change SHR_ASSERT calls to avoid using errMsg</short_desc>
          <delta_ts>2017-02-23 12:13:51 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Bill Sacks">sacks</assigned_to>
          <cc>andre</cc>
    
    <cc>erik</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7874</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-02-23 12:13:23 -0700</bug_when>
    <thetext>I have just made a cime PR that allows you to pass file and line information directly to SHR_ASSERT. This avoids the ridiculously large overhead of the shr_log_errMsg call.

https://github.com/ESMCI/cime/pull/1183

Once this version of cime comes into CLM, we should rework the SHR_ASSERT calls to use this new interface rather than using errMsg.

I have started a branch for this here:

https://svn-ccsm-models.cgd.ucar.edu/clm2/branches/assert_file_line

where I have just changed one file for testing purposes.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7875</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-02-23 12:13:51 -0700</bug_when>
    <thetext>This change will significantly speed up CLM in debug mode, but should have little or no impact in production mode.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2426</bug_id>
          
          <creation_ts>2017-02-21 10:41:00 -0700</creation_ts>
          <short_desc>Error in rootfr for SoilStateType restart</short_desc>
          <delta_ts>2017-02-21 11:00:31 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.x Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>dlawren</cc>
    
    <cc>oleson</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7869</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-02-21 10:41:37 -0700</bug_when>
    <thetext>This is a message from Keith about a potential problem in SoilStateType.

Hi Erik,

I don&apos;t think I understand the current logic in SoilStateType.F90 regarding rootfr.  In the Restart subroutine I see:

    call restartvar(ncid=ncid, flag=flag, varname=&apos;HK&apos;, xtype=ncd_double,  &amp;
         dim1name=&apos;column&apos;, dim2name=&apos;levgrnd&apos;, switchdim=.true., &amp;
         long_name=&apos;hydraulic conductivity&apos;, units=&apos;mm/s&apos;, &amp;
         interpinic_flag=&apos;interp&apos;, readvar=readvar, data=this%hk_l_col)
     if( use_dynroot ) then
         call restartvar(ncid=ncid, flag=flag, varname=&apos;root_depth&apos;, xtype=ncd_double,  &amp;
              dim1name=&apos;pft&apos;, &amp;
              long_name=&apos;root depth&apos;, units=&apos;m&apos;, &amp;
              interpinic_flag=&apos;interp&apos;, readvar=readvar, data=this%root_depth_patch)
 
         call restartvar(ncid=ncid, flag=flag, varname=&apos;rootfr&apos;, xtype=ncd_double,  &amp;
              dim1name=&apos;pft&apos;, dim2name=&apos;levgrnd&apos;, switchdim=.true., &amp;
              long_name=&apos;root fraction&apos;, units=&apos;&apos;, &amp;
              interpinic_flag=&apos;interp&apos;, readvar=readvar, data=this%rootfr_patch)
     end if
         if (flag==&apos;read&apos; .and. .not. readvar) then
            if (masterproc) then
               write(iulog,*) &quot;can&apos;t find rootfr in restart (or initial) file...&quot;
               write(iulog,*) &quot;Initialize rootfr to default&quot;
            end if
            call init_vegrootfr(bounds, nlevsoi, nlevgrnd, &amp;
            this%rootfr_patch(bounds%begp:bounds%endp,1:nlevgrnd), &apos;water&apos;)
            call init_vegrootfr(bounds, nlevsoi, nlevgrnd, &amp;
            this%crootfr_patch(bounds%begp:bounds%endp,1:nlevgrnd), &apos;carbon&apos;)
         end if
I&apos;m not sure what the last set of statements is doing.  It seems like if use_dynroot is false, then &quot;readvar&quot; will reflect the status of the restartvar call for &quot;HK&quot;?

Thanks,
Keith</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7870</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-02-21 11:00:31 -0700</bug_when>
    <thetext>I think actually the non dynamic root code is probably OK, because this initialization should&apos;ve already been done at InitCold. For the dynamic roots case, the &quot;end if&quot; should just be moved down past the point of doing the initialization on rootfr if it wasn&apos;t found on the restart file.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2423</bug_id>
          
          <creation_ts>2017-02-13 14:35:00 -0700</creation_ts>
          <short_desc>ncd_io should abort if variable not read, unless caller requests otherwise</short_desc>
          <delta_ts>2017-02-13 14:35:43 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7860</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-02-13 14:35:32 -0700</bug_when>
    <thetext>Motivated by bug 2422:

It seems fragile that ncd_io - as well as the restartvar routine that&apos;s built on top of it - returns a readvar flag that the caller is expected to check. Typically, I&apos;d think that we want to abort if trying to read a variable if it isn&apos;t found, so this should be the default behavior.

Callers could then indicate that they want to continue despite the variable not being found, e.g., by:

(1) Providing an optional argument, allow_not_found - if present and true, then it&apos;s okay if the variable isn&apos;t found; this is indicated by the readvar argument

OR

(2) Making readvar an optional argument. If it&apos;s absent (which would be the typical case), then abort if the variable isn&apos;t found. If it&apos;s present, then use the current behavior of setting readvar rather than aborting if the variable isn&apos;t found.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2421</bug_id>
          
          <creation_ts>2017-02-10 18:10:00 -0700</creation_ts>
          <short_desc>Have CLM listen to the driver for number of threads rather than OMP_NUM_THREADS</short_desc>
          <delta_ts>2017-02-10 18:20:45 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.x Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>dlawren</cc>
    
    <cc>mvertens</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7857</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-02-10 18:10:02 -0700</bug_when>
    <thetext>This is CLM&apos;s part of Issue 864 for cime, where the components don&apos;t listen to what the driver sets the number of threads for them -- but use the env variable OMP_NUM_THREADS

https://github.com/ESMCI/cime/issues/864

This can be a problem if another component is threaded, and you don&apos;t want CLM to be. It&apos;ll end up being threaded anyway.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7858</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-02-10 18:20:45 -0700</bug_when>
    <thetext>This is a problem both in controlMod and decompMod. The seq_comm_getnthreads interface to seq_comm_mod needs to be queried in lnd_comp_mct and the result saved in CLM.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2416</bug_id>
          
          <creation_ts>2017-01-26 14:22:00 -0700</creation_ts>
          <short_desc>TruncateCandNStates should abort if just one of C or N is near-zero</short_desc>
          <delta_ts>2017-01-26 16:46:50 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>dlawren</cc>
    
    <cc>oleson</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7844</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-01-26 14:22:25 -0700</bug_when>
    <thetext>In CNPrecisionControlMod: TruncateCandNStates: Currently, if either C or N is near-zero, then both are set to 0. This can cause errors to be swept under the rug, when C &amp; N are in inconsistent states.

We agreed in yesterday&apos;s clm-cmt meeting that the behavior should be changed so that: If C is within roundoff of zero but N is substantially bigger than 0, then we should abort with an error message - and vice versa.

The main choice to make is how to define &quot;substantially bigger than 0&quot;.

I said I&apos;d take this on, but my plate is overflowing, so I&apos;m filing this as something to come back to.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7845</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-01-26 14:23:00 -0700</bug_when>
    <thetext>Once we make this change, we should run many years of a crop simulation to make sure this error isn&apos;t triggered... if it is, we need to determine why.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7846</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-01-26 16:46:50 -0700</bug_when>
    <thetext>From Rosie:

On the TruncateCandNStates business, I know that Keith had experimented with many different configurations for that, mostly to do with trying to avoid getting silly-high C:N ratios, and thus getting into strange feedback loops as a result.  So, I guess I wanted to add a word of caution that that piece of code and how it affects the wider model is extremely fragile. We had suspected that some fraction of the strange behaviour might be related to the shifting crop allometries, etc. so maybe a more crop-centric look at it would help, but I&apos;d proceed with extreme caution!</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2415</bug_id>
          
          <creation_ts>2017-01-26 09:44:00 -0700</creation_ts>
          <short_desc>Balance check doesn&apos;t check for possible errors in all points</short_desc>
          <delta_ts>2017-01-26 09:44:05 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>dlawren</cc>
    
    <cc>l.vankampenhout</cc>
    
    <cc>oleson</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7843</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-01-26 09:44:05 -0700</bug_when>
    <thetext>Leo pointed this out, and I agree with his assessment:

I noticed that the following code from BalanceCheckMod does not check on the maximum error over all columns, merely checks the last column found. 
So there is a possibility that the abort is not triggered when it should have been. 


       ! Soil energy balance check

       found = .false.
       do c = bounds%begc,bounds%endc
          if (col%active(c)) then
             if (abs(errsoi_col(c)) &gt; 1.0e-6_r8 ) then
                found = .true.
                indexc = c
             end if
          end if
       end do
       if ( found ) then
          write(iulog,*)&apos;WARNING: BalanceCheck: soil balance error (W/m2)&apos;
          write(iulog,*)&apos;nstep         = &apos;,nstep
          write(iulog,*)&apos;errsoi_col    = &apos;,errsoi_col(indexc)
          if (abs(errsoi_col(indexc)) &gt; 1.e-4_r8 .and. (nstep &gt; 2) ) then
             write(iulog,*)&apos;clm model is stopping&apos;
             call endrun(decomp_index=indexc, clmlevel=namec, msg=errmsg(sourcefile, __LINE__))
          end if
       end if



We should change this code (and other code in BalanceCheck mod if there is other code that follows this pattern) to check for the maximum error across all points.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2414</bug_id>
          
          <creation_ts>2017-01-21 19:12:00 -0700</creation_ts>
          <short_desc>LATBASET is always output to history even if not used and even though it&apos;s a constant</short_desc>
          <delta_ts>2017-01-21 19:12:08 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.x Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7828</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-01-21 19:12:08 -0700</bug_when>
    <thetext>LATBASET is always output to history files even if it&apos;s not used and even though it is time-constant. It should be added to the time-constant variables and only output if it&apos;s actually being used.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2411</bug_id>
          
          <creation_ts>2017-01-19 10:29:00 -0700</creation_ts>
          <short_desc>Carbon root profiles aren&apos;t modified with dynamic roots</short_desc>
          <delta_ts>2017-01-19 10:29:36 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.x Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>dlawren</cc>
    
    <cc>dll</cc>
    
    <cc>oleson</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7819</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-01-19 10:29:36 -0700</bug_when>
    <thetext>Currently carbon root profiles are unmodified when use_dynroots=.true. as it only varies rootfr and not crootfr.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2410</bug_id>
          
          <creation_ts>2017-01-19 10:21:00 -0700</creation_ts>
          <short_desc>When use_dynroots are on, and interpolating from IC if can&apos;t find a nearest neighbor, use PFT==1 for rootfr</short_desc>
          <delta_ts>2017-01-19 13:18:57 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.x Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          <blocked>2405</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>dlawren</cc>
    
    <cc>oleson</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7817</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-01-19 10:21:56 -0700</bug_when>
    <thetext>When use_dynroots==.true. and interpolation from initial conditions is being done, instead of copying rootfr from nearest baresoil as is done for everything else when init_interp_fill_missing_with_natveg==.true. copy from PFT==1.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7818</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-01-19 10:27:39 -0700</bug_when>
    <thetext>In order to do this an additional optional flag needs to be sent to restartvar

ifmissingfrompft=1

like so

         call restartvar(ncid=ncid, flag=flag, varname=&apos;rootfr&apos;, xtype=ncd_double,  &amp;
              dim1name=&apos;pft&apos;, dim2name=&apos;levgrnd&apos;, switchdim=.true., &amp;
              long_name=&apos;root fraction&apos;, units=&apos;&apos;, 
ifmissingfrompft=1, &amp;
              interpinic_flag=&apos;interp&apos;, readvar=readvar, data=this%rootfr_patch)


by default it would imply &quot;0&quot; bare-soil.

Logic inside of restartvar then needs to be changed such that it doesn&apos;t just check for explicitly baresoil, but from the given PFT index. The name of is_baresoil should also change to something like is_givenpft where again the default would be 0.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7820</commentid>
    <comment_count>2</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-01-19 10:35:33 -0700</bug_when>
    <thetext>Bug 2405 depends on the solution presented here.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7824</commentid>
    <comment_count>3</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-01-19 13:18:57 -0700</bug_when>
    <thetext>I think this should be closed, since it was based on a misunderstanding (replaced by bug 2412).

Also: I don&apos;t think this idea will work: you can&apos;t use different &quot;template&quot; patches for different variables with the way init_interp works - and even if you could, I don&apos;t think that&apos;s a good idea, because you&apos;d end up with some inconsistent, Frankenstein state.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2406</bug_id>
          
          <creation_ts>2017-01-18 10:46:00 -0700</creation_ts>
          <short_desc>Crop patch-level restart variables read after enter_spinup code</short_desc>
          <delta_ts>2017-10-31 15:28:37 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>cdkoven</cc>
    
    <cc>dlawren</cc>
    
    <cc>oleson</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7812</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-01-18 10:46:20 -0700</bug_when>
    <thetext>I don&apos;t fully understand this code, so I&apos;m not positive of my assessment, but this looks wrong to me:

CNVegCarbonStateType: Restart has some code to reset some patch-level variables when (I think) entering spinup mode. It looks to me like all of the patch-level variables are supposed to be read before that point. However, some crop-specific patch-level variables are read after that point (the various grain pools, and the new cropseedc_deficit pool that I am just adding).

I&apos;m guessing (but am not sure) that the crop restartvar calls should be moved to before this enter_spinup code?

Bonus points will be awarded for:

(1) Explaining why this resetting only needs to happen for C variables, not the analogous N state variables

(2) Extracting this resetting code into its own subroutine. Ideally, this code would be shared with the routine it was (seemingly) copy &amp; pasted from (initCold, it appears).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7813</commentid>
    <comment_count>1</comment_count>
    <who name="Keith Oleson">oleson</who>
    <bug_when>2017-01-18 12:19:22 -0700</bug_when>
    <thetext>If you are talking about this section of code:

         else if (spinup_state == 2 .and. restart_file_spinup_state &lt;= 1 ) then
             if ( masterproc ) write(iulog,*) &apos; CNRest: taking Dead wood C pools into AD spinup mode&apos;
             enter_spinup = .true.
             if ( masterproc ) write(iulog, *) &apos;Dividing stemc and crootc by 10 for enter spinup &apos;
             ! If a pft is dead (indicated by totvegc = 0) then we reseed that
             ! pft according to the cold start protocol in the InitCold subroutine.
             ! Thus, the variable totvegc is required to be read here from the restart file
             ! so that if it is zero for a given pft, the pft can be reseeded.
             ! This is only done if spinup_state == 2 and restart_file_spinup_state &lt;=1.
             ! totvegc is read in for all situations, including this one, at the end
             ! of this subroutine.

I put this in at Dave&apos;s request.  The purpose was to &quot;reseed&quot; dead pfts with some initial leaf carbon using the InitCold logic if the initial file being used was in &quot;normal&quot; mode and we ran a simulation in AD mode.  The idea was to give dead pfts (defined by totvegc_patch &lt;= 0) another chance to grow.  This works in the sense that these pfts regrow.  I don&apos;t remember for sure if that&apos;s why we didn&apos;t bother with nitrogen, so I can&apos;t qualify for any bonus points there.

However, I *think* you are right that the crop restartvar calls should be moved to before this code.

I absolutely agree with you that this should have been extracted into it&apos;s own subroutine and shared with the InitCold routine.  As usual, I did something quick under time pressure and then it got incorporated into the main code.  I&apos;m happy to try and earn some bonus points by doing this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8315</commentid>
    <comment_count>2</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-10-31 15:28:37 -0600</bug_when>
    <thetext>When the option reseed_dead_plants came to the trunk in clm4_5_15_r233 we have it handling both Nitrogen as well as Carbon. So that answers the first part of the bonus questions in original query for this report.

But, yes it looks like crop restartvar should be done first, and this section should be done last.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2405</bug_id>
          
          <creation_ts>2017-01-17 19:35:00 -0700</creation_ts>
          <short_desc>In init_interp: If a given type cannot be found: Consider using something other than bare ground</short_desc>
          <delta_ts>2017-01-19 13:20:12 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>Future</target_milestone>
          <dependson>2410</dependson>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>dlawren</cc>
    
    <cc>oleson</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7810</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-01-17 19:35:14 -0700</bug_when>
    <thetext>In init_interp: Currently, if there is a type (patch or col type) in your new run that was not present in the &quot;template&quot; run, init_interp will use the closest bare ground patch as a template. This most likely occurs when you interpolate from a non-crop run to a crop run, or a crop-without-irrigation run to a crop-with-irrigation run. But in principle, it could occur in other circumstances, too.

This has sometimes caused problems, such as the recent problem where new crop types were given the rootfr of bare ground - which was 0 for all levels. We have fixed these problems as we have discovered them, but it&apos;s possible there are other problems lurking now, or that may be added later.

At today&apos;s CLM-CMT meeting, we discussed possibly wanting to change this behavior so that, rather than using the bare ground patch as a template in these cases, it uses some vegetated patch. It&apos;s not clear what the rules should look like for how to choose the appropriate vegetated patch; this requires more thought.

This could become more important if/when each PFT is put on its own column: In this case, taking column-level values from the bare ground patch would give you very-non-spun-up C &amp; N pools, for example.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7821</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-01-19 10:37:48 -0700</bug_when>
    <thetext>In bug 2410 I present a suggested solution for how this would work by adding an optional flag to restartvar &quot;ifmissingfrompft&quot; that would give the PFT index to use when interpolating (defaults to 0 bare-soil).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7825</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-01-19 13:20:12 -0700</bug_when>
    <thetext>The idea presented in bug 2410 won&apos;t work. I think we&apos;d need something like that that is NOT tied to individual restart variables, but rather is some field that applies to all variables.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2404</bug_id>
          
          <creation_ts>2017-01-16 10:21:00 -0700</creation_ts>
          <short_desc>Build-namelist calculation of CLM dtime assumes NCPL_BASE_PERIOD=ndays</short_desc>
          <delta_ts>2017-01-17 17:38:46 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>lipscomb</cc>
    
    <cc>mvertens</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7807</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-01-16 10:21:20 -0700</bug_when>
    <thetext>From Bill Lipscomb:

In file …/clm/bld/CLMBuildNamelist.pm, l. 1917, the base period is hardwired to 3600 * 24.  This means (if I understand correctly how dtime is computed) that if LND_NCPL is set to a large value (consistent with sub-daily atm coupling), I get a much shorter CLM time step than I want.

--

I agree with his assessment. Mariana is putting in a fix for a similar problem for mosart and rtm, but these are using some new shared python code. A similar fix is needed in CLM&apos;s perl-based build-namelist. It amounts to about 10 lines of code that need to be added to determine the basedt based on NCPL_BASE_PERIOD (I just don&apos;t remember what those 10 lines of code look like).

This is unlikely to affect users much: Bill Lipscomb was doing something unusual by changing NCPL_BASE_PERIOD. However, my understanding is that this will bite anyone who does change NCPL_BASE_PERIOD.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7809</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-01-17 17:38:46 -0700</bug_when>
    <thetext>This will be fixed after the science freeze.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2400</bug_id>
          
          <creation_ts>2017-01-12 11:19:00 -0700</creation_ts>
          <short_desc>Problem with mksurfdata_map for smallville landuse.timeseries</short_desc>
          <delta_ts>2017-04-30 17:20:09 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.x Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>dlawren</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7798</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-01-12 11:19:20 -0700</bug_when>
    <thetext>With clm4_5_14_r215 I get the following when trying to run the smallville landuse.timeseries site in mksurfdata_map

The command is...

./mksurfdata.pl -no_surfdata -glc_nec 0 -y 1850-1855 -r 1x1_smallvilleIA -pft_idx 17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78 -pft_frc 6.5,1.5,1.6,1.7,1.8,1.9,1.5,1.6,1.7,1.8,1.9,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5 -dynpft single_point_dynpft_files/landuse_timeseries_smallvilleIA_hist_simyr1850-1855.txt

It fails in harvest with...

 sum over domain of cft           77   1.50000000000000     
 sum over domain of cft           78   1.50000000000000     
 
 fsurdat is blank: skipping writing surface dataset
 creating dynamic land use dataset
 SKIP: PFT_LULCC                
 SKIP: CFT_LULCC                
 (OPNFIL): Successfully opened file 
 single_point_dynpft_files/landuse_timeseries_smallvilleIA_hist_simyr1850-1855.t
 xt on unit=           98
forrtl: severe (24): end-of-file during read, unit -5, file Internal List-Directed Read
Image              PC                Routine            Line        Source             
mksurfdata_map     00000000004A3394  Unknown               Unknown  Unknown
mksurfdata_map     00000000004BF39F  Unknown               Unknown  Unknown
mksurfdata_map     00000000004BDE2E  Unknown               Unknown  Unknown
mksurfdata_map     0000000000430A5C  mkharvestmod_mp_m        1080  mkharvestMod.F90
mksurfdata_map     000000000046B182  MAIN__                   1113  mksurfdat.F90
mksurfdata_map     000000000040975E  Unknown               Unknown  Unknown
libc.so.6          0000003DD441ED5D  Unknown               Unknown  Unknown
mksurfdata_map     0000000000409669  Unknown               Unknown  Unknown

this is probably a fairly simple problem as harvest should be set to zero for the smallville case.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7963</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-04-30 17:20:09 -0600</bug_when>
    <thetext>The problem is that now there are more harvest variables and some of them are 2D. So this part of the code...

  read(substring,*) oride_harv(1:numharv-1)
  call shr_string_betweenTags( string, graz_start, graz_end, substring, rc )
  if ( rc /= 0 )then
     write(6,*) subname//&apos;Trouble finding grazing start end tags&apos;
     call abort()
  end if
  read(substring,*) oride_harv(numharv)
  if ( harvest_fieldnames(numharv) /= &apos;GRAZING&apos; )then
     write(6,*) subname, &apos; grazing is NOT last field as was expected&apos;
     call abort()
  end if

Doesn&apos;t work for the new situation where numharv = 9, and it&apos;s trying to read this..

single_point_dynpft_files/landuse_timeseries_smallvilleIA_hist_simyr1850-1855.txt

&lt;pft_f&gt;100&lt;/pft_f&gt;&lt;pft_i&gt;13&lt;/pft_i&gt;&lt;harv&gt;0,0,0,0,0&lt;/harv&gt;&lt;graz&gt;0&lt;/graz&gt;

The new types added are: FERTNITRO_CFT, UNREPRESENTED_PFT_LULCC, and UNREPRESENTED_CFT_LULCC.

We could assume they were all zero, or have each of them in a separate tag for the full PFT or CFT array as appropriate for each variable. And grazing needs to not be the last one expected as the code is doing now. This might need to be on it&apos;s own line as well.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2394</bug_id>
          
          <creation_ts>2016-12-22 15:58:00 -0700</creation_ts>
          <short_desc>Methane demands exceed methane available</short_desc>
          <delta_ts>2016-12-22 15:58:38 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>cdkoven</cc>
    
    <cc>dlawren</cc>
    
    <cc>oleson</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7784</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-12-22 15:58:38 -0700</bug_when>
    <thetext>This is with the SMS_Lm25.f19_g16.ICLM45BGCCROP.yellowstone_gnu.clm-cropMonthOutput test with transcrop_n05_clm4_5_13_r210 after time-step 208...

  89: ENDRUN: ERROR: Methane demands exceed methane available.ERROR in /glade/p/work/erik/clm_transcrop/components/clm/src/biogeochem/ch4Mod.F90 at line 3418                                                                                                                                                                                                                                                                                                                                                                                                
  89: ERROR: Unknown error submitted to shr_sys_abort.
  74: Methane demands exceed methane available. Error in methane competition (mol/m^3/s), c,j:  -1.5575315045230422E-009       33170           2
  74: Latdeg,Londeg=   8.5263157894735997        80.000000000000000
  74: ENDRUN: ERROR: Methane demands exceed methane available.ERROR in /glade/p/work/erik/clm_transcrop/components/clm/src/biogeochem/ch4Mod.F90 at line 3418

with stack trace...

  89:#0  0x2B80A405EB57
  74:#0  0x2B8377A15B57
  89:#1  0x9E7BF9 in __shr_sys_mod_MOD_shr_sys_backtrace
  89:#2  0x9E7F52 in __shr_sys_mod_MOD_shr_sys_abort
  89:#3  0x4A1542 in __abortutils_MOD_endrun_vanilla
  89:#4  0x7A7DB2 in __ch4mod_MOD_ch4_tran at ch4Mod.F90:0
  89:#5  0x7BE1F9 in __ch4mod_MOD_ch4
  89:#6  0x4A80A9 in __clm_driver_MOD_clm_drv
  89:#7  0x49D2FB in __lnd_comp_mct_MOD_lnd_run_mct
  89:#8  0x41D893 in __component_mod_MOD_component_run
  74:#1  0x9E7BF9 in __shr_sys_mod_MOD_shr_sys_backtrace
  89:#9  0x40B658 in __cesm_comp_mod_MOD_cesm_run</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2392</bug_id>
          
          <creation_ts>2016-12-21 09:21:00 -0700</creation_ts>
          <short_desc>I think the fire code won&apos;t work right when CNDV is used along with transient crop areas</short_desc>
          <delta_ts>2016-12-21 09:21:21 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>dlawren</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7780</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-12-21 09:21:21 -0700</bug_when>
    <thetext>Fang Li&apos;s fire code (CNFireXXX) has code to handle deforestation-related fires. I think these are meant to be associated with human-induced land cover change. When the fire code was first written, I believe CLM only allowed one of transient PFTs or CNDV to be active at a given time. However, moving forward we want to allow CNDV at the same time as prescribed transient crop areas. We currently pass the full area changes from all sources to the fire code. This means that (e.g.) if there is a decrease in tropical forest area due to prescribed land cover change, and a further decrease from CNDV, the fire code will see the total decrease and base deforestation-related fires on this total decrease. I *think* what we really want is for the fire code to just see the decrease from prescribed land cover change, since this represents human-induced deforestation.

There is a similar problem in theory from changes in glacier area: decreases in forest area due to expanding glaciers are seen the same way as human-induced land cover change by the fire code. However, in practice, we don&apos;t expect glacier expansion to occur in regions of tropical forests. But this same issue could also arise from future, internally-generated land cover change, such as the expansion of lakes / wetlands in inundated areas.

Off-hand, I can see two solutions to this problem:

(1) Separately track land cover change (dwt) from human sources. This would include changes in areas generated in dynpft_interp and dyncrop_interp, but not from other sources. This is a bit tricky because of these multiple streams of human-induced land cover change, and the fact that it can manifest as changes in pft%wtcol and/or col%wtgcell. I imagine this would be doable, but at the cost of some additional code complexity.

(2) Rather than trying to deduce the human induced land cover change from the various sources of land cover change in the model, instead have an explicit field specifying the rate of human-induced deforestation on the surface dataset and landuse_timeseries file - or specified as a stream. This would be a straightforward approach, though we&apos;d probably want to construct this field to be consistent with the actual land cover change in the model - and for that reason, may want it on the landuse_timeseries file rather than as a separate stream. One advantage of this approach is that it would provide a mechanism to specify rates of land cover change in a year-2000 run (i.e., a present day run, which has no land cover change). Another advantage is that gross transitions (rather than just net transitions) could be included in this field. (Note that if we wanted to go down this path, then it could make sense to specify a deforestation rate more generally in the code for a year-2000 run - i.e., used in other parts of the code than just the fire code.)</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2391</bug_id>
          
          <creation_ts>2016-12-19 14:36:00 -0700</creation_ts>
          <short_desc>Add single point tower data for smallvilleIA</short_desc>
          <delta_ts>2016-12-19 14:58:16 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7777</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-12-19 14:36:00 -0700</bug_when>
    <thetext></thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7778</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-12-19 14:58:16 -0700</bug_when>
    <thetext>Purpose is so that smallville tests can turn around faster (when running with CRU forcing data, over half the time is spent in datm)</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2390</bug_id>
          
          <creation_ts>2016-12-19 12:53:00 -0700</creation_ts>
          <short_desc>Urban time-varying streams</short_desc>
          <delta_ts>2016-12-20 16:10:12 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.5.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Keith Oleson">oleson</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>dlawren</cc>
    
    <cc>erik</cc>
    
    <cc>oleson</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7776</commentid>
    <comment_count>0</comment_count>
    <who name="Keith Oleson">oleson</who>
    <bug_when>2016-12-19 12:53:26 -0700</bug_when>
    <thetext>Bob Tomas encountered an urban time-varying stream related error with cesm2_0_beta04:

(shr_dmodel_readLBUB) file lb: /glade/p/cesmdata/cseg/inputdata/lnd/clm2/urbandata/CLM50_tbuildmax_Oleson_2016_0.9x1.25_simyr1849-2106_c160923.nc       2
(shr_dmodel_readstrm) open   : /glade/p/cesmdata/cseg/inputdata/lnd/clm2/urbandata/CLM50_tbuildmax_Oleson_2016_0.9x1.25_simyr1849-2106_c160923.nc
(shr_dmodel_readLBUB) file ub: /glade/p/cesmdata/cseg/inputdata/lnd/clm2/urbandata/CLM50_tbuildmax_Oleson_2016_0.9x1.25_simyr1849-2106_c160923.nc       2
 ERROR: no valid urban data for g=            1
 landunit type:              7
 RROR: Unknown error submitted to shr_sys_abort.

This occurs in UrbanTimeVarType.F90 (which I wrote for the urban time-varying streams).
He is running an LGM simulation for which there are no urban areas.

There is a check in that routine to see if there is valid urban data if urbpoi is true. I had forgotten that urbpoi could be true even if pct_urban = 0, because it looks like it is simply keyed off of URBAN_REGION_ID from the surface dataset, regardless of the value of pct_urban.  It looks like I need to also check whether or not the landunit is active, perhaps using lun%active(l)?  Or is there a better way to do this?  The relevant code is:

   found = .false.
   do l = bounds%begl,bounds%endl
      if (lun%urbpoi(l)) then
         glun  = lun%gridcell(l)
         !
         ! Determine vector index corresponding to glun
         !
         ig = 0
         do g = bounds%begg,bounds%endg
            ig = ig+1
            if (g == glun) exit
         end do

         if ( .not. urban_valid(g) .or. (this%t_building_max(l) &lt;= 0._r8)) then
            found = .true.
            gindx = g
            lindx = l
            exit
         end if
      end if
   end do
   if ( found ) then
      write(iulog,*)&apos;ERROR: no valid urban data for g= &apos;,gindx
      write(iulog,*)&apos;landunit type:   &apos;,lun%itype(l)
      write(iulog,*)&apos;urban_valid:     &apos;,urban_valid(gindx)
      write(iulog,*)&apos;t_building_max:  &apos;,this%t_building_max(lindx)
      call endrun(msg=errmsg(sourcefile, __LINE__))
   end if

So I was thinking of modifying the if statement as:

if (lun%urbpoi(l) .and. lun%active(l)) then</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7779</commentid>
    <comment_count>1</comment_count>
    <who name="Keith Oleson">oleson</who>
    <bug_when>2016-12-20 16:10:12 -0700</bug_when>
    <thetext>Changing &quot;fillalgo&quot; for the urbantv stream from the current value of &quot;none&quot; to &quot;nn&quot; (nearest neighbor) allows the model to run. This implies that gridcells that have no data are being filled in with valid data.

To check the actual data being filled in, I ran an &quot;allurban&quot; run where urban landunits run everywhere and I output a dov2xy=false file that contains &quot;TBUILD_MAX&quot; which is the field read in from the urbantv stream.  I converted this to 2d and I see that this has the effect of filling in a nearest neighbor valid value for every gridcell that has non-zero URBAN_REGION_ID, e.g, for this particular simulation there are now valid values of TBUILD_MAX in Antarctica.  These values are 380K which is what I expect for an 1850 simulation.

So, I think there are two changes to be made.  As I previously mentioned, the first is to additionally check whether the urban landunit is active, i.e., in UrbanTimeVarType.F90:

&lt; !KO      if (lun%urbpoi(l)) then
&lt; !KO
&lt;       if (lun%urbpoi(l) .and. lun%active(l)) then
&lt; !KO

And the second is to change fillalgo from &quot;none&quot; to &quot;nn&quot;.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2388</bug_id>
          
          <creation_ts>2016-12-10 14:55:00 -0700</creation_ts>
          <short_desc>Answer changes in ICLM45ED hobart-nag tests with unrelated code changes</short_desc>
          <delta_ts>2016-12-10 14:55:01 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Ben Andre">andre</assigned_to>
          <cc>erik</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7773</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-12-10 14:55:01 -0700</bug_when>
    <thetext>Both in comparing r207 with r206 and r208 with r207, we are seeing answer changes in these tests:

 FAIL ERS_D_Ld5.f10_f10.ICLM45ED.hobart_nag.clm-edTest BASELINE
 FAIL SMS_D_Ld5.f10_f10.ICLM45ED.hobart_nag.clm-edTest BASELINE

The only difference in the out-of-the-box history fields is NBP; from adding more fields, I see that this is caused by a difference in fire_c_to_atm.

All other ED tests – including very similar tests on yellowstone – pass the baseline comparisons.

This isn&apos;t a basic reproducibility problem: I get bit-for-bit answers when comparing a fresh checkout of r207 with the r207 baselines. Rather, it seems like changes in unrelated parts of the code are somehow affecting this fire variable in ED, just with the nag compiler.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2387</bug_id>
          
          <creation_ts>2016-12-09 13:37:00 -0700</creation_ts>
          <short_desc>Automatic restarts will fail for CLM if the last restarts are written before the end of the simulation</short_desc>
          <delta_ts>2016-12-09 16:49:43 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.x Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>aliceb</cc>
    
    <cc>dlawren</cc>
    
    <cc>dll</cc>
    
    <cc>oleson</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7770</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-12-09 13:37:31 -0700</bug_when>
    <thetext>Danica setup a case with clm4_5_12_r191 (cime: clm4_5_11_r188_cime4.5.14) where STOP_N=23/REST_N=10. So restarts don&apos;t coincide with the end of the model run. It then dies on automatic restart trying to read the non-existing history files that go along with the year 2026 restart files. 

history settings are:

hist_mfilt     = 1,1,365,8760
hist_nhtfrq    = 0,0,-24,-1
hist_fincl2    = &apos;TLAI&apos;,&apos;NPP&apos;,&apos;GRAINC:X&apos;,&apos;QVEGT&apos;,&apos;FCEV&apos;,&apos;FCTR&apos;,&apos;FGEV&apos;,&apos;FPSN&apos;,&apos;FSH&apos;,&apos;QDRAI&apos;,&apos;QOVER&apos;,&apos;QRGWL&apos;,&apos;QSOIL&apos;,&apos;QVEGE&apos;,&apos;TOTECOSYSC&apos;,&apos;NEE&apos;,&apos;HR&apos;,&apos;ER&apos;,&apos;GPP&apos;,&apos;O3UPTAKESUN&apos;,&apos;O3UPTAKESHA&apos;
hist_fincl3    = &apos;CPHASE&apos;,&apos;GRAINC&apos;
hist_fincl4    = &apos;OZONE&apos;,&apos;OZONEMSK&apos;

The end of the cesm.log contains this...

   1: NetCDF: Variable not found
   1: NetCDF: Variable not found
   1: No such file or directory
   1: pio_support::pio_die:: myrank=          -1 : ERROR: ionf_mod.F90:         235 :
   1:  No such file or directory
   1:Image              PC                Routine            Line        Source
   1:cesm.exe           0000000001515098  Unknown               Unknown  Unknown
   1:cesm.exe           0000000000E4C8C1  pio_support_mp_pi         120  pio_support.F90
   1:cesm.exe           0000000000E4A9B2  pio_utils_mp_chec          74  pio_utils.F90
   1:cesm.exe           0000000000F5D03A  ionf_mod_mp_open_         235  ionf_mod.F90
   1:cesm.exe           0000000000E3C44F  piolib_mod_mp_pio        2694  piolib_mod.F90
   1:cesm.exe           00000000005DBDFB  ncdio_pio_mp_ncd_         195  ncdio_pio.F90.in


The lnd.log completes to reading the restart history files as expected...


 (GETFIL): attempting to find local file
 clm4_5_12_r191_CRUCLM45BGCCrop2deg_TransientCO2.clm2.rh3.2026-01-01-00000.nc
 (GETFIL): using
 clm4_5_12_r191_CRUCLM45BGCCrop2deg_TransientCO2.clm2.rh3.2026-01-01-00000.nc
  in current working directory

The next part is reading in the history files as given on the restart dataset:

 locfnh =
  &quot;./clm4_5_12_r191_CRUCLM45BGCCrop2deg_TransientCO2.clm2.h0.2025-12.nc                                                                                                                                   &quot;,
  &quot;./clm4_5_12_r191_CRUCLM45BGCCrop2deg_TransientCO2.clm2.h1.2025-12.nc                                                                                                                                   &quot;,
  &quot;./clm4_5_12_r191_CRUCLM45BGCCrop2deg_TransientCO2.clm2.h2.2026-01-01-00000.nc                                                                                                                          &quot;,
  &quot;./clm4_5_12_r191_CRUCLM45BGCCrop2deg_TransientCO2.clm2.h3.2026-01-01-00000.nc                                                                                                                          &quot; ;

 locfnhr =
  &quot;./clm4_5_12_r191_CRUCLM45BGCCrop2deg_TransientCO2.clm2.rh0.2026-01-01-00000.nc                                                                                                                         &quot;,
  &quot;./clm4_5_12_r191_CRUCLM45BGCCrop2deg_TransientCO2.clm2.rh1.2026-01-01-00000.nc                                                                                                                         &quot;,
  &quot;./clm4_5_12_r191_CRUCLM45BGCCrop2deg_TransientCO2.clm2.rh2.2026-01-01-00000.nc                                                                                                                         &quot;,
  &quot;./clm4_5_12_r191_CRUCLM45BGCCrop2deg_TransientCO2.clm2.rh3.2026-01-01-00000.nc


Since, these files were archived away, the restart can&apos;t continue without them.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7771</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-12-09 13:52:05 -0700</bug_when>
    <thetext>The call in histFileMod.F90 that fails is this...

             if (tape(t)%ntimes /= 0) then
                call ncd_pio_openfile (nfid(t), trim(locfnh(t)), ncd_write)
             end if

ncd_pio_openfile has this...
    ierr = pio_openfile(pio_subsystem, file, io_type, fname, mode)

    if(ierr/= PIO_NOERR) then
       call shr_sys_abort(&apos;ncd_pio_openfile ERROR: Failed to open file&apos;)
    else if(pio_iotask_rank(pio_subsystem)==0 .and. masterproc) then
       write(iulog,*) &apos;Opened existing file &apos;, trim(fname), file%fh
    end if

But, it&apos;s failing in pio_openfile before coming back to this level. It would&apos;ve helped in this situation to know what file was failing on the open. I originally thought it was a problem with the rh3 restart-history file.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7772</commentid>
    <comment_count>2</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-12-09 16:49:43 -0700</bug_when>
    <thetext>This may be related to the following cime issue:

https://github.com/ESMCI/cime/issues/594

which now has a fix for it.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2385</bug_id>
          
          <creation_ts>2016-12-05 15:07:00 -0700</creation_ts>
          <short_desc>Possible changes for having create_crop_landunit always true</short_desc>
          <delta_ts>2016-12-05 15:07:27 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7765</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-12-05 15:07:27 -0700</bug_when>
    <thetext>Here are some notes from March 28, 2013, about what I thought would need to change once we were ready to set create_crop_landunit to true always. I&apos;m not sure how much here is still correct, relevant, or necessary. I can dig up my other notes that are referenced here if they would be helpful:


Once dynamic landunits are in place, we can always use create_crop_landunit=true. So far this hasn&apos;t been possible, because we need to maintain create_crop_landunit=false when doing transient landcover change (because otherwise changing crop area would imply changing landunit areas, which so far hasn&apos;t been allowed).

Here are some things that will need to be done to accomplish this:

• In mkpftMod: mkpftInit: Change setting of num_natpft &amp; num_cft in the case numpft == numstdpft
	- we will now ALWAYS have num_natpft = numstdpft - numstdcft, and num_cft = numpft - num_natpft. 
	- so we can get rid of the conditional that sets num_natpft and num_cft
	- see May 14, 2013 notes in Changing weights specification in surface dataset for diffs needed for this (mkpftMod.F90 changes under &quot;Making surface datasets for running with my new code&quot;)


	I&apos;m not sure if we&apos;re still allowing the use of raw datasets with just the 16 standard PFTs. I know we&apos;re allowing that for the transient pft dataset, but I&apos;m not sure about the static-in-time dataset. But it might be irrelevant... with the above change, we might be handling things the same in the code regardless of the number of PFTs on the dataset, at least with respect to the static-in-time datasets (see below for notes on the transient dataset)

• Need PCT_CROP to be time-varying on the pftdyn dataset. 

When transient pft info comes from a file with just the 17 pfts (as it currently does), this would be interpreted as: PFTs 0-14 treated as before. Assuming that PFT #16 is always 0%, then PCT_CFT can stay fixed in time (for surface datasets with generic crop: always 100% PFT #15; for surface datasets with specific crops: whatever is determined from the raw data file); PFT #15 will determine PCT_CROP through time.

To summarize: We&apos;ll have the following on the pftdyn dataset:
- PCT_NATVEG: no time dimension (essentially ignored for transient runs -- that&apos;s the whole point of my refactoring)
- PCT_CROP: varies in time
- PCT_PFT: varies in time
- PCT_CFT: no time dimension, at least for now

• Making sure transient pfts are handled right with respect to crops

- Make sure that the new formulation creates transient datasets correctly. 
	- In particular: it sounds like the transient raw dataset format won&apos;t change. So, I think we can interpret the % crop in the transient raw dataset to be the crop landunit area -- and then have the individual crop areas (as % of landunit) stay fixed (see also Surface dataset meeting 6-15-12)

NOTE: there may be conflicts between this bullet and notes in the previous bullet... need to figure out how exactly we should handle transient pfts now:
	- can we have the case where the static dataset has 24 pfts but transient has 16?
	- If so, confirm how this should be handled</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2383</bug_id>
          
          <creation_ts>2016-12-05 13:07:00 -0700</creation_ts>
          <short_desc>Negative nitrogen error in BC5L45BGC case at year 5.</short_desc>
          <delta_ts>2016-12-13 11:49:29 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.x Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>dlawren</cc>
    
    <cc>erik</cc>
    
    <cc>jedwards</cc>
    
    <cc>mickelso</cc>
    
    <cc>mvertens</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7763</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-12-05 13:07:58 -0700</bug_when>
    <thetext>Sheri ran into the following problem at 50525 in BC5L45BGC compset...

./create_newcase -case /glade/scratch/mickelso/cylc_testing/cylc_setup.f09_g16.BC5L45BGC.cesm2_0_beta04_short/ -res f09_g16 -compset BC5L45BGC

This is a 2000_control f09_g16 case, starting from spunup initial conditions...

/glade/p/cesmdata/cseg/inputdata/lnd/clm2/initdata_map/clmi.I2000CLM45CRUBGC.2000-01-01.0.9x1.25_gx1v6_simyr2000_c160413.nc

 
453: QNEG3 from chemistry/SO2:m=  8 lat/lchnk=   3321 Min. mixing ratio violated at    2 points.  Reset to  1.0E-36 Worst =-2.4E-12 at i,k=   8 26
  25:  filew failed, worst i, j, qtmp, q =            1          77
  25: -5.253789982329533E-161  0.000000000000000E+000
 372: dpcoup dqreq           3        2835          12 -2.163540346209262E-165
 372:  4.741815226971638E-165  1.998551585573850E-165
 175: ERROR: Carbon or Nitrogen patch negative =    17.6242454427402
 175:  -6.04926967432914
 175: ERROR: limits =   -60.0000000000000       -6.00000000000000
 175: ENDRUN:
 175: ERROR: carbon or nitrogen state critically negative ERROR in CNPrecisionControl
 175: Mod.F90 at line 202
 175:
 175:
 175:
 175:
 175:
 175:
 175: ERROR: Unknown error submitted to shr_sys_abort.
 175:Image              PC                Routine            Line        Source
 175:cesm.exe           00000000038694CD  Unknown               Unknown  Unknown
 175:cesm.exe           000000000315DD06  shr_sys_mod_mp_sh         401  shr_sys_mod.F90
 175:cesm.exe           00000000022BF348  abortutils_mp_end          43  abortutils.F90
 175:cesm.exe           000000000246BF72  cnprecisioncontro         442  CNPrecisionControlMod.F90</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2382</bug_id>
          
          <creation_ts>2016-12-01 11:09:00 -0700</creation_ts>
          <short_desc>Move rawdata soil depth file into inputdata and svn</short_desc>
          <delta_ts>2017-01-12 15:06:02 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.x Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>dlawren</cc>
    
    <cc>rfisher</cc>
    
    <cc>swensosc</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7762</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-12-01 11:09:03 -0700</bug_when>
    <thetext>As of clm4_5_2_r125, mksurfdata_map is using a private copy of the soil depth file from Sean:

namelist_defaults_clm4_5_tools.xml:&gt;/glade/p/work/swensosc/soildepth_data/u.arizona/soil_alluvial_thickness_5x5min.no_nan.nc

We need to move this over into inputdata and make sure it&apos;s checked into subversion.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7801</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-01-12 15:06:02 -0700</bug_when>
    <thetext>I now have it in the standard location and in svn in clm4_5_14_r215. At: 

$CSMDATA/lnd/clm2/rawdata/mksf_soilthk_5x5min_ORNL_SOILS_simyr1900-2015_c150701.nc

But, before closing this I want to add some additional metadata to describe the source of the data.

Here&apos;s and email from Patrick giving some information on the dataset:

Hi Dave,

I provided a dataset on 6/26/2015, which had all variables related to our DTB dataset binned into 5x5 arcminute grid cells.  It contained data at this resolution for all of our grids (upland valley soil depth, upland hillslope soil depth, lowland soil depth, and overall soil depth) as well as the % coverage for each landscape unit (upland valley, upland hillslope, lowland, as well as ocean, lakes, and ice for which soil depths were not reported).

There were two aggregation methods as I was asked to report both.  For the first, data for the 5x5 arcminute grid cells were created by averaging the original 30 arcsecond data, and for the second, data for the 5x5 arcminute grid cells were created by taking the median of the original 30 arcsecond data.

Hope this helps,

Thanks,
-Patrick

Patrick Broxton
Researcher
Arizona Remote Sensing Center
School of Natural Resources and the Environment

ENR2 Bldg. N407
1064 E. Lowell Street
The University of Arizona
Tucson, AZ  85721</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2380</bug_id>
          
          <creation_ts>2016-11-29 11:10:00 -0700</creation_ts>
          <short_desc>Remove logic for missing_crops in mksurfdata_map</short_desc>
          <delta_ts>2016-11-29 11:10:22 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.x Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>dlawren</cc>
    
    <cc>lawrence</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7758</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-11-29 11:10:22 -0700</bug_when>
    <thetext>There&apos;s some logic in mksurfdat.F90 and mkpftMod.F90 for mksurfdata_map that allows PFT raw datasets without all of the prognostic crop CFT&apos;s to be used. For a transient case the first year has to have crop, and then it uses that as a constant for future years.

Since, we are moving to raw datasets that always contain prognostic crop, we can remove this logic as a simplification. We&apos;ll leave it in place, until all the raw datasets are in place and available and we can use crop datasets for non-crop simulations (with create_croplandunit=.true.).

Also see...

https://trello.com/c/uWWZq88m/252-collapse-all-crops-to-generic-for-sp-or-non-crop-bgc-simulations</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2377</bug_id>
          
          <creation_ts>2016-11-15 05:04:00 -0700</creation_ts>
          <short_desc>Change urban code to use downscaled atmospheric forcings</short_desc>
          <delta_ts>2016-11-15 05:09:32 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P4</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>oleson</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7750</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-11-15 05:04:24 -0700</bug_when>
    <thetext>Most of the code uses the downscaled, column-level atmospheric forcings where relevant. However, the urban code still uses the gridcell-level, non-downscaled forcings in some places (search for &apos;not_downscaled&apos; in the urban modules). This is simply because, when I was originally changing the code to use the downscaled forcings, it looked like it would be a fair amount of work to change the urban code to be fully consistent, so I punted on that.

This causes problems if you extend either the urban domain or the CISM domain so that the two overlap in any grid cells - i.e., if there are any active urban points in the CISM domain.

Once this is done, we can:

(1) Remove the check for column-gridcell equality in atm2lndMod: check_downscale_consistency

(2) Remove the code that I&apos;m about to add to glc2lndMod: update_glc2lnd_topo that prevents downscaling over urban points</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7751</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-11-15 05:09:32 -0700</bug_when>
    <thetext>To see what to change for the two &quot;once this is done&quot; points in my original report, look for comments like this that I&apos;m adding in the code:

BUG(wjs, 2016-11-15, bugz 2377)</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2372</bug_id>
          
          <creation_ts>2016-11-09 13:14:00 -0700</creation_ts>
          <short_desc>Remove need to check readvar for checkDates for crop</short_desc>
          <delta_ts>2016-11-09 13:14:01 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.x Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7738</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-11-09 13:14:01 -0700</bug_when>
    <thetext>The following shouldn&apos;t depend on readvar for unrelated variables...

Index: CropType.F90
===================================================================
--- CropType.F90	(revision 81586)
+++ CropType.F90	(working copy)
@@ -429,8 +429,10 @@
             dim1name=&apos;pft&apos;, long_name=&apos;crop phenology phase&apos;, &amp;
             units=&apos;0-not planted, 1-planted, 2-leaf emerge, 3-grain fill, 4-harvest&apos;, &amp;
             interpinic_flag=&apos;interp&apos;, readvar=readvar, data=this%cphase_patch)
-       if (flag==&apos;read&apos; .and. readvar)  then
-          call this%checkDates( )
+       if (flag==&apos;read&apos; )then
+          call this%checkDates( )  ! Check that restart date is same calendar date (even if year is different)
+                                   ! This is so that it properly goes through
+                                   ! the crop phases
        end if
     end if</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2367</bug_id>
          
          <creation_ts>2016-11-01 13:24:00 -0600</creation_ts>
          <short_desc>Add a list of real parameters as part of what CLM build-namelist does</short_desc>
          <delta_ts>2016-11-09 14:31:45 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.x Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7723</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-11-01 13:24:05 -0600</bug_when>
    <thetext>Not all real parameters are added to the default namelist. For Rosie&apos;s parameter estimation work, we thought it would be useful to output a file that lists all of the real parameters as well as the default value (if any) and a comment with a description of what they are. This might make it easier for people to create a user_nl_clm for their parameter estimation experiments.

I&apos;m proposing the filename be &quot;user_nl_clm_real_parameters&quot; and it list all real parameters that are in a namelist. A problem is that right now it might list parameters that might not be able to be set for a given configuration. And it won&apos;t have a default value for all parameters.

In the future we could add more meta-data for things like the min and max expected range for example. We can easily add any needed metadata to the XML file keeping track of namelist items, and anything added there can be easily output as well.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7724</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-11-01 16:07:19 -0600</bug_when>
    <thetext>Here&apos;s what an initial list looks like:

This includes things used for mksurfdata

! Visible and Near-infrared albedo&apos;s for glacier ice
albice = 0.60,0.40
! Scalar multiplier for base flow rate(ONLY used if lower_boundary_condition is not aquifer or table)
baseflow_scalar = ?.??
! Only used when baset_mapping == varytropicsbylatIntercept at zero latitude to add to baset from the PFT parameter file
baset_latvary_intercept = ?.??
! Only used when baset_mapping == varytropicsbylatSlope with latitude in degrees to vary tropical baset by
baset_latvary_slope = ?.??
! boreal peat fires (/hr)
boreal_peatfire_c = ?.??
! CN Maintenence Respiration base rate for roots(if NOT set, use the value for br_mr on the params file)
br_root = ?.??
! Saturation BTRAN for ignition (0-1)
bt_max = ?.??
! Critical BTRAN for ignition (0-1)
bt_min = ?.??
! Critical threshold for truncation of Carbon (truncate Carbon states to zero below this value)
ccrit = ?.??
! Global constant for deforestation fires (/day)
cli_scale = ?.??
! Critical threshold of negative Carbon to die (abort when Carbon states are below this value)
cnegcrit = ?.??
! Atmospheric CO2 molar ratio (by volume) only used when co2_type==constant (umol/mol)(Set by CCSM_CO2_PPMV)
co2_ppmv = 379.0
! Scalar for cropfire (/hr)
cropfire_a1 = ?.??
! E-folding depth over which decomposition is slowed with depth in all soils.
decomp_depth_efolding = 1.0
! Minimum lake depth to increase non-molecular thermal diffusivities by the factor deepmixing_mixfact.
deepmixing_depthcrit = ?.??
! Factor to increase non-molecular thermal diffusivities for lakes deeper than deepmixing_depthcritto account for unresolved 3D processes.Set to 1 to 
deepmixing_mixfact = ?.??
! Multiplier for nitrate concentration for max denitrification rates(ONLY used if use_nitrif_denitrif is enabled)
denitrif_nitrateconc_coefficient = ?.??
! Exponent power for nitrate concentrationfor max denitrification rates(ONLY used if use_nitrif_denitrif is enabled)
denitrif_nitrateconc_exponent = ?.??
! Multiplier for heterotrophic respiration for max denitrification rates(ONLY used if use_nitrif_denitrif is enabled)
denitrif_respiration_coefficient = ?.??
! Exponent power for heterotrophic respiration for max denitrification rates(ONLY used if use_nitrif_denitrif is enabled)
denitrif_respiration_exponent = ?.??
! Time step (seconds)
dtime = 1800
! minimum time step length (seconds) for adaptive time stepping in richards equation
dtmin = 60.
! Error tolerance for differences in atm/land areas in domain checkingdefault: 1.0e-07
eps_aarea = ?.??
! Error tolerance for differences in atm/land lat/lon in domain checkingdefault: 1.0e-12
eps_agrid = ?.??
! Error tolerance for differences in atm/land masks in domain checkingdefault: 1.0e-13
eps_amask = ?.??
! Error tolerance for differences in fractions in domain checkingdefault: 1.0e-02
eps_frac = ?.??
! Error tolerance for differences in ocean/ice lon/lat in domain checkingdefault: 1.0e-1
eps_oarea = ?.??
! Error tolerance for differences in ocean/ice lon/lat in domain checkingdefault: 1.0e-2
eps_ogrid = ?.??
! Error tolerance for differences in ocean/ice masks in domain checkingdefault: 1.0e-06
eps_omask = ?.??
! Intercept of free living Nitrogen fixation with zero annual ET
freelivfix_intercept = ?.??
! Slope of free living Nitrogen fixation with annual ET
freelivfix_slope_wet = ?.??
! separate q10 for frozen soil respiration rates.  default to same as above zero rates
froz_q10 = ?.??
! Maximum snow depth in mm H2O equivalent. Additional mass gains will be capped when this depth is exceeded.Changes in this value should possibly be accompanied by changes in:- nlevsno: larger values of h2osno_max should be accompanied by increases in nlevsno- glc_snow_persistence_max_days: large values of h2osno_max should generally have  glc_snow_persistence_max_days = 0; small values of h2osno_max should generally have  glc_snow_persistence_max_days &gt; 0.
h2osno_max = 10000.0
! Initial stocks of Carbon to use in soil organic matter pools for CENTURY decomposition
initial_cstocks = ?.??
! Initial seed Carbon to use at planting(only used when CN is on as well as crop)
initial_seed_at_planting = ?.??
! Fraction of intercepted precipitation
interception_fraction = 1.0
! baseline proportion of nitrogen allocated for electron transport (J)
jmaxb1 = ?.??
! Maximum nitrification rate constant (1/s)(ONLY used if use_nitrif_denitrif is enabled)
k_nitr_max = ?.??
! Visible and Near-infrared albedo values for melting lakes. Albedo will relax to these values as temperaturereaches melting when ice is present with no snow layers. Represents puddling, ice disintegration, and white ice.Set to alblak values (0.6, 0.4) to keep albedo constant for ice-covered lakes without snow layers.
lake_melt_icealb = ?.??
! Scalar of leaf respiration to vcmax
leaf_mr_vcm = 0.015d00
! Abort model if coupler timestep wallclock time exceeds this value, ignored if 0,if &amp;lt; 0 then use abs(max_cplstep_time)*cktime as the threshold.default: 0
max_cplstep_time = ?.??
! Maximum depth to mix soils to by croturbation, in permafrost soils.
max_depth_cryoturb = ?.??
! Maximum fraction of leaf that may be wet prior to drip occuring
maximum_leaf_wetted_fraction = 0.05
! Minimum wind speed tht results in compaction (m/s)
min_wind_snowcompact = ?.??
! Eastern edge of the regional grid
mksrf_edgee = ?.??
! Northern edge of the regional grid
mksrf_edgen = ?.??
! Southern edge of the regional grid
mksrf_edges = ?.??
! Western edge of the regional grid
mksrf_edgew = ?.??
! Critical threshold for truncation of Nitrogen (truncate Nitrogen states to zero below this value)
ncrit = ?.??
! Number of days over which to use exponential relaxation of NPP in N fixation calculation
nfix_timeconst = ?.??
! Critical threshold of negative Nitrogen to die (abort when Nitrogen states are below this value)
nnegcrit = ?.??
! non-boreal peat fires (/hr)
non_boreal_peatfire_c = ?.??
! Fire occurance for high GDP areas that are tree dominated (fraction)
occur_hi_gdp_tree = ?.??
! eccentricity of orbit, used when orb_mode is fixed_parameters.default: SHR_ORB_UNDEF_REAL (1.e36)(Not currently used in build-namelist)
orb_eccen = ?.??
! location of vernal equinox in longitude degrees, used when orb_mode is fixed_parameters.default: SHR_ORB_UNDEF_REAL (1.e36)(Not currently used in build-namelist)
orb_mvelp = ?.??
! obliquity of orbit in degrees, used when orb_mode is fixed_parameters.default: SHR_ORB_UNDEF_REAL (1.e36)(Not currently used in build-namelist)
orb_obliq = ?.??
! Snow compaction overburden exponential factor (1/K)Not used for snow_overburden_compaction_method=Vionnet2012
overburden_compress_tfactor = ?.??
! Perturbation limit when doing error growth test
pertlim = ?.??
! Plant Function Type fraction to override global file with for mksurfdata
pft_frc = ?.??
! Potential human ignition counts (/person/month)
pot_hmn_ign_counts_alpha = ?.??
! Representative concentration pathway for future scenarios [radiative forcing at peak or 2100 in W/m^2]-999.9 means do NOT use a future scenario, just use historical data.
rcp = -999.9
! Tolerance for relative errordefault: -1.0e-8
reprosum_diffmax = ?.??
! Saturation RH for ignition (0-100)
rh_hgh = ?.??
! Critical RH for ignition (0-100)
rh_low = ?.??
! grid point latitude associated with single column mode.set by PTS_LAT in env_run.xml.
scmlat = ?.??
! grid point longitude associated with single column mode.set by PTS_LON in env_run.xml.
scmlon = ?.??
! Soil percent clay to override global file with for mksurfdata
soil_clay = ?.??
! Soil maximum fraction to override global file with for mksurfdata
soil_fmax = ?.??
! Soil percent sand to override global file with for mksurfdata
soil_sand = ?.??
! Base advective flux (downwards) for SOM.
som_adv_flux = ?.??
! Profile over which to distribute C and N coming from surface pools (leaves, stem, grain).
surfprof_exp = ?.??
! Upper Limit on Destructive Metamorphism Compaction [kg/m3]
upplim_destruct_metamorph = 175.d00
! a very small number: used to check for sub step completion for adaptive time stepping in richards equation
verysmall = 1.e-8
! Michaelis-Mentin maximum methane oxidation rate (mol/m^3-water/s), in the unsaturated zone.
vmax_oxid_unsat = ?.??
! Wall time limit for rundefault: -1.0
wall_time_limit = ?.??
! Temperature resolution of saturation vapor pressure lookup tables in Kelvin.(This is only used if wv_sat_use_tables is .true.)Default: 1.0
wv_sat_table_spacing = ?.??
! Width of the liquid-ice transition range in mixed-phase water saturation vaporpressure calculations. The range always ends at 0 degrees Celsius, so thisvariable only affects the start of the transition.Default: 20KWARNING: CAM is tuned to the default value of this variable. Because it affectsso many different parameterizations, changes to this variable may require asignificant retuning of CAM&apos;s cloud physics to give reasonable results.
wv_sat_transition_start = ?.??
! tolerance to double length of substep for adaptive time stepping in richards equation
xtolerlower = 1.e-2
! tolerance to halve length of substep for adaptive time stepping in richards equation
xtolerupper = 1.e-1
! The maximum value to use for zeta under stable conditions
zetamaxstable = 0.5d00</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7740</commentid>
    <comment_count>2</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-11-09 14:31:45 -0700</bug_when>
    <thetext>I have this started as part of clm4_5_12_r200. It doesn&apos;t happen automatically though.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2360</bug_id>
          
          <creation_ts>2016-09-28 11:35:00 -0600</creation_ts>
          <short_desc>Cray compiler issue in wetbulb write statement in CLM</short_desc>
          <delta_ts>2016-09-28 11:35:52 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.x Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>jedwards</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7708</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-09-28 11:35:52 -0600</bug_when>
    <thetext>Jim found the following issue in clm4_5_12_r196 for the cray compiler.
It&apos;s breaking up a character string in an awkward way. The cray compiler
is sensitive to doing this.


Index: src/biogeophys/HumanIndexMod.F90

===================================================================

--- src/biogeophys/HumanIndexMod.F90	(revision 80804)

+++ src/biogeophys/HumanIndexMod.F90	(working copy)

@@ -946,7 +946,7 @@

     else

        wb_it = T1 - C  ! Place Holder.  wet bulb temperature same as dry bulb (C)

        write(iulog,*) &apos;WARNING: Wet_Bulb algorithm failed to converge. Setting to T: WB, P, &amp;

-                       T, RH, Q, VaporP: &apos;,wb_it, pin, T1, relhum, qin, vape

+                       &amp;T, RH, Q, VaporP: &apos;,wb_it, pin, T1, relhum, qin, vape

     endif

 

   end subroutine Wet_Bulb</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2352</bug_id>
          
          <creation_ts>2016-09-20 15:07:00 -0600</creation_ts>
          <short_desc>time_bounds for start is a negative number</short_desc>
          <delta_ts>2016-09-22 18:32:57 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.x Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>mickelso</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7690</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-09-20 15:07:14 -0600</bug_when>
    <thetext>Based on Sheri Mickelson time_bounds on the clm history files is a negative number. She&apos;d like this to be zero. I haven&apos;t looked into this at all at this point, just repeating what she told me.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7691</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-09-20 20:47:58 -0600</bug_when>
    <thetext>See bug #794. Caveat that it&apos;s possible that I misunderstood things in making some of my comments there (they came relatively early in my history of working with CLM), but it&apos;s at least worth referring to the comments there before deciding on a solution.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7692</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-09-21 10:11:18 -0600</bug_when>
    <thetext>From Sheri:

I was mainly asking for clarification in handling the post-processing for CMIP6 CLM data.  In order to properly date the monthly files, we need to average the time bounds.  This puts CLM data as an outlier because it&apos;s first month&apos;s midpoint is different from the other models because of the negative date.  For CMIP5, Gary hand tuned this so the CLM data matched the other components.  
If the negative value is truly correct then the midpoint date should be different and we should leave the different date stamp as is for CMIP6 and deal with the inconsistencies within our datasets.  And second if the midpoint date is supposed to be the same as in the other components then is the negative value really correct then?  I can&apos;t see it both ways.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7693</commentid>
    <comment_count>3</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-09-21 10:13:47 -0600</bug_when>
    <thetext>Response to Sheri:

I definitely agree that CLM&apos;s current handling is confusing.

You refer to monthly files... I thought this was not an issue for monthly files, only for files with some other time frequency... if it&apos;s actually an issue for monthly files, too, then I think there is a gap in my understanding.

Also, at least as of 5 years ago, I thought that CLM was consistent with CAM in this respect. Has CAM changed in that time? If so, I agree that CLM should be changed consistently.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7698</commentid>
    <comment_count>4</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-09-22 16:34:40 -0600</bug_when>
    <thetext>I think the behavior comes from this in histFileMod.F90

    call get_prev_time(day, sec)
    do t=1,ntapes
       tape(t)%begtime = day + sec/secspday
    end do

Currently, CAM get&apos;s around this, by calling get_curr_time in place of get_prev_time when it&apos;s a startup run.

So we just need something like this...

    if ( is_first_step() ) then
        call get_curr_time(day, sec)
    else
        call get_prev_time(day, sec)
    end if

    do t=1,ntapes
       tape(t)%begtime = day + sec/secspday
    end do</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7699</commentid>
    <comment_count>5</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-09-22 18:32:57 -0600</bug_when>
    <thetext>Erik: Does that really explain the whole problem? I thought that part of the problem was that there is an extra time step written on startup... and if I remember correctly, the beginning time in the time bounds is actually consistent with that.

Or am I combining two totally separate issues here?</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2348</bug_id>
          
          <creation_ts>2016-08-22 11:36:00 -0600</creation_ts>
          <short_desc>Lack of maintenance respiration from snow covered vegetation</short_desc>
          <delta_ts>2016-08-22 11:36:10 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.x Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>cdkoven</cc>
    
    <cc>dlawren</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7662</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-08-22 11:36:10 -0600</bug_when>
    <thetext>Maintenance respiration is calculated only when there is some vegetation that is NOT snow covered.

CNMResp has this...

         if (frac_veg_nosno(p) == 1) then

            leaf_mr(p) = lmrsun(p) * laisun(p) * 12.011e-6_r8 + &amp;
                         lmrsha(p) * laisha(p) * 12.011e-6_r8

         else !nosno

            leaf_mr(p) = 0._r8

         end if

frac_veg_nosno is set to 1 if elai+esai&gt;0. and 0 otherwise (in CNVegStructUpdateMod). It looks to me that laisun and laisha is based on the total LAI (even if snow covered). This is in SurfaceRadiation. But, vegetation that is completely snow covered will have zero leaf maintenance respiration.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2345</bug_id>
          
          <creation_ts>2016-08-09 16:34:00 -0600</creation_ts>
          <short_desc>CLM doesn&apos;t check that dimensionality is correct for anything it reads in via ncdio_pio</short_desc>
          <delta_ts>2016-08-22 16:38:17 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.x Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P2</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          <blocked>2344</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7653</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-08-09 16:34:12 -0600</bug_when>
    <thetext>CLM&apos;s use of reading of netCDF files via PIO in ncdio_pio, rarely checks if the dimensions are correct for variables being read in. This is notably true of the global reads in for the PFT parameter fields. The lack of error checking caused us to spend a bunch of time chasing down an error that was simply due to the size of a field on a netCDF file to be smaller than expected.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7670</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-08-22 16:38:17 -0600</bug_when>
    <thetext>At least part of the fault in this is actually due to PIO itself. And it seems to be an issue with both PIO1 and PIO2.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2344</bug_id>
          
          <creation_ts>2016-08-08 13:16:00 -0600</creation_ts>
          <short_desc>Reproducibility problem with clm4_5_10_r187 -- 30% of the time randomly dies with a methane error</short_desc>
          <delta_ts>2016-08-22 16:33:43 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.5.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          <dependson>2345</dependson>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>dlawren</cc>
    
    <cc>dll</cc>
    
    <cc>mvertens</cc>
    
    <cc>oleson</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7648</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-08-08 13:16:05 -0600</bug_when>
    <thetext>A reproducibility issue came in with clm4_5_10_r187 where about 30% of the time the following case will die with a methane error, and other times run to completion. I think simpler cases will die as well, but the simpler tests I did were successful before I realized it wasn&apos;t reproducible.

create_newcase -case clm4_5_10_r187_SP_4x5_ADspin -mach yellowstone_intel -res f45_f45 -user_compset 1850_DATM%CRU_CLM50%BGC_SICE_SOCN_MOSART_SGLC_SWAV -user_pes_setby clm

./xmlchange CLM_ACCELERATED_SPINUP=&quot;on&quot;,STOP_N=19,STOP_OPTION=&quot;nmonths&quot;,CLM_FORCE_COLDSTART=&quot;on&quot;,DATM_CLMNCEP_YR_ALIGN=1901
./xmlchange DATM_CLMNCEP_YR_END=1905,DATM_CLMNCEP_YR_START=1901,DATM_MODE=CLMGSWP3

user_nl_clm
paramfile=&apos;/glade/u/home/rfisher/Matlab/pft_files/FUNparams/TRY_default_c160708_hydr1.5.nc&apos;
fsurdat=&apos;/glade/p/cesm/sdwg_dev/lawrence/surfdata/surfdata_4x5_16pftsmidarctic_simyr2000_c160419.nc&apos;
use_hydrstress=.true.
use_luna=.true.

SourceMods/src.datm/namelist_defaults_datm.xml 
&lt;?xml version=&quot;1.0&quot;?&gt;

&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;namelist_defaults.xsl&quot;?&gt;

&lt;namelist_defaults&gt;

&lt;!-- =========================================  --&gt;
&lt;!--- streams                                   --&gt;
&lt;!-- =========================================  --&gt;

&lt;streamslist datm_mode=&quot;CLMGSWP3&quot;     &gt;CLMGSWP3.Solar,CLMGSWP3.Precip,CLMGSWP3.TPQW,CLMCRUNCEP_V5.TPQW&lt;/streamslist&gt;

&lt;!-- == TPQW    === --&gt;
&lt;strm_datvar     stream=&quot;CLMCRUNCEP_V5.TPQW&quot;&gt;
  TBOT     tbot
  QBOT     shum
&lt;/strm_datvar&gt;

&lt;!-- == TPQW    === --&gt;
&lt;strm_datvar     stream=&quot;CLMGSWP3.TPQW&quot;&gt;
  WIND     wind
  PSRF     pbot
  FLDS     lwdn
&lt;/strm_datvar&gt;

&lt;/namelist_defaults&gt;

An example error message in cesm.log is...

  41: Negative conc. in ch4tran. c,j,deficit (mol):        3512           1
  41:  8.843302222960208E-003
   0: memory_write: model date =    10623       0 memory =     104.44 MB (highwater)       1946.05 MB (usage)  (pe=    0 comps= ATM ICE OCN WAV ESP)
  65: Methane demands exceed methane available. Error in methane competition (mol/m^3
  65: /s), c,j: -2.755768946371973E-010        6818           2
  65: Latdeg,Londeg=  -30.0000000000000        35.0000000000000
  65: ENDRUN:
  65:  ERROR: Methane demands exceed methane available.ERROR in ch4Mod.F90 at line 33
  65: 90
  65:
  65:
  65:
  65:
  65:
  65:
  65: ERROR: Unknown error submitted to shr_sys_abort.
  65:Image              PC                Routine            Line        Source
  65:cesm.exe           000000000153ABA8  Unknown               Unknown  Unknown
  65:cesm.exe           0000000000E43893  shr_sys_mod_mp_sh         401  shr_sys_mod.F90
  65:cesm.exe           0000000000509058  abortutils_mp_end          43  abortutils.F90
  65:cesm.exe           0000000000A4352D  ch4mod_mp_ch4_tra        3389  ch4Mod.F90
  65:cesm.exe           0000000000A377CD  ch4mod_mp_ch4_           1980  ch4Mod.F90
  65:cesm.exe           0000000000511D82  clm_driver_mp_clm         835  clm_driver.F90
  65:cesm.exe           00000000004FDC49  lnd_comp_mct_mp_l         437  lnd_comp_mct.F90
  65:cesm.exe           000000000042EDFB  component_mod_mp_        1079  component_mod.F90
  65:cesm.exe           0000000000419FB2  cesm_comp_mod_mp_        2509  cesm_comp_mod.F90
  65:cesm.exe           000000000042EB92  MAIN__                     93  cesm_driver.F90
  65:cesm.exe           0000000000417B7E  Unknown               Unknown  Unknown
  65:libc.so.6          00002ACAABC8FD5D  Unknown               Unknown  Unknown
  65:cesm.exe           0000000000417A89  Unknown               Unknown  Unknown


a precursor to the problem seems to be these ch4tran warnings....

grep ch4tran cesm.log.160806-113740 
  36: Negative conc. in ch4tran. c,j,deficit (mol):        2842           1
  98: Negative conc. in ch4tran. c,j,deficit (mol):       11343           1
  24: Negative conc. in ch4tran. c,j,deficit (mol):        1205           1
  34: Negative conc. in ch4tran. c,j,deficit (mol):        2561           1
 141: Negative conc. in ch4tran. c,j,deficit (mol):       17127           1
  53: Negative conc. in ch4tran. c,j,deficit (mol):        5161           1
  73: Negative conc. in ch4tran. c,j,deficit (mol):        7928           1
  37: Negative conc. in ch4tran. c,j,deficit (mol):        2964           1
  40: Negative conc. in ch4tran. c,j,deficit (mol):        3375           1
  93: Negative conc. in ch4tran. c,j,deficit (mol):       10667           1

The ch4tran warnings don&apos;t occur in the simulations that were successful.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7649</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-08-08 13:17:17 -0600</bug_when>
    <thetext>Rosie tried similar submissions with r185 and r186 and didn&apos;t see runs that died with the same problem for 8 submissions. Hence we think this came in with r187.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7650</commentid>
    <comment_count>2</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-08-08 13:19:30 -0600</bug_when>
    <thetext>This is for a sequential layout without threading...

env_mach_pes.xml: NTASKS_ATM 15 
env_mach_pes.xml: NTASKS_CPL 135 
env_mach_pes.xml: NTASKS_ESP 15 
env_mach_pes.xml: NTASKS_GLC 135 
env_mach_pes.xml: NTASKS_ICE 15 
env_mach_pes.xml: NTASKS_LND 135 
env_mach_pes.xml: NTASKS_OCN 15 
env_mach_pes.xml: NTASKS_ROF 135 
env_mach_pes.xml: NTASKS_WAV 15 
[erik@yslogin5 clm4_5_10_r187_SP_4x5_ADspin]$ ./xmlquery list | grep THRDS
env_mach_pes.xml: NTHRDS_ATM 1 
env_mach_pes.xml: NTHRDS_CPL 1 
env_mach_pes.xml: NTHRDS_ESP 1 
env_mach_pes.xml: NTHRDS_GLC 1 
env_mach_pes.xml: NTHRDS_ICE 1 
env_mach_pes.xml: NTHRDS_LND 1 
env_mach_pes.xml: NTHRDS_OCN 1 
env_mach_pes.xml: NTHRDS_ROF 1 
env_mach_pes.xml: NTHRDS_WAV 1

and with daily barriers...

env_run.xml: BARRIER_N 1 
env_run.xml: BARRIER_OPTION ndays</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7651</commentid>
    <comment_count>3</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-08-08 15:01:27 -0600</bug_when>
    <thetext>We think this problem is just because Rosie&apos;s param file doesn&apos;t have rootprof_beta as a 2D variable. So the 2nd dimension (for Carbon) isn&apos;t getting initialized to anything (and set to garbage) hence the problem.

so this file has rootprof_beta as a 1D variable rather than 2D.

/glade/u/home/rfisher/Matlab/pft_files/FUNparams/TRY_default_c160708_hydr1.5.nc

so this problem shouldn&apos;t occur for the default code where the standard params file is being used -- just for cases where a params file doesn&apos;t have rootprof_beta as a 2D variable.

As a separate issue we should fix the code so it doesn&apos;t allow such a thing to happen.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7669</commentid>
    <comment_count>4</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-08-22 16:33:43 -0600</bug_when>
    <thetext>This does also occur on hobart_intel and with both PIO1 and PIO2.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2330</bug_id>
          
          <creation_ts>2016-07-06 14:37:00 -0600</creation_ts>
          <short_desc>Issue with frootc/frootn for C4 crops</short_desc>
          <delta_ts>2016-11-09 14:48:21 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.5.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>dlawren</cc>
    
    <cc>dll</cc>
    
    <cc>oleson</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7577</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-07-06 14:37:21 -0600</bug_when>
    <thetext>In clm4_5_9_r184 the following has to be commented out for CROP to work well (otherwise C4 crops don&apos;t grow).


+      ! froot C and N
+      ! EBK KO DML: For some reason frootc/frootn can go negative and allowing
+      ! it to be negative is important for C4 crops (otherwise they die) Jun/3/2016
+      call TruncateCandNStates( bounds, filter_soilp, num_soilp, cs%frootc_patch(bounds%begp:bounds%endp),  &amp;
+                                ns%frootn_patch(bounds%begp:bounds%endp), pc(bounds%begp:), pn(bounds%begp:), __LINE__, &amp;
+                                c13=c13cs%frootc_patch, c14=c14cs%frootc_patch,  &amp;
+                                pc13=pc13(bounds%begp:), pc14=pc14(bounds%begp:), allowneg=.true. )</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7632</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-07-29 17:27:25 -0600</bug_when>
    <thetext>*** Bug 2341 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7741</commentid>
    <comment_count>2</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-11-09 14:48:21 -0700</bug_when>
    <thetext>clm4_5_12_r200 has this workaround put into the code for when running with clm50.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2329</bug_id>
          
          <creation_ts>2016-07-06 12:27:00 -0600</creation_ts>
          <short_desc>code for initializing some isotope carbon state variables looks wrong</short_desc>
          <delta_ts>2017-10-17 12:57:58 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.5.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>cdkoven</cc>
    
    <cc>dlawren</cc>
    
    <cc>oleson</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7576</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-07-06 12:27:50 -0600</bug_when>
    <thetext>I&apos;m not sure what this code in CNVegCarbonStateType.F90: InitCold is trying to accomplish, but it looks wrong to me:

    if ( .not. is_restart() .and. get_nstep() == 1 ) then

       do p = bounds%begp,bounds%endp
          if (pftcon%c3psn(patch%itype(p)) == 1._r8) then
             this%grainc_patch(p)            = c12_cnveg_carbonstate_inst%grainc_patch(p)         * c3_r2
             this%grainc_storage_patch(p)    = c12_cnveg_carbonstate_inst%grainc_storage_patch(p) * c3_r2
             this%grainc_xfer_patch(p)       = c12_cnveg_carbonstate_inst%grainc_xfer_patch(p)    * c3_r2
             this%dispvegc_patch(p)          = c12_cnveg_carbonstate_inst%dispvegc_patch(p)       * c3_r2
             this%storvegc_patch(p)          = c12_cnveg_carbonstate_inst%storvegc_patch(p)       * c3_r2
             this%totvegc_patch(p)           = c12_cnveg_carbonstate_inst%totvegc_patch(p)        * c3_r2
             this%totc_patch(p)              = c12_cnveg_carbonstate_inst%totc_patch(p)           * c3_r2
             this%woodc_patch(p)             = c12_cnveg_carbonstate_inst%woodc_patch(p)          * c3_r2
          else
             this%grainc_patch(p)            = c12_cnveg_carbonstate_inst%grainc_patch(p)         * c4_r2
             this%grainc_storage_patch(p)    = c12_cnveg_carbonstate_inst%grainc_storage_patch(p) * c4_r2
             this%grainc_xfer_patch(p)       = c12_cnveg_carbonstate_inst%grainc_xfer_patch(p)    * c4_r2
             this%dispvegc_patch(p)          = c12_cnveg_carbonstate_inst%dispvegc_patch(p)       * c4_r2
             this%storvegc_patch(p)          = c12_cnveg_carbonstate_inst%storvegc_patch(p)       * c4_r2
             this%totvegc_patch(p)           = c12_cnveg_carbonstate_inst%totvegc_patch(p)        * c4_r2
             this%totc_patch(p)              = c12_cnveg_carbonstate_inst%totc_patch(p)           * c4_r2
             this%woodc_patch(p)             = c12_cnveg_carbonstate_inst%woodc_patch(p)          * c4_r2
          end if
       end do
    end if

It looks like there should probably be a conditional on what the carbon type is of the given instance (i.e., are we operating on c13, c14 or bulk C here?). I believe that c12_cnveg_carbonstate_inst is only present if we&apos;re operating on c13 or c14. That raises the question of why this code even runs - since it looks like it&apos;s trying to operate on an absent argument for the bulk C case. I think the answer is that this block of code is never, ever executed: I&apos;m thinking that the surrounding conditional:

    if ( .not. is_restart() .and. get_nstep() == 1 ) then

is always false in initialization.

I haven&apos;t confirmed any of these suspicions....</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7841</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-01-23 20:51:42 -0700</bug_when>
    <thetext>Bill is right this code is never exercised, since the surrounding condition will always be .false. It also wouldn&apos;t work right for C12 cases, since c12_cnveg_carbonstate_inst wouldn&apos;t be passed down. 

I looked into the history of this and the intention was to provide backward compatibility for restart files that don&apos;t have C13/C14 values (so when you go from use_c13/use_c14 .false. to a case where it&apos;s true. The bad code came in with clm4_5_1_r097.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8272</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-10-17 12:57:58 -0600</bug_when>
    <thetext>Erik, I wonder if this is related to the carbon isotope deaths that we&apos;ve been seeing recently?</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2323</bug_id>
          
          <creation_ts>2016-06-24 14:09:00 -0600</creation_ts>
          <short_desc>Remove or reduce duplication in Photosynthesis code for Plant Hydraulic Stress</short_desc>
          <delta_ts>2016-06-24 14:34:37 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.5.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>dlawren</cc>
    
    <cc>oleson</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7560</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-06-24 14:09:30 -0600</bug_when>
    <thetext>clm4_5_8_r182 brings in plant hydraulic stress (PHS) as an option to the code. The older version needs to stay in place as well to support clm4_5 answers. The new option is brought in largely by duplicating the code in PhotosynthesisMod.F90 for PHS. Almost all subroutines have a PHS version and a non-PHS version. The effects of at least six namelist control items is also reproduced: lnc_opt, reduce_dayl_factor, vcmax_opt, leafresp_method, leafacc, and light_inhibit. Thus any testing for these control items must be duplicated for both PHS on and off. And the size of the file more than doubled from 2k to 2.5k.

This duplication leads to double maintenance of code where changes in the PHS section of the code has to be duplicated in the non-PHS section of the code. It also leads to bugs where a change is made on one side and not the other.

Because, there is so much code duplication this can be managed better by breaking it up into smaller segments that can be called by both PHS and non-PHS versions. The top section of Photosynthesis is almost identically duplicated in PhotosyntesisHydraulicStress until the loop through canopy layers above snow. The sections after that are also duplicated with the PHS setting both sun and shade. I think the duplication can be removed if it&apos;s broken up into three parts by three loops -- calculate_respiration loop, leaf-level-photosynthesis-and-stomotal-conductance, and canopy-photosynthesis-and-stomotal-conductance. The second section includes the call to hybrid or hybrid_PHS.

Other ways of handling the duplication are to set magic numbers in one place as parameters in the code, and to break up the namelist control items into small subroutines/functions that can be called in either branch. Thus these control items are tested whether called from the PHS branch or the non-PHS branch. At least some of these methods should be used to reduce the code duplication.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7561</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-06-24 14:34:37 -0600</bug_when>
    <thetext>Also the statement functions are reproduced. The statement functions need to be removed and the module versions used. We&apos;ll need to check that this doesn&apos;t change answers for PHS on or off.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2322</bug_id>
          
          <creation_ts>2016-06-13 20:37:00 -0600</creation_ts>
          <short_desc>Add a test that ensures that setting all_active = .true. doesn&apos;t change answers for gridcell averages</short_desc>
          <delta_ts>2016-06-13 20:37:51 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.5.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Bill Sacks">sacks</assigned_to>
          <cc>erik</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7551</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-06-13 20:37:51 -0600</bug_when>
    <thetext>Changing which 0-weight points are active should not change answers for gridcell averages. If this does change answers, it indicates a bug: values in 0-weight patches or columns should not affect the gridcell averages.

I have found two bugs by doing a manual test like this: bug 1851 and bug 2321. (See notes in bug 1851 for more detailed thoughts.)

We should add an automated test of this. Specifically, it could do two runs: one out-of-the-box and one with all_active = .true. (probably with finidat = &apos; &apos;, because it can be problematic to set all_active = .true. with an finidat file not set up for that situation - although maybe we could use an initial conditions file along with init_interp?) The gridcell-level history fields should be bit-for-bit identical in these two runs. We could do that with a mechanism similar to the current LII test. However, this will hopefully become more straightforward once https://github.com/CESM-Development/cime/issues/146 is resolved - hopefully making it relatively trivial to create one-off tests like this.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2320</bug_id>
          
          <creation_ts>2016-06-10 14:30:00 -0600</creation_ts>
          <short_desc>Use tau_* values on params file</short_desc>
          <delta_ts>2017-09-14 14:42:38 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.4.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>cdkoven</cc>
    
    <cc>dlawren</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7535</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-06-10 14:30:46 -0600</bug_when>
    <thetext>The &quot;tau_*&quot; values are currently using the hardcoded values in SoilBiogeochemDecompCascadeBGCMod.F90 rather than the values on the params file. The values on the params file are read in -- but discarded. The issue seems to be that answers change when you read in from the params file, rather than doing the inverse that the code has. So if the values read in are the inverse then you can do the divide in the code and preserve answers.

      ! the belowground parameters from century
      tau_l1 = 1./18.5
      tau_l2_l3 = 1./4.9
      tau_s1 = 1./7.3
      tau_s2 = 1./0.2
      tau_s3 = 1./.0045

      ! century leaves wood decomposition rates open, within range of 0 - 0.5 yr^-1
      tau_cwd  = 1./0.3

      ! Todo:  FIX(SPM,032414) - the explicit divide gives different results than when that
      ! value is placed in the parameters netcdf file.  To get bfb, keep the 
      ! divide in source.

      !tau_l1 = params_inst%tau_l1_bgc
      !tau_l2_l3 = params_inst%tau_l2_l3_bgc
      !tau_s1 = params_inst%tau_s1_bgc
      !tau_s2 = params_inst%tau_s2_bgc
      !tau_s3 = params_inst%tau_s3_bgc

      !set turnover rate of coarse woody debris
      !tau_cwd = params_inst%tau_cwd_bgc

There are similar issues in SoilBiogeochemLittVertTranspMod.F90 and in biogeochem/ch4Mod.F90. They are documented with the following type of comment in the code...

! FIX(FIX(SPM,032414),032414) can&apos;t be read off of param file.  not bfb since it is a divide

So this means there are several variables on the params file that get read in and then ignored.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7536</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-06-10 14:48:41 -0600</bug_when>
    <thetext>The list of variables read and ignored seems to be:

vmax_ch4_oxid        (divide by seconds per hour)
k_m                  (don&apos;t see why this one is a problem) *
k_m_o2               (don&apos;t see why this one is a problem) *
k_m_unsat            (divide by 10?) *
vmax_oxid_unsat      (divide by seconds per hour divided by 10) *
unsat_aere_ratio     (divide by 0.3? -- it&apos;s 0.05_r8 / 0.3_r8) *
tau_l1_bgc           (do inverse)
tau_l2_l3_bgc        (do inverse)
tau_s1_bgc           (do inverse)
tau_s2_bgc           (do inverse)
tau_s3_bgc           (do inverse)
tau_cwd_bgc          (do inverse)
som_diffus           (divide by seconds per year)
cryoturb_diffusion_k (divide by seconds per year)

*
some of these may just need to be set to a higher precision in the params file. Making sure the value put on the file is double precision, may resolve the bit-for-bit issues.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8202</commentid>
    <comment_count>2</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-09-11 16:21:00 -0600</bug_when>
    <thetext>Looking at the variables in double precision I see there are a few bits left off the params file for example...

tau_l1 = 0.05405405405406
tau_l2_l3 = 0.2040816326530612
ta_s3 = 222.2222222222222
tau_cwd = 3.333333333333333

other variables have the same issue, but show up in very low significant digits. So this should be able to be made exact.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8209</commentid>
    <comment_count>3</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-09-14 14:42:38 -0600</bug_when>
    <thetext>Using the params files: 
lnd/clm2/paramdata/clm5_params.c170913.nc and lnd/clm2/paramdata/clm_params.c170913.nc

I get bit-for-bit results when using the values on the params files above. I have this on a branch and will bring it to the trunk.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2310</bug_id>
          
          <creation_ts>2016-05-03 12:47:00 -0600</creation_ts>
          <short_desc>Snowgrain size is zero</short_desc>
          <delta_ts>2017-05-02 13:45:04 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.5.z Development</version>
          <rep_platform>PC</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>CLM5</target_milestone>
          <dependson>2027</dependson>
    
    <dependson>1934</dependson>
          <blocked>2439</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>dlawren</cc>
    
    <cc>fischer</cc>
    
    <cc>jedwards</cc>
    
    <cc>mflanner</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7467</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-05-03 12:47:27 -0600</bug_when>
    <thetext>Chris Fisher ran into the following problem

It looks like Intel 16 is causing &quot;SNICAR ERROR: snow grain radius of 0&quot;.  The error message about
&quot;calling inside a threaded region&quot; is caused by the call to endrun.  So the real problem is SNICAR.
I&apos;m using f19_g16.I1850CLM45.

This is the errors when NTHRDS=2
   98: SNICAR ERROR: snow grain radius of            0  out of bounds.
  98: NSTEP=            2
  98: flg_snw_ice=            1
  98: column:        38652  level:            0  snl(c)=           -1
  98: lat=    27.4736842105262       lon=    100.000000000000     
  98: h2osno(c)=   1.316051427843381E-005
  98: calling getglobalwrite with decomp_index=        38652  and clmlevel= column
  98: local  column   index =        38652
  98: ERROR: get_proc_bounds ERROR: Calling from inside  a threaded region
  98:Image              PC                Routine            Line        Source             
  98:cesm.exe           0000000003459153  Unknown               Unknown  Unknown
  98:cesm.exe           0000000002B075C0  shr_sys_mod_mp_sh         401  shr_sys_mod.F90
  98:cesm.exe           0000000002B071E3  shr_sys_mod_mp_sh         230  shr_sys_mod.F90
  98:cesm.exe           00000000007E0AA7  decompmod_mp_get_         218  decompMod.F90
  98:cesm.exe           0000000001092139  getglobalvaluesmo          43  GetGlobalValuesMod.F90
  98:cesm.exe           0000000001094751  getglobalvaluesmo         115  GetGlobalValuesMod.F90
  98:cesm.exe           0000000000752566  abortutils_mp_end          69  abortutils.F90
  98:cesm.exe           00000000013CD34C  snowsnicarmod_mp_         423  SnowSnicarMod.F90
  98:cesm.exe           0000000001A47C2C  surfacealbedomod_         616  SurfaceAlbedoMod.F90
  98:cesm.exe           0000000000777ABB  clm_driver_mp_clm         814  clm_driver.F90
  98:libiomp5.so        00002B3A71D039B3  Unknown               Unknown  Unknown
  98:libiomp5.so        00002B3A71CD29A7  Unknown               Unknown  Unknown
  98:libiomp5.so        00002B3A71CD2095  Unknown               Unknown  Unknown
  98:libiomp5.so        00002B3A71D03D33  Unknown               Unknown  Unknown
  98:libpthread.so.0    00002B3A72A109D1  Unknown               Unknown  Unknown
  98:libc.so.6          00002B3A73C0B8FD  Unknown               Unknown  Unknown

This is the error when NTHRDS=1
 167: SNICAR ERROR: snow grain radius of            0  out of bounds.
 167: NSTEP=            2
 167: flg_snw_ice=            1
 167: column:        64665  level:            0  snl(c)=           -1
 167: lat=    40.7368421052631       lon=    110.000000000000     
 167: h2osno(c)=    1.22099255624464     
 167: calling getglobalwrite with decomp_index=        64665  and clmlevel= column
 167: local  column   index =        64665
 167: global column   index =        36670
 167: global landunit index =        12010
 167: global gridcell index =         3663
 167: gridcell longitude    =    110.000000000000     
 167: gridcell latitude     =    40.7368421052631     
 167: column   type         =            1
 167: landunit type         =            1
 167: ENDRUN:
 167: ERROR in SnowSnicarMod.F90 at line 423                                         
 167:                                                                                
 167:                                                                                
 167:                                                                                
 167:                                                                                
 167:                                                                                
 167:                                       
 167: ERROR: Unknown error submitted to shr_sys_abort.
 167:Image              PC                Routine            Line        Source             
 167:cesm.exe           00000000034BC9CE  Unknown               Unknown  Unknown
 167:cesm.exe           0000000002B85E82  shr_sys_mod_mp_sh         401  shr_sys_mod.F90
 167:cesm.exe           0000000002B85AAF  shr_sys_mod_mp_sh         230  shr_sys_mod.F90
 167:cesm.exe           000000000074D60D  abortutils_mp_end          77  abortutils.F90
 167:cesm.exe           0000000001400CC6  snowsnicarmod_mp_         423  SnowSnicarMod.F90
 167:cesm.exe           0000000001AB06BB  surfacealbedomod_         616  SurfaceAlbedoMod.F90
 167:cesm.exe           000000000076EE22  clm_driver_mp_clm         814  clm_driver.F90
 167:cesm.exe           00000000007275BD  lnd_comp_mct_mp_l         437  lnd_comp_mct.F90
 167:cesm.exe           00000000004595D6  component_mod_mp_        1079  component_mod.F90
 167:cesm.exe           00000000004308A3  cesm_comp_mod_mp_        2509  cesm_comp_mod.F90
 167:cesm.exe           000000000044327F  MAIN__                     93  cesm_driver.F90
 167:cesm.exe           000000000040BA1E  Unknown               Unknown  Unknown
 167:libc.so.6          00002B9C5E114D5D  Unknown               Unknown  Unknown


It looks like Intel 16 is causing &quot;SNICAR ERROR: snow grain radius of 0&quot;.  The error message about
&quot;calling inside a threaded region&quot; is caused by the call to endrun.  So the real problem is SNICAR.
I&apos;m using f19_g16.I1850CLM45.

This is the errors when NTHRDS=2
   98: SNICAR ERROR: snow grain radius of            0  out of bounds.
  98: NSTEP=            2
  98: flg_snw_ice=            1
  98: column:        38652  level:            0  snl(c)=           -1
  98: lat=    27.4736842105262       lon=    100.000000000000     
  98: h2osno(c)=   1.316051427843381E-005
  98: calling getglobalwrite with decomp_index=        38652  and clmlevel= column
  98: local  column   index =        38652
  98: ERROR: get_proc_bounds ERROR: Calling from inside  a threaded region
  98:Image              PC                Routine            Line        Source             
  98:cesm.exe           0000000003459153  Unknown               Unknown  Unknown
  98:cesm.exe           0000000002B075C0  shr_sys_mod_mp_sh         401  shr_sys_mod.F90
  98:cesm.exe           0000000002B071E3  shr_sys_mod_mp_sh         230  shr_sys_mod.F90
  98:cesm.exe           00000000007E0AA7  decompmod_mp_get_         218  decompMod.F90
  98:cesm.exe           0000000001092139  getglobalvaluesmo          43  GetGlobalValuesMod.F90
  98:cesm.exe           0000000001094751  getglobalvaluesmo         115  GetGlobalValuesMod.F90
  98:cesm.exe           0000000000752566  abortutils_mp_end          69  abortutils.F90
  98:cesm.exe           00000000013CD34C  snowsnicarmod_mp_         423  SnowSnicarMod.F90
  98:cesm.exe           0000000001A47C2C  surfacealbedomod_         616  SurfaceAlbedoMod.F90
  98:cesm.exe           0000000000777ABB  clm_driver_mp_clm         814  clm_driver.F90
  98:libiomp5.so        00002B3A71D039B3  Unknown               Unknown  Unknown
  98:libiomp5.so        00002B3A71CD29A7  Unknown               Unknown  Unknown
  98:libiomp5.so        00002B3A71CD2095  Unknown               Unknown  Unknown
  98:libiomp5.so        00002B3A71D03D33  Unknown               Unknown  Unknown
  98:libpthread.so.0    00002B3A72A109D1  Unknown               Unknown  Unknown
  98:libc.so.6          00002B3A73C0B8FD  Unknown               Unknown  Unknown

This is the error when NTHRDS=1
 167: SNICAR ERROR: snow grain radius of            0  out of bounds.
 167: NSTEP=            2
 167: flg_snw_ice=            1
 167: column:        64665  level:            0  snl(c)=           -1
 167: lat=    40.7368421052631       lon=    110.000000000000     
 167: h2osno(c)=    1.22099255624464     
 167: calling getglobalwrite with decomp_index=        64665  and clmlevel= column
 167: local  column   index =        64665
 167: global column   index =        36670
 167: global landunit index =        12010
 167: global gridcell index =         3663
 167: gridcell longitude    =    110.000000000000     
 167: gridcell latitude     =    40.7368421052631     
 167: column   type         =            1
 167: landunit type         =            1
 167: ENDRUN:
 167: ERROR in SnowSnicarMod.F90 at line 423                                         
 167:                                                                                
 167:                                                                                
 167:                                                                                
 167:                                                                                
 167:                                                                                
 167:                                       
 167: ERROR: Unknown error submitted to shr_sys_abort.
 167:Image              PC                Routine            Line        Source             
 167:cesm.exe           00000000034BC9CE  Unknown               Unknown  Unknown
 167:cesm.exe           0000000002B85E82  shr_sys_mod_mp_sh         401  shr_sys_mod.F90
 167:cesm.exe           0000000002B85AAF  shr_sys_mod_mp_sh         230  shr_sys_mod.F90
 167:cesm.exe           000000000074D60D  abortutils_mp_end          77  abortutils.F90
 167:cesm.exe           0000000001400CC6  snowsnicarmod_mp_         423  SnowSnicarMod.F90
 167:cesm.exe           0000000001AB06BB  surfacealbedomod_         616  SurfaceAlbedoMod.F90
 167:cesm.exe           000000000076EE22  clm_driver_mp_clm         814  clm_driver.F90
 167:cesm.exe           00000000007275BD  lnd_comp_mct_mp_l         437  lnd_comp_mct.F90
 167:cesm.exe           00000000004595D6  component_mod_mp_        1079  component_mod.F90
 167:cesm.exe           00000000004308A3  cesm_comp_mod_mp_        2509  cesm_comp_mod.F90
 167:cesm.exe           000000000044327F  MAIN__                     93  cesm_driver.F90
 167:cesm.exe           000000000040BA1E  Unknown               Unknown  Unknown
 167:libc.so.6          00002B9C5E114D5D  Unknown               Unknown  Unknown</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2304</bug_id>
          
          <creation_ts>2016-03-31 15:22:00 -0600</creation_ts>
          <short_desc>spval for variable used in calculation for cold start</short_desc>
          <delta_ts>2017-10-31 14:52:48 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Keith Oleson">oleson</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7431</commentid>
    <comment_count>0</comment_count>
    <who name="Keith Oleson">oleson</who>
    <bug_when>2016-03-31 15:22:17 -0600</bug_when>
    <thetext>I started a new CLM5 simulation using the branch tag respmods_n14_clm4_5_8_r172. We decided to try a cold start. The model ran for 30 years, but there seems to be a problem with &quot;NACTIVE&quot;, which is very large in the first month (likely just in the first time step; on the order of &quot;spval&quot;).
In line 1726 of CNFUNMod.F90, I see:

Nactive(p) = Nactive_no3(p) + Nactive_nh4(p) + Nnonmyc_no3(p) + Nnonmyc_nh4(p)

But on the first time step for a cold start, I believe Nnonmyc_no3 and Nnonmyc_nh4 are still spval at this point. A few lines later these variables are calculated:

Nnonmyc_no3(p) = n_nonmyc_no3_acc_total(p)/dt + n_nonmyc_no3_retrans_total(p)/dt
Nnonmyc_nh4(p) = n_nonmyc_nh4_acc_total(p)/dt + n_nonmyc_nh4_retrans_total(p)/dt

So one possible solution is to move the Nactive calculation after the two lines for Nnonmyc_n03, Nnonmyc_nh4.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8314</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-10-31 14:52:48 -0600</bug_when>
    <thetext>The suggested change would look like:

Index: CNFUNMod.F90
===================================================================
--- CNFUNMod.F90	(revision 87286)
+++ CNFUNMod.F90	(working copy)
@@ -1472,7 +1472,6 @@
       
       Nactive_no3(p)            = n_active_no3_acc_total(p)/dt   + n_active_no3_retrans_total(p)/dt
       Nactive_nh4(p)            = n_active_nh4_acc_total(p)/dt   + n_active_nh4_retrans_total(p)/dt  
-      Nactive(p)                = Nactive_no3(p)  + Nactive_nh4(p) + Nnonmyc_no3(p) + Nnonmyc_nh4(p)
       
       
     
@@ -1489,6 +1488,7 @@
       Nuptake(p)                = Nactive_no3(p) + Nactive_nh4(p) + Nnonmyc_no3(p) &amp;
                                   + Nnonmyc_nh4(p) + Nfix(p) + Npassive(p) + &amp;
                                   retransn_to_npool(p)+free_retransn_to_npool(p) 
+      Nactive(p)                = Nactive_no3(p)  + Nactive_nh4(p) + Nnonmyc_no3(p) + Nnonmyc_nh4(p)
                                    
      ! free N goes straight to the npool, not throught Nuptake...
       sminn_to_plant_fun(p)     = Nactive_no3(p) + Nactive_nh4(p) + Nnonmyc_no3(p) + Nnonmyc_nh4(p) + Nfix(p) + Npassive(p)




It shouldn&apos;t change answers except for NACTIVE in a diagnostic manner</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2295</bug_id>
          
          <creation_ts>2016-03-09 14:25:00 -0700</creation_ts>
          <short_desc>ch4 conservation error in ne30 1850 case...</short_desc>
          <delta_ts>2016-03-14 12:49:38 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.4.z Development</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P2</priority>
          <bug_severity>critical</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>dlawren</cc>
    
    <cc>fischer</cc>
    
    <cc>oleson</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7393</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-03-09 14:25:12 -0700</bug_when>
    <thetext>The following test fails with cesm1_5_alpha06c

ERS_Ld7.ne30_g16.B1850.yellowstone_gnu.allactive-defaultio

 227: CH4 Conservation Error in CH4Mod during diffusion, nstep, c, errch4 (mol /m^2.timestep)         266      201020                       NaN
 227: Latdeg,Londeg=   53.286844012453230        57.510967220423055
 227: ENDRUN: ERROR: CH4 Conservation Error in CH4Mod during diffusionERROR in /glade/scratch/erik/cesm1_5_alpha06c/components/clm/src/biogeochem/ch4Mod.F90 at line 3582                                                                                                                                                                                                                                                                                                                                                                  
 227: ERROR: Unknown error submitted to shr_sys_abort.
 227:#0  0x2B05BDE5EB57
 227:#1  0x159E681 in __shr_sys_mod_MOD_shr_sys_backtrace
 227:#2  0x159E9DA in __shr_sys_mod_MOD_shr_sys_abort
 227:#3  0xDDB8AA in __abortutils_MOD_endrun_vanilla
 227:#4  0x10925CA in __ch4mod_MOD_ch4_tran at ch4Mod.F90:0
 227:#5  0x10A30BF in __ch4mod_MOD_ch4
 227:#6  0xDE160C in __clm_driver_MOD_clm_drv._omp_fn.3 at clm_driver.F90:0
 227:#7  0x2B05BE3F396E
 227:#8  0xDE26DB in __clm_driver_MOD_clm_drv
 227:#9  0xDD770B in __lnd_comp_mct_MOD_lnd_run_mct
 227:#10  0x41E585 in __component_mod_MOD_component_run
 227:#11  0x40C91A in __cesm_comp_mod_MOD_cesm_run</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7394</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-03-10 00:41:01 -0700</bug_when>
    <thetext>I tried replicating some cases for standalone CLM, and they worked...

PASS SMS_Ld7.ne30_g16.I1850CRUCLM50BGCCROP.yellowstone_gnu.clm-default

PASS SMS_Ld7.ne30_g16.IMCRUCLM50BGC.yellowstone_gnu.clm-default

I made the second one as close to the B1850 case as follows...

./xmlchange CLM_BLDNML_OPTS=&quot;-bgc bgc -crop&quot;
./xmlchange CLM_NML_USE_CASE=1850_control,DATM_PRESAERO=clim_1850,MOSART_BLDNML_OPTS=&quot;-simyr 1850&quot;,DATM_CLMNCEP_YR_START=1901,DATM_CLMNCEP_YR_END=1920
./xmlchange CCSM_CO2_PPMV=284.7
and add to user_nl_clm
 finidat = &apos;&apos;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7396</commentid>
    <comment_count>2</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-03-10 12:04:08 -0700</bug_when>
    <thetext>Looking at the code where it fails, the problem is that errch4 is equal to nan, so the else gets matched and it aborts. So I need to see why errch4 is going nan. I&apos;m trying a DEBUG=TRUE test case and we&apos;ll see what that does.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7405</commentid>
    <comment_count>3</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-03-14 12:14:52 -0600</bug_when>
    <thetext>All of my test DEBUG tests passed. 

DONE ERS_D_Ld7.ne30_g16.B1850.yellowstone_gnu.allactive-defaultio : (test finished, successful coupler log) 
--- Test Functionality  ---:
PASS ERS_D_Ld7.ne30_g16.B1850.yellowstone_gnu.allactive-defaultio.cam.h0.nc : test compare cam.h0 (.base and .rest files) 
PASS ERS_D_Ld7.ne30_g16.B1850.yellowstone_gnu.allactive-defaultio.cice.h.nc : test compare cice.h (.base and .rest files) 
PASS ERS_D_Ld7.ne30_g16.B1850.yellowstone_gnu.allactive-defaultio.clm2.h0.nc : test compare clm2.h0 (.base and .rest files) 
PASS ERS_D_Ld7.ne30_g16.B1850.yellowstone_gnu.allactive-defaultio.pop.h.nc : test compare pop.h (.base and .rest files) 
PASS ERS_D_Ld7.ne30_g16.B1850.yellowstone_gnu.allactive-defaultio.cpl.hi.nc : test compare cpl.hi (.base and .rest files) 
PASS ERS_D_Ld7.ne30_g16.B1850.yellowstone_gnu.allactive-defaultio : test functionality summary (ERS_test) 
PASS ERS_D_Ld7.ne30_g16.B1850.yellowstone_gnu.allactive-defaultio.memleak
--- Test time is 1286 seconds ---
DONE ERS_D_Ld7.ne30_g16.I1850CRUCLM50BGCCROP.yellowstone_gnu.clm-default : (test finished, successful coupler log) 
--- Test Functionality  ---:
PASS ERS_D_Ld7.ne30_g16.I1850CRUCLM50BGCCROP.yellowstone_gnu.clm-default.clm2.h0.nc : test compare clm2.h0 (.base and .rest files) 
PASS ERS_D_Ld7.ne30_g16.I1850CRUCLM50BGCCROP.yellowstone_gnu.clm-default.clm2.h1.nc : test compare clm2.h1 (.base and .rest files) 
PASS ERS_D_Ld7.ne30_g16.I1850CRUCLM50BGCCROP.yellowstone_gnu.clm-default.cpl.hi.nc : test compare cpl.hi (.base and .rest files) 
PASS ERS_D_Ld7.ne30_g16.I1850CRUCLM50BGCCROP.yellowstone_gnu.clm-default : test functionality summary (ERS_test) 
PASS ERS_D_Ld7.ne30_g16.I1850CRUCLM50BGCCROP.yellowstone_gnu.clm-default.memleak
--- Test time is 528 seconds ---
DONE SMS_D_Ld7.ne30_g16.B1850.yellowstone_gnu.allactive-defaultio : (test finished, successful coupler log) 
 --- Test Functionality: ---
PASS SMS_D_Ld7.ne30_g16.B1850.yellowstone_gnu.allactive-defaultio : successful coupler log 
PASS SMS_D_Ld7.ne30_g16.B1850.yellowstone_gnu.allactive-defaultio : test functionality summary 
PASS SMS_D_Ld7.ne30_g16.B1850.yellowstone_gnu.allactive-defaultio.memleak
--- Test time is 751 seconds ---</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7407</commentid>
    <comment_count>4</comment_count>
    <who name="Ben Andre">andre</who>
    <bug_when>2016-03-14 12:17:22 -0600</bug_when>
    <thetext>gnu doesn&apos;t trap floating point exceptions and abort. You need to run an intel debug.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7408</commentid>
    <comment_count>5</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-03-14 12:49:38 -0600</bug_when>
    <thetext>(In reply to Ben Andre from comment #4)
&gt; gnu doesn&apos;t trap floating point exceptions and abort. You need to run an
&gt; intel debug.

OK thanks Ben. I am trying that now.

But, one problem with the gnu debug tests, is that they are running to completion rather than dieing in the same way. And that means errch4 isn&apos;t NaN for the DEBUG case, but IS NaN for the non-DEBUG case. So the behavior is different between the two cases, and that likely means there is a numerical error that is causing it to abort in one case and not in the other, because of a tiny roundoff level difference between the two. Which likely means this might be really hard to track down...</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2294</bug_id>
          
          <creation_ts>2016-03-04 16:03:00 -0700</creation_ts>
          <short_desc>Receive surface ozone in CLM</short_desc>
          <delta_ts>2016-03-14 12:17:12 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.4.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>dll</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7392</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-03-04 16:03:57 -0700</bug_when>
    <thetext>These are the changes from Danica to add Ozone from atm in CLM. These are based off of clm4_5_1_r104. There are also changes in cime needed for datm and driver, that are documented in cime issue: 389 and 390.

[erik@yslogin3 clm4_5_1_r104_Fire_O3_spinupFinal]$ diff -cwb /glade/p/work/dll/clm4_5_1_r104/models/lnd/clm/src/main/atm2lndType.F90  SourceMods/src.clm/
*** /glade/p/work/dll/clm4_5_1_r104/models/lnd/clm/src/main/atm2lndType.F90	2015-02-18 15:49:02.749875754 -0700
--- SourceMods/src.clm/atm2lndType.F90	2015-05-12 13:44:46.565581000 -0600
***************
*** 51,56 ****
--- 51,57 ----
       real(r8), pointer :: forc_solai_grc                (:,:) =&gt; null() ! diffuse radiation (numrad) (vis=forc_solsd, nir=forc_solld)
       real(r8), pointer :: forc_solar_grc                (:)   =&gt; null() ! incident solar radiation
       real(r8), pointer :: forc_ndep_grc                 (:)   =&gt; null() ! nitrogen deposition rate (gN/m2/s)
+      real(r8), pointer :: forc_ozone_grc                (:)   =&gt; null() ! ozone concentration 
       real(r8), pointer :: forc_pc13o2_grc               (:)   =&gt; null() ! C13O2 partial pressure (Pa)
       real(r8), pointer :: forc_po2_grc                  (:)   =&gt; null() ! O2 partial pressure (Pa)
       real(r8), pointer :: forc_aer_grc                  (:,:) =&gt; null() ! aerosol deposition array
***************
*** 167,172 ****
--- 168,174 ----
      allocate(this%forc_solai_grc                (begg:endg,numrad)) ; this%forc_solai_grc                (:,:) = ival
      allocate(this%forc_solar_grc                (begg:endg))        ; this%forc_solar_grc                (:)   = ival
      allocate(this%forc_ndep_grc                 (begg:endg))        ; this%forc_ndep_grc                 (:)   = ival
+     allocate(this%forc_ozone_grc                (begg:endg))        ; this%forc_ozone_grc                (:)   = ival
      allocate(this%forc_pc13o2_grc               (begg:endg))        ; this%forc_pc13o2_grc               (:)   = ival
      allocate(this%forc_po2_grc                  (begg:endg))        ; this%forc_po2_grc                  (:)   = ival
      allocate(this%forc_aer_grc                  (begg:endg,14))     ; this%forc_aer_grc                  (:,:) = ival
***************
*** 271,276 ****
--- 273,283 ----
           avgflag=&apos;A&apos;, long_name=&apos;atmospheric incident solar radiation&apos;, &amp;
           ptr_lnd=this%forc_solar_grc)
  
+     this%forc_ozone_grc(begg:endg) = spval
+     call hist_addfld1d (fname=&apos;OZONE&apos;, units=&apos;mol/mol&apos;,  &amp;
+          avgflag=&apos;A&apos;, long_name=&apos;ozone concentration&apos;, &amp;
+          ptr_lnd=this%forc_ozone_grc)    
+ 
      this%forc_pco2_grc(begg:endg) = spval
      call hist_addfld1d (fname=&apos;PCO2&apos;, units=&apos;Pa&apos;,  &amp;
           avgflag=&apos;A&apos;, long_name=&apos;atmospheric partial pressure of CO2&apos;, &amp;
[erik@yslogin3 clm4_5_1_r104_Fire_O3_spinupFinal]$ diff -cwb /glade/p/work/dll/clm4_5_1_r104/models/lnd/clm/src/biogeophys/OzoneBaseMod.F90  SourceMods/src.clm/
*** /glade/p/work/dll/clm4_5_1_r104/models/lnd/clm/src/biogeophys/OzoneBaseMod.F90	2015-02-18 15:49:08.658344475 -0700
--- SourceMods/src.clm/OzoneBaseMod.F90	2015-05-12 13:44:46.650799000 -0600
***************
*** 61,67 ****
       end subroutine Restart_interface
         
       subroutine CalcOzoneStress_interface(this, bounds, num_exposedvegp, filter_exposedvegp, &amp;
!           forc_pbot, forc_th, rssun, rssha, rb, ram, tlai)
         use decompMod    , only : bounds_type
         use shr_kind_mod , only : r8 =&gt; shr_kind_r8
         import :: ozone_base_type
--- 61,67 ----
       end subroutine Restart_interface
         
       subroutine CalcOzoneStress_interface(this, bounds, num_exposedvegp, filter_exposedvegp, &amp;
!           forc_ozone, forc_pbot, forc_th, rssun, rssha, rb, ram, tlai)
         use decompMod    , only : bounds_type
         use shr_kind_mod , only : r8 =&gt; shr_kind_r8
         import :: ozone_base_type
***************
*** 71,76 ****
--- 71,77 ----
         integer  , intent(in) :: num_exposedvegp           ! number of points in filter_exposedvegp
         integer  , intent(in) :: filter_exposedvegp(:)     ! patch filter for non-snow-covered veg
         real(r8) , intent(in) :: forc_pbot( bounds%begc: ) ! atmospheric pressure (Pa)
+        real(r8) , intent(in) :: forc_ozone( bounds%begg: )! ozone concentration 
         real(r8) , intent(in) :: forc_th( bounds%begc: )   ! atmospheric potential temperature (K)
         real(r8) , intent(in) :: rssun( bounds%begp: )     ! leaf stomatal resistance, sunlit leaves (s/m)
         real(r8) , intent(in) :: rssha( bounds%begp: )     ! leaf stomatal resistance, shaded leaves (s/m)
[erik@yslogin3 clm4_5_1_r104_Fire_O3_spinupFinal]$ diff -cwb /glade/p/work/dll/clm4_5_1_r104/models/lnd/clm/src/biogeophys/OzoneMod.F90  SourceMods/src.clm/
*** /glade/p/work/dll/clm4_5_1_r104/models/lnd/clm/src/biogeophys/OzoneMod.F90	2015-02-18 15:49:08.662545401 -0700
--- SourceMods/src.clm/OzoneMod.F90	2015-05-12 13:44:46.664578000 -0600
***************
*** 30,35 ****
--- 30,37 ----
       ! Private data members
       real(r8), pointer :: o3uptakesha_patch(:) ! ozone dose, shaded leaves (mmol O3/m^2)
       real(r8), pointer :: o3uptakesun_patch(:) ! ozone dose, sunlit leaves (mmol O3/m^2)
+ ! can delete after checking that ozone = o3test
+      real(r8), pointer :: forc_ozone(:)        ! ozone concentration (mol/mol) 
  
       ! NOTE(wjs, 2014-09-29) tlai_old_patch really belongs alongside tlai_patch in
       ! CanopyStateType.  But there are problems with any way I can think to implement
***************
*** 72,78 ****
    
    ! TODO(wjs, 2014-09-29) This parameter will eventually become a spatially-varying
    ! value, obtained from ATM
!   real(r8), parameter :: forc_ozone = 100._r8 * 1.e-9_r8  ! ozone partial pressure [mol/mol]
  
    ! TODO(wjs, 2014-09-29) The following parameters should eventually be moved to the
    ! params file. Parameters differentiated on veg type should be put on the params file
--- 74,80 ----
    
    ! TODO(wjs, 2014-09-29) This parameter will eventually become a spatially-varying
    ! value, obtained from ATM
! !  real(r8), parameter :: forc_ozone = 100._r8 * 1.e-9_r8  ! ozone partial pressure [mol/mol]
  
    ! TODO(wjs, 2014-09-29) The following parameters should eventually be moved to the
    ! params file. Parameters differentiated on veg type should be put on the params file
***************
*** 186,191 ****
--- 188,195 ----
  
      allocate(this%o3uptakesha_patch(begp:endp)) ; this%o3uptakesha_patch(:) = nan
      allocate(this%o3uptakesun_patch(begp:endp)) ; this%o3uptakesun_patch(:) = nan
+ !delete later
+     allocate(this%forc_ozone(bounds%begg:bounds%endg))        ; this%forc_ozone(:) = nan
      allocate(this%tlai_old_patch(begp:endp))    ; this%tlai_old_patch(:) = nan
  
    end subroutine InitAllocate
***************
*** 222,227 ****
--- 226,238 ----
           avgflag=&apos;A&apos;, long_name=&apos;total ozone flux into shaded leaves&apos;, &amp;
           ptr_patch=this%o3uptakesha_patch)
  
+ ! delete later
+ !    this%forc_ozone(bounds%begg:bounds%endg) = spval
+ !    call hist_addfld1d (fname=&apos;O3_TEST&apos;, units=&apos;mol/mol&apos;, &amp;
+ !         avgflag=&apos;A&apos;, long_name=&apos;ozone concentration&apos;, &amp;
+ !         ptr_lnd=this%forc_ozone)
+ 
+ 
    end subroutine InitHistory
  
    !-----------------------------------------------------------------------
***************
*** 316,328 ****
  
    !-----------------------------------------------------------------------
    subroutine CalcOzoneStress(this, bounds, num_exposedvegp, filter_exposedvegp, &amp;
!        forc_pbot, forc_th, rssun, rssha, rb, ram, tlai)
      !
      ! !DESCRIPTION:
      ! Calculate ozone stress.
      !
      ! !USES:
      use PatchType            , only : patch                
      !
      ! !ARGUMENTS:
      class(ozone_type)      , intent(inout) :: this
--- 327,340 ----
  
    !-----------------------------------------------------------------------
    subroutine CalcOzoneStress(this, bounds, num_exposedvegp, filter_exposedvegp, &amp;
!        forc_ozone, forc_pbot, forc_th, rssun, rssha, rb, ram, tlai)
      !
      ! !DESCRIPTION:
      ! Calculate ozone stress.
      !
      ! !USES:
      use PatchType            , only : patch                
+ !    use clm_varctl           , only : iulog
      !
      ! !ARGUMENTS:
      class(ozone_type)      , intent(inout) :: this
***************
*** 331,336 ****
--- 343,349 ----
      integer  , intent(in) :: filter_exposedvegp(:)     ! patch filter for non-snow-covered veg
      real(r8) , intent(in) :: forc_pbot( bounds%begc: ) ! atmospheric pressure (Pa)
      real(r8) , intent(in) :: forc_th( bounds%begc: )   ! atmospheric potential temperature (K)
+     real(r8) , intent(in) :: forc_ozone( bounds%begg: )! ozone concentration 
      real(r8) , intent(in) :: rssun( bounds%begp: )     ! leaf stomatal resistance, sunlit leaves (s/m)
      real(r8) , intent(in) :: rssha( bounds%begp: )     ! leaf stomatal resistance, shaded leaves (s/m)
      real(r8) , intent(in) :: rb( bounds%begp: )        ! boundary layer resistance (s/m)
***************
*** 341,346 ****
--- 354,360 ----
      integer  :: fp             ! filter index
      integer  :: p              ! patch index
      integer  :: c              ! column index
+     integer  :: g              ! gridcell index
  
      character(len=*), parameter :: subname = &apos;CalcOzoneStress&apos;
      !-----------------------------------------------------------------------
***************
*** 348,353 ****
--- 362,368 ----
      ! Enforce expected array sizes
      SHR_ASSERT_ALL((ubound(forc_pbot) == (/bounds%endc/)), errMsg(__FILE__, __LINE__))
      SHR_ASSERT_ALL((ubound(forc_th) == (/bounds%endc/)), errMsg(__FILE__, __LINE__))
+     SHR_ASSERT_ALL((ubound(forc_ozone) == (/bounds%endg/)), errMsg(__FILE__, __LINE__))
      SHR_ASSERT_ALL((ubound(rssun) == (/bounds%endp/)), errMsg(__FILE__, __LINE__))
      SHR_ASSERT_ALL((ubound(rssha) == (/bounds%endp/)), errMsg(__FILE__, __LINE__))
      SHR_ASSERT_ALL((ubound(rb) == (/bounds%endp/)), errMsg(__FILE__, __LINE__))
***************
*** 367,389 ****
      do fp = 1, num_exposedvegp
         p = filter_exposedvegp(fp)
         c = patch%column(p)
  
         ! Ozone stress for shaded leaves
         call CalcOzoneStressOnePoint( &amp;
!             forc_ozone=forc_ozone, forc_pbot=forc_pbot(c), forc_th=forc_th(c), &amp;
              rs=rssha(p), rb=rb(p), ram=ram(p), &amp;
              tlai=tlai(p), tlai_old=tlai_old(p), pft_type=patch%itype(p), &amp;
              o3uptake=o3uptakesha(p), o3coefv=o3coefvsha(p), o3coefg=o3coefgsha(p))
  
         ! Ozone stress for sunlit leaves
         call CalcOzoneStressOnePoint( &amp;
!             forc_ozone=forc_ozone, forc_pbot=forc_pbot(c), forc_th=forc_th(c), &amp;
              rs=rssun(p), rb=rb(p), ram=ram(p), &amp;
              tlai=tlai(p), tlai_old=tlai_old(p), pft_type=patch%itype(p), &amp;
              o3uptake=o3uptakesun(p), o3coefv=o3coefvsun(p), o3coefg=o3coefgsun(p))
  
         tlai_old(p) = tlai(p)
  
      end do
  
      end associate
--- 382,409 ----
      do fp = 1, num_exposedvegp
         p = filter_exposedvegp(fp)
         c = patch%column(p)
+        g = patch%gridcell(p)
+ ! delete later
+        this%forc_ozone(g) = forc_ozone(g)
  
         ! Ozone stress for shaded leaves
         call CalcOzoneStressOnePoint( &amp;
!             forc_ozone=forc_ozone(g), forc_pbot=forc_pbot(c), forc_th=forc_th(c), &amp;
              rs=rssha(p), rb=rb(p), ram=ram(p), &amp;
              tlai=tlai(p), tlai_old=tlai_old(p), pft_type=patch%itype(p), &amp;
              o3uptake=o3uptakesha(p), o3coefv=o3coefvsha(p), o3coefg=o3coefgsha(p))
  
         ! Ozone stress for sunlit leaves
         call CalcOzoneStressOnePoint( &amp;
!             forc_ozone=forc_ozone(g), forc_pbot=forc_pbot(c), forc_th=forc_th(c), &amp;
              rs=rssun(p), rb=rb(p), ram=ram(p), &amp;
              tlai=tlai(p), tlai_old=tlai_old(p), pft_type=patch%itype(p), &amp;
              o3uptake=o3uptakesun(p), o3coefv=o3coefvsun(p), o3coefg=o3coefgsun(p))
  
         tlai_old(p) = tlai(p)
  
+ !       write(iulog,*) &apos;[O3] = &apos;,g,forc_ozone(g),o3uptakesun(p),o3uptakesha(p),rssun(p)
+ 
      end do
  
      end associate
[erik@yslogin3 clm4_5_1_r104_Fire_O3_spinupFinal]$ diff -cwb /glade/p/work/dll/clm4_5_1_r104/models/lnd/clm/src/biogeophys/OzoneOffMod.F90  SourceMods/src.clm/
*** /glade/p/work/dll/clm4_5_1_r104/models/lnd/clm/src/biogeophys/OzoneOffMod.F90	2015-02-18 15:49:08.604774935 -0700
--- SourceMods/src.clm/OzoneOffMod.F90	2015-05-12 13:44:46.685219000 -0600
***************
*** 78,84 ****
    end subroutine Restart
  
    subroutine CalcOzoneStress(this, bounds, num_exposedvegp, filter_exposedvegp, &amp;
!           forc_pbot, forc_th, rssun, rssha, rb, ram, tlai)
  
      class(ozone_off_type) , intent(inout) :: this
      type(bounds_type)      , intent(in)    :: bounds
--- 78,84 ----
    end subroutine Restart
  
    subroutine CalcOzoneStress(this, bounds, num_exposedvegp, filter_exposedvegp, &amp;
!           forc_ozone, forc_pbot, forc_th, rssun, rssha, rb, ram, tlai)
  
      class(ozone_off_type) , intent(inout) :: this
      type(bounds_type)      , intent(in)    :: bounds
***************
*** 86,91 ****
--- 86,92 ----
      integer  , intent(in) :: filter_exposedvegp(:)     ! patch filter for non-snow-covered veg
      real(r8) , intent(in) :: forc_pbot( bounds%begc: ) ! atmospheric pressure (Pa)
      real(r8) , intent(in) :: forc_th( bounds%begc: )   ! atmospheric potential temperature (K)
+     real(r8) , intent(in) :: forc_ozone( bounds%begg: )! ozone concentration
      real(r8) , intent(in) :: rssun( bounds%begp: )     ! leaf stomatal resistance, sunlit leaves (s/m)
      real(r8) , intent(in) :: rssha( bounds%begp: )     ! leaf stomatal resistance, shaded leaves (s/m)
      real(r8) , intent(in) :: rb( bounds%begp: )        ! boundary layer resistance (s/m)
***************
*** 96,101 ****
--- 97,103 ----
      ! ozone-off can pick up problems with the call to this routine)
      SHR_ASSERT_ALL((ubound(forc_pbot) == (/bounds%endc/)), errMsg(__FILE__, __LINE__))
      SHR_ASSERT_ALL((ubound(forc_th) == (/bounds%endc/)), errMsg(__FILE__, __LINE__))
+     SHR_ASSERT_ALL((ubound(forc_ozone) == (/bounds%endg/)), errMsg(__FILE__, __LINE__))
      SHR_ASSERT_ALL((ubound(rssun) == (/bounds%endp/)), errMsg(__FILE__, __LINE__))
      SHR_ASSERT_ALL((ubound(rssha) == (/bounds%endp/)), errMsg(__FILE__, __LINE__))
      SHR_ASSERT_ALL((ubound(rb) == (/bounds%endp/)), errMsg(__FILE__, __LINE__))

[erik@yslogin3 clm4_5_1_r104_Fire_O3_spinupFinal]$ diff -cwb /glade/p/work/dll/clm4_5_1_r104/models/lnd/clm/src/biogeophys/CanopyFluxesMod.F90  SourceMods/src.clm/
*** /glade/p/work/dll/clm4_5_1_r104/models/lnd/clm/src/biogeophys/CanopyFluxesMod.F90	2015-02-18 15:49:08.646431176 -0700
--- SourceMods/src.clm/CanopyFluxesMod.F90	2015-05-12 13:44:46.590002000 -0600
***************
*** 293,298 ****
--- 293,299 ----
           forc_q                 =&gt; atm2lnd_inst%forc_q_downscaled_col           , &amp; ! Input:  [real(r8) (:)   ]  atmospheric specific humidity (kg/kg)                                 
           forc_pbot              =&gt; atm2lnd_inst%forc_pbot_downscaled_col        , &amp; ! Input:  [real(r8) (:)   ]  atmospheric pressure (Pa)                                             
           forc_th                =&gt; atm2lnd_inst%forc_th_downscaled_col          , &amp; ! Input:  [real(r8) (:)   ]  atmospheric potential temperature (Kelvin)                            
+          forc_ozone             =&gt; atm2lnd_inst%forc_ozone_grc                  , &amp; ! Input:  [real(r8) (:)   ]  ozone concentration (mol/mol) 
           forc_rho               =&gt; atm2lnd_inst%forc_rho_downscaled_col         , &amp; ! Input:  [real(r8) (:)   ]  density (kg/m**3)                                                     
           forc_t                 =&gt; atm2lnd_inst%forc_t_downscaled_col           , &amp; ! Input:  [real(r8) (:)   ]  atmospheric temperature (Kelvin)                                      
           forc_u                 =&gt; atm2lnd_inst%forc_u_grc                      , &amp; ! Input:  [real(r8) (:)   ]  atmospheric wind speed in east direction (m/s)                        
***************
*** 1145,1150 ****
--- 1146,1152 ----
             bounds, fn, filterp, &amp;
             forc_pbot = atm2lnd_inst%forc_pbot_downscaled_col(bounds%begc:bounds%endc), &amp;
             forc_th   = atm2lnd_inst%forc_th_downscaled_col(bounds%begc:bounds%endc), &amp;
+            forc_ozone= atm2lnd_inst%forc_ozone_grc(bounds%begg:bounds%endg), &amp;
             rssun     = photosyns_inst%rssun_patch(bounds%begp:bounds%endp), &amp;
             rssha     = photosyns_inst%rssha_patch(bounds%begp:bounds%endp), &amp;
             rb        = frictionvel_inst%rb1_patch(bounds%begp:bounds%endp),       
[erik@yslogin3 clm4_5_1_r104_Fire_O3_spinupFinal]$ diff -cwb /glade/p/work/dll/clm4_5_1_r104/models/lnd/clm/src/cpl/clm_cpl_indices.F90  SourceMods/src.clm/
*** /glade/p/work/dll/clm4_5_1_r104/models/lnd/clm/src/cpl/clm_cpl_indices.F90	2015-02-18 15:49:11.260046207 -0700
--- SourceMods/src.clm/clm_cpl_indices.F90	2015-05-12 13:44:46.606482000 -0600
***************
*** 98,103 ****
--- 98,104 ----
    integer, public ::index_x2l_Faxa_dstdry2    ! flux: Size 2 dust -- dry deposition
    integer, public ::index_x2l_Faxa_dstdry3    ! flux: Size 3 dust -- dry deposition
    integer, public ::index_x2l_Faxa_dstdry4    ! flux: Size 4 dust -- dry deposition
+   integer, public ::index_x2l_Faxa_ozone
   
    integer, public ::index_x2l_Flrr_flood      ! rtm-&gt;lnd rof (flood) flux
    integer, public ::index_x2l_Flrr_volr      ! rtm-&gt;lnd rof volr
***************
*** 225,230 ****
--- 226,232 ----
      index_x2l_Flrr_volr     = mct_avect_indexra(x2l,&apos;Flrr_volr&apos;)
  
      index_x2l_Faxa_lwdn     = mct_avect_indexra(x2l,&apos;Faxa_lwdn&apos;)
+     index_x2l_Faxa_ozone    = mct_avect_indexra(x2l,&apos;Faxa_ozone&apos;)
      index_x2l_Faxa_rainc    = mct_avect_indexra(x2l,&apos;Faxa_rainc&apos;)
      index_x2l_Faxa_rainl    = mct_avect_indexra(x2l,&apos;Faxa_rainl&apos;)
      index_x2l_Faxa_snowc    = mct_avect_indexra(x2l,&apos;Faxa_snowc&apos;)      
[erik@yslogin3 clm4_5_1_r104_Fire_O3_spinupFinal]$ diff -cwb /glade/p/work/dll/clm4_5_1_r104/models/lnd/clm/src/cpl/lnd_import_export.F90  SourceMods/src.clm/
*** /glade/p/work/dll/clm4_5_1_r104/models/lnd/clm/src/cpl/lnd_import_export.F90	2015-02-18 15:49:11.261632747 -0700
--- SourceMods/src.clm/lnd_import_export.F90	2015-05-12 13:44:46.642144000 -0600
***************
*** 119,124 ****
--- 119,125 ----
         atm2lnd_inst%forc_pbot_not_downscaled_grc(g)  = x2l(index_x2l_Sa_pbot,i)      ! ptcmxy  Atm state Pa
         atm2lnd_inst%forc_t_not_downscaled_grc(g)     = x2l(index_x2l_Sa_tbot,i)      ! forc_txy  Atm state K
         atm2lnd_inst%forc_lwrad_not_downscaled_grc(g) = x2l(index_x2l_Faxa_lwdn,i)    ! flwdsxy Atm flux  W/m^2
+        atm2lnd_inst%forc_ozone_grc(g)                = x2l(index_x2l_Faxa_ozone,i)
  
         forc_rainc                                    = x2l(index_x2l_Faxa_rainc,i)   ! mm/s
         forc_rainl                                    = x2l(index_x2l_Faxa_rainl,i)   ! mm/s</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7406</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-03-14 12:17:12 -0600</bug_when>
    <thetext>I added some extra print statements to see what was going on...

 227: CH4 Conservation Error in CH4Mod during diffusion, nstep, c, errch4 (mol /m^2.timestep)         266      201020                       NaN
 227: sat, lake =            0 F
 227: ch4_surf_aere, ch4_surf_ebul, ch3_surf_diff, dtime    0.0000000000000000        0.0000000000000000                            NaN   1800.0000000000000     
 227: conc_ch4                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN
 227: conc_ch4_bef   3.8328039302938165E-005   2.9561403443981704E-005   2.6359916480942497E-005   2.4435337229353914E-005   2.3147560124220125E-005   2.2404625980298573E-005   2.0924944088661782E-005   1.9404767558147072E-005   1.7936954369688352E-005   1.5384162504878149E-005   1.2893399328101690E-005   1.0338822482775341E-005   7.8572942037786159E-006   5.4572021687422612E-006   3.3105790076109817E-006   1.7007514334411750E-006   7.1782467412185338E-007   2.4280145167977517E-007   6.5108239992595754E-008   1.5836061520245128E-008
 227: ch4_prod_depth   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000     
 227: ch4_oxid_depth                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN
 227: ch4_aere_depth   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000     
 227: epsilon_t-1                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN
 227: conc_ch4_rel                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN
 227: watsat  0.69094611637956804       0.55403635758411096       0.51465038107298955       0.49052449073912030       0.47792207960252064       0.47616899096880327       0.46805018132178999       0.46283752477255785       0.46283752477255785       0.45245999999999997       0.45245999999999997       0.45245999999999997       0.45245999999999997       0.45245999999999997       0.45245999999999997       0.45245999999999997       0.45245999999999997       0.45245999999999997       0.45245999999999997       0.45245999999999997     
 227: k_h_cc                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN
 227: h2osoi_vol_min  0.69094611637956804       0.55403635758411096       0.51465038107298955       0.49052449073912030       0.47792207960252064       0.47616899096880327       0.46805018132178999       0.46283752477255785       0.46283752477255785       0.45245999999999997       0.45245999999999997       0.45245999999999997       0.45245999999999997       0.45245999999999997       0.45245999999999997       0.45245999999999997       0.45245999999999997       0.45245999999999997       0.45245999999999997       0.45245999999999997     
 227: liqfrac   1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000        1.0000000000000000     
 227: t_soisno   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000                            NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN                       NaN
 227: t_grnd                       NaN
 227: Latdeg,Londeg=   53.286844012453230        57.510967220423055     
 227: ENDRUN: ERROR: CH4 Conservation Error in CH4Mod during diffusionERROR in /glade/scratch/erik/cesm1_5_alpha06c/components/clm/src/biogeochem/ch4Mod.F90 at line 3598                                                                                                                                                                                                                                                                                                                                                                                                                             
 227: ERROR: Unknown error submitted to shr_sys_abort.
 227:#0  0x2BA8AEE26B57
 227:#1  0x159F44D in __shr_sys_mod_MOD_shr_sys_backtrace
 227:#2  0x159F7A6 in __shr_sys_mod_MOD_shr_sys_abort
 227:#3  0xDDB8AA in __abortutils_MOD_endrun_vanilla
 227:#4  0x1093399 in __ch4mod_MOD_ch4_tran at ch4Mod.F90:0
 227:#5  0x10A3E8C in __ch4mod_MOD_ch4
 227:#6  0xDE160C in __clm_driver_MOD_clm_drv._omp_fn.3 at clm_driver.F90:0
 227:#7  0x2BA8AF3BB96E
 227:#8  0xDE26DB in __clm_driver_MOD_clm_drv
 227:#9  0xDD770B in __lnd_comp_mct_MOD_lnd_run_mct
 227:#10  0x41E585 in __component_mod_MOD_component_run
 227:#11  0x40C91A in __cesm_comp_mod_MOD_cesm_run</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2292</bug_id>
          
          <creation_ts>2016-03-02 15:28:00 -0700</creation_ts>
          <short_desc>NPP_BURNEDOFF doesn&apos;t seem to be restarting correctly</short_desc>
          <delta_ts>2016-04-13 14:24:49 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.4.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>dlawren</cc>
    
    <cc>mvertens</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7385</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-03-02 15:28:18 -0700</bug_when>
    <thetext>This issue doesn&apos;t show up in CLM standalone testing (possibly just by random chance), but Mariana found a case where NPP_BURNEDOFF is different for a B1850 case. Talking this over with Rosie, this is a kludge that we don&apos;t expect to happen often. It does pass balance checks, and as noted it passes the standard offline CLM testing. She&apos;s not sure why it passes balance checks, but not a restart test. And it shouldn&apos;t have a large effect on the code. So running with this issue is probably OK.

Here is Mariana&apos;s email on this regarding what she did specifically...

I am not finding any problems in testing restarts. As a sanity check I did the following:

1) checkout out the same code base as Cecile
2) created a test using the following
./create_test -testname ERS_Ld7.f09_g16.B1850.yellowstone_intel.allactive-defaultio -testid hannay
3) modified user_nl_clm, and user_nl_cpl and user_nl_cpl as in Cecile&apos;s case
4) modified env_run.xml as in Cecile&apos;s case

The test built and ran successfuly with no problem. The output is below.

DONE ERS_Ld7.f09_g16.B1850.yellowstone_intel.allactive-defaultio : (test finished, successful coupler log) 
--- Test Functionality  ---:
PASS ERS_Ld7.f09_g16.B1850.yellowstone_intel.allactive-defaultio.cam.h0.nc : test compare cam.h0 (.base and .rest files) 
PASS ERS_Ld7.f09_g16.B1850.yellowstone_intel.allactive-defaultio.cice.h.nc : test compare cice.h (.base and .rest files) 
FAIL ERS_Ld7.f09_g16.B1850.yellowstone_intel.allactive-defaultio.clm2.h0.nc : test compare clm2.h0 (.base and .rest files) 
PASS ERS_Ld7.f09_g16.B1850.yellowstone_intel.allactive-defaultio.pop.h.nc : test compare pop.h (.base and .rest files) 
PASS ERS_Ld7.f09_g16.B1850.yellowstone_intel.allactive-defaultio.cism.h.nc : test compare cism.h (.base and .rest files) 
PASS ERS_Ld7.f09_g16.B1850.yellowstone_intel.allactive-defaultio.cpl.hi.nc : test compare cpl.hi (.base and .rest files) 
FAIL ERS_Ld7.f09_g16.B1850.yellowstone_intel.allactive-defaultio : test functionality summary (ERS_test) 
PASS ERS_Ld7.f09_g16.B1850.yellowstone_intel.allactive-defaultio.memleak

However, that said - clm did not pass the restart history file test for only the following field:
  RMS NPP_BURNEDOFF                    2.7888E-08            NORMALIZED  1.2109E-01

My testdir is:
/glade/u/home/mvertens/src/cesm1_5_alpha06_cntlexp05/cime/scripts/ERS_Ld7.f09_g16.B1850.yellowstone_intel.allactive-defaultio.hannay

My executable dir is:
/glade/scratch/mvertens/ERS_Ld7.f09_g16.B1850.yellowstone_intel.allactive-defaultio.hannay/run</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7416</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-03-18 12:20:42 -0600</bug_when>
    <thetext>I&apos;m also seeing differences in NPP_BURNEDOFF in the difference between respmods_n12_clm4_5_7_r169 and respmods_n13_clm4_5_7_r172. I&apos;m going to ignore that, because I think this is related to this issue where we know there are issues with how NPP_BURNDEDOFF is handled

For example here is a case that shows the issue...

grep RMS ERP_P15x2_Lm25.f10_f10.ICLM50BGCDVCROP.yellowstone_intel.clm-monthly.GC.160318-012401/TestStatus.log 
   RMS NPP_BURNEDOFF                    3.1330E-09            NORMALIZED  2.5670E-02
   RMS NPP_BURNEDOFF                    5.9461E-08            NORMALIZED  4.7349E-01</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7440</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-04-13 14:24:49 -0600</bug_when>
    <thetext>For now I&apos;m making NPP_BURNEDOFF inactive. That should be changed back once this bug is fixed.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2290</bug_id>
          
          <creation_ts>2016-02-26 17:21:00 -0700</creation_ts>
          <short_desc>Problem with use_bedrock on hobart.</short_desc>
          <delta_ts>2016-02-26 17:53:23 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.4.z Development</version>
          <rep_platform>PC</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>dlawren</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
    
    <cc>swensosc</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7378</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-02-26 17:21:34 -0700</bug_when>
    <thetext>These tests fail with respmods_n10_clm4_5_8_r169 on hobart. I believe the same error would show up on the trunk (but I&apos;ll verify).

ERI_D_Ld9_P24x1.f10_f10.ICRUCLM50BGC.hobart_nag.clm-reduceOutput
SMS_D_Ld1_Mmpi-serial.1x1_vancouverCAN.I1PTCLM50.hobart_nag.clm-default
SMS_Ld5_D_P24x1.f10_f10.IHISTCLM50BGC.hobart_nag.clm-monthly

The traceback is...

Runtime Error: /fs/cgd/data0/erik/clm_respmods/components/clm/src/biogeophys/SoilWaterMovementMod.F90, line 1370: Rank 1 of AMX(FILTER_HYDROLOGYC(FC),2:NLAYERS) has extent 15 instead of 19
Program terminated by fatal error
/fs/cgd/data0/erik/clm_respmods/components/clm/src/biogeophys/SoilWaterMovementMod.F90, line 1370: Error occurred in SOILWATERMOVEMENTMOD:SOILWATER_MOISTURE_FORM
/fs/cgd/data0/erik/clm_respmods/components/clm/src/biogeophys/SoilWaterMovementMod.F90, line 273: Called by SOILWATERMOVEMENTMOD:SOILWATER
/fs/cgd/data0/erik/clm_respmods/components/clm/src/biogeophys/HydrologyNoDrainageMod.F90, line 184: Called by HYDROLOGYNODRAINAGEMOD:HYDROLOGYNODRAINAGE
/fs/cgd/data0/erik/clm_respmods/components/clm/src/main/clm_driver.F90, line 570: Called by CLM_DRIVER:CLM_DRV
/fs/cgd/data0/erik/clm_respmods/components/clm/src/cpl/lnd_comp_mct.F90, line 437: Called by LND_COMP_MCT:LND_RUN_MCT
/fs/cgd/data0/erik/clm_respmods/cime/driver_cpl/driver/component_mod.F90, line 1044: Called by COMPONENT_MOD:COMPONENT_RUN
/fs/cgd/data0/erik/clm_respmods/cime/driver_cpl/driver/cesm_comp_mod.F90, line 2416: Called by CESM_COMP_MOD:CESM_RUN
/fs/cgd/data0/erik/clm_respmods/cime/driver_cpl/driver/cesm_driver.F90, line 93: Called by CESM_DRIVER</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7379</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-02-26 17:53:23 -0700</bug_when>
    <thetext>The following changes allow it to work...

Index: /scratch/cluster/erik/clm4_5_8_r169/components/clm/src/biogeophys/SoilWaterMovementMod.F90
===================================================================
--- /scratch/cluster/erik/clm4_5_8_r169/components/clm/src/biogeophys/SoilWaterMovementMod.F90	(revision 77035)
+++ /scratch/cluster/erik/clm4_5_8_r169/components/clm/src/biogeophys/SoilWaterMovementMod.F90	(working copy)
@@ -1367,12 +1367,12 @@
                ! copy); however, intent(inout)
 
                ! get a copy of the input vectors
-               dLow = amx(filter_hydrologyc(fc),2:nlayers)
-               diag = bmx(filter_hydrologyc(fc),1:nlayers)
-               dUpp = cmx(filter_hydrologyc(fc),1:nlayers-1)
+               dLow(1:nlayers-1) = amx(filter_hydrologyc(fc),2:nlayers)
+               diag(1:nlayers)   = bmx(filter_hydrologyc(fc),1:nlayers)
+               dUpp(1:nlayers-1) = cmx(filter_hydrologyc(fc),1:nlayers-1)
 
                ! get a copy of the residual vector
-               rhs = rmx(filter_hydrologyc(fc),1:nlayers)
+               rhs(1:nlayers) = rmx(filter_hydrologyc(fc),1:nlayers)
 
                ! call the lapack tri-diagonal solver
                call dgtsv(nlayers,   &amp; ! intent(in):    [integer]       number of state variables</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2289</bug_id>
          
          <creation_ts>2016-02-26 10:49:00 -0700</creation_ts>
          <short_desc>default finidat_interp_dest file name should have instance number</short_desc>
          <delta_ts>2017-10-17 16:10:31 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.5.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P1</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>fischer</cc>
    
    <cc>jedwards</cc>
    
    <cc>mvertens</cc>
    
    <cc>raeder</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7377</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-02-26 10:49:37 -0700</bug_when>
    <thetext>Kevin Raeder pointed out that the default file name for finidat_interp_dest (&apos;finidat_interp_dest.nc&apos;) leads init_interp to stomp on itself when using use_init_interp with multi-instance. We should change the default to have the instance number in the file name.

In the meantime, the workaround is to explicitly specify finidat_interp_dest in each instance&apos;s user_nl_clm.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8059</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-06-05 21:07:40 -0600</bug_when>
    <thetext>One possible solution would be to give build-namelist knowledge of the instance index. 

This is similar to what&apos;s done for CISM - and specifically what I&apos;m working on right now to get multi-instance branch / hybrid runs to work right. For CISM, buildnml passes the inst_string to build-namelist as a command-line argument; then this inst_string can be used to construct file names. We could do something similar for CLM.

(Note that finidat_interp_dest is not currently invoked by CLM&apos;s build-namelist, so we just use the hard-coded default unless the user explicitly specifies it. The above solution would require putting finidat_interp_dest in the lnd_in file, which is probably a good thing anyway.)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8277</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-10-17 16:10:31 -0600</bug_when>
    <thetext>Changing this to P1 because I think it&apos;s important to resolve this for the release.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2288</bug_id>
          
          <creation_ts>2016-02-22 10:27:00 -0700</creation_ts>
          <short_desc>ch4 placement in driver will cause problems if BeTR is used for nitrogen</short_desc>
          <delta_ts>2016-02-22 10:27:57 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.5.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>dlawren</cc>
    
    <cc>gbisht</cc>
    
    <cc>jinyuntang</cc>
    
    <cc>oleson</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7369</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-02-22 10:27:57 -0700</bug_when>
    <thetext>The fix for bug 2225 and bug 2287, brought to the trunk in clm4_5_8_r168 (which returns the call to ch4 to where it was in clm4_5_12 and earlier), will cause problems if BeTR is ever used for nitrogen.

Here is an email from Jinyun about this:

&gt;  Too bad that move caused the travel. My original intention was to make a
&gt;  consistent tracking of nitrogen leaching in betr with hydrology code with the
&gt;  active ch4 cycle. As it is now in tag 168, a serious inconsistency would arise
&gt;  if one use betr to track nitrogen cycle with active ch4 code. However, since
&gt;  there is no intent to do active bgc in betr, the flip back is OK. Yet, I do
&gt;  suspect this flip back will cause trouble down the road if people intend to
&gt;  use betr for carbon isotope transport, even though I personally will not do
&gt;  it. Therefore, my suggestion is either to separate the set value stuff for
&gt;  ch4, so it will not zero out methane flux or indicate in somewhere that
&gt;  caution against people to use betr for purpose other than water isotopes (this
&gt;  basically push the problem to the future, and someone has to implement the
&gt;  separation strategy again).

Without having a very good understanding of this, I agree that separating the set value stuff for ch4 seems like the best solution here. Once that is done, the change to the driver sequencing in clm4_5_8_r168 should be reverted.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2284</bug_id>
          
          <creation_ts>2016-02-16 14:09:00 -0700</creation_ts>
          <short_desc>remove duplication in setting of history fields for carbon isotopes (c13 and c14)</short_desc>
          <delta_ts>2016-07-07 11:58:37 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.5.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7347</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-02-16 14:09:01 -0700</bug_when>
    <thetext>There is a lot of near-duplicate code in the InitHistory subroutines of CNVegCarbonStateType.F90 and SoilBiogeochemCarbonStateType.F90 (and maybe elsewhere): Basically the same blocks of code are done for c12, c13 and c14. At a recent CLM-CMT meeting, we decided that this duplication should be removed. Steps to doing so are:

(1) Examine differences between the blocks for c12, c13, c14: confirm that the below steps capture all relevant differences

(2) For variables that currently have hist fields for c12, but not c13 / c14: determine if the exclusion for c13 &amp; c14 is intentional or accidental. (This step is the main thing stopping me from just going ahead and doing this now.)

(3) Introduce the following variables that differ for each instance:

- shortname_prefix: blank for c12, &apos;C13_&apos; or &apos;C14_&apos;

- longname_prefix: blank for c12, &apos;C13 &apos; or &apos;C14 &apos;

- units: &apos;gC&apos;, &apos;gC13&apos;, &apos;gC14&apos;

(4) Use the above variables where they are needed; e.g.:

 call hist_addfld1d (fname=shortname_prefix//&apos;LEAFC&apos;, ...)

(5) Introduce a variable default_for_non_isotope_fields (probably can come up with a better name). This is &apos;active&apos; for c12, &apos;inactive&apos; for c13 and c14. Then, for fields that are currently active by default for c12, but inactive by default for c13 or c14 (or weren&apos;t added at all for c13/c14), set: default=default_for_non_isotope_fields

(6) Check header of an h0 history file in a BGC case: should be the same as before</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7400</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-03-11 10:25:05 -0700</bug_when>
    <thetext>On a branch, I am adding a new class, tentatively called species_base_type (with extensions), for handling this. I&apos;m trying it out in the reworked WoodProducts code.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2283</bug_id>
          
          <creation_ts>2016-02-16 13:38:00 -0700</creation_ts>
          <short_desc>dynamic landunits: handle methane with changing lake area</short_desc>
          <delta_ts>2016-07-07 11:56:44 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.5.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P5</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Bill Sacks">sacks</assigned_to>
          <cc>erik</cc>
    
    <cc>oleson</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7346</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-02-16 13:38:10 -0700</bug_when>
    <thetext>The methane code (ch4Mod.F90) implicitly assumes that finundated is 1 for lakes. Thus, if lake area increases, the right thing to do is probably to immediately inundate any land it took over, with code similar to what happens right now when inundated area increases.

Decreases in lake area should be handled appropriately now, but increases in lake area are not. Currently, there is no way for lakes to increase in area, but this will need to be revisited once they can.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2277</bug_id>
          
          <creation_ts>2016-01-28 09:54:00 -0700</creation_ts>
          <short_desc>water balance error in clm5 kitchen sink test when adding zbedrock to surface dataset</short_desc>
          <delta_ts>2016-07-07 07:23:29 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.5.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>dlawren</cc>
    
    <cc>rfisher</cc>
    
    <cc>swensosc</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7328</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-01-28 09:54:11 -0700</bug_when>
    <thetext>From https://svn-ccsm-models.cgd.ucar.edu/clm2/branch_tags/rework_fglcmask_tags/rework_fglcmask_n08_clm4_5_7_r164

this test dies with a water balance error:

ERS_Ly3.f10_f10.I1850CRUCLM50BGCCROP.yellowstone_intel.clm-clm50KSinkMOut

The full error message is below.

The relevant change on this branch is that it uses a new surface dataset, which includes zbedrock - so it triggers the new use_bedrock code. I have confirmed that the test passes if I point to a version of the new surface dataset that is identical except that zbedrock is removed.

  27: WARNING:  water balance error  nstep=         8393  local indexc=         3872 
  27:  errh2o=   2.401732114284960E-005
  27: clm model is stopping - error is greater than 1e-5 (mm)
  27: nstep                 =         8393
  27: errh2o                =   2.401732114284960E-005
  27: forc_rain             =   0.000000000000000E+000
  27: forc_snow             =   0.000000000000000E+000
  27: endwb                 =    6951.93139686015     
  27: begwb                 =    6951.98520312504     
  27: qflx_evap_tot         =   5.975657251271233E-003
  27: qflx_irrig            =   0.000000000000000E+000
  27: qflx_surf             =   0.000000000000000E+000
  27: qflx_h2osfc_surf      =   0.000000000000000E+000
  27: qflx_qrgwl            =   0.000000000000000E+000
  27: qflx_drain            =   4.785462495282254E-002
  27: qflx_drain_perched    =   0.000000000000000E+000
  27: qflx_flood            =   0.000000000000000E+000
  27: qflx_ice_runoff_snwcp =   0.000000000000000E+000
  27: qflx_ice_runoff_xs    =   0.000000000000000E+000
  27: qflx_glcice_melt      =   0.000000000000000E+000
  27: qflx_glcice_frz       =   0.000000000000000E+000
  27: clm model is stopping
  27: calling getglobalwrite with decomp_index=         3872  and clmlevel= column
  27: local  column   index =         3872
  27: global column   index =         3579
  27: global landunit index =         1038
  27: global gridcell index =          238
  27: gridcell longitude    =    15.0000000000000     
  27: gridcell latitude     =    70.0000000000000     
  27: column   type         =          215
  27: landunit type         =            2
  27: ENDRUN:
  27: ERROR in BalanceCheckMod.F90 at line 420</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7388</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-03-03 13:59:15 -0700</bug_when>
    <thetext>Sean Swenson says he ran a case that was identical to this but with use_dynroot off, and it ran to completion. So it seems likely that dyn roots are the problem here.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7586</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-07-07 07:23:29 -0600</bug_when>
    <thetext>Erik: This passes in my latest round of testing (for what will be clm4_5_9_r185). Should this bug be closed as fixed?</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2275</bug_id>
          
          <creation_ts>2016-01-27 15:07:00 -0700</creation_ts>
          <short_desc>better error checking needed for copying urban parameters in mksurfdata.pl</short_desc>
          <delta_ts>2016-01-27 15:07:02 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.5.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7326</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-01-27 15:07:02 -0700</bug_when>
    <thetext>For this code in mksurfdata.pl (which was added based on bug 1681):

            #
            # If urban point, overwrite urban variables from previous surface dataset to this one
            #
            if ( $urb_pt &amp;&amp; ! $opts{&apos;no_surfdata&apos;} ) {
               my $prvsurfdata = `$scrdir/../../../bld/queryDefaultNamelist.pl $queryopts -var fsurdat`;
               if ( $? != 0 ) {
                  die &quot;ERROR:: previous surface dataset file NOT found\n&quot;;
               }
               chomp( $prvsurfdata );
               my $varlist = &quot;CANYON_HWR,EM_IMPROAD,EM_PERROAD,EM_ROOF,EM_WALL,HT_ROOF,THICK_ROOF,THICK_WALL,T_BUILDING_MAX,T_BUILDING_MIN,WIND_HGT_CANYON,WTLUNIT_ROOF,WTROAD_PERV,ALB_IMPROAD_DIR,ALB_IMPROAD_DIF,ALB_PERROAD_DIR,ALB_PERROAD_DIF,ALB_ROOF_DIR,ALB_ROOF_DIF,ALB_WALL_DIR,ALB_WALL_DIF,TK_ROOF,TK_WALL,TK_IMPROAD,CV_ROOF,CV_WALL,CV_IMPROAD,NLEV_IMPROAD,PCT_URBAN,URBAN_REGION_ID&quot;;
               print &quot;Overwrite urban parameters with previous surface dataset values\n&quot;;
               $cmd = &quot;ncks -A -v $varlist $prvsurfdata $fsurdat_fname&quot;;
               print &quot;$cmd\n&quot;;
               if ( ! $opts{&apos;debug&apos;} ) { system( $cmd ); }
            }

I discovered – the hard way – that there is no error checking on the ncks command. I had been iteratively making new surface datasets and updating the namelist_defaults, and apparently one time I ran this not all of the surface datasets in namelist_defaults actually existed in the inputdata space. So the ncks command failed.

The big problem here is that, when this fails (or even if the &apos;die&apos; near the start of this block is executed), the surface datasets are left there. So, unless you look carefully at the output of the mksurfdata.pl script, it looks like the surface datasets were created correctly, when in fact all of these urban fields are wrong.

So: I propose that, if either (a) the &apos;die&apos; in this block is executed, or (b) the ncks command fails, then the surface dataset should be removed – or maybe renamed to something like &quot;$fsurdat_fname.INCOMPLETE&quot;... in any case, something that will prevent it from being used accidentally.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2274</bug_id>
          
          <creation_ts>2016-01-26 20:25:00 -0700</creation_ts>
          <short_desc>landuse_timeseries_text_files may stomp on each other when making all surface datasets</short_desc>
          <delta_ts>2016-07-07 11:55:29 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.5.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7325</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-01-26 20:25:09 -0700</bug_when>
    <thetext>About a year ago, Ben made some changes to the file names in mksurfdata.pl so that multiple runs wouldn&apos;t stomp on each other. However, it looks like the $landuse_timeseries_text_file (set by write_transient_timeseries_file) could have the same file name in multiple runs. From a quick look, I&apos;m guessing that two files with identical names would have the same contents. If that&apos;s true, then this is only a problem if you get unlucky in terms of timing: one process is trying to read the file just as another is in the midst of rewriting it, so that the file is incomplete for the read.

The solution could be to add more qualifiers to the name of this file, so that it is unique - similarly to what is done for the other files. (I&apos;m reworking this code significantly in a branch that I&apos;m about to bring to the trunk.) It just isn&apos;t totally straightforward to do this, because of the existing logic for this file name.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2271</bug_id>
          
          <creation_ts>2016-01-21 12:27:00 -0700</creation_ts>
          <short_desc>CLM history file name length too short</short_desc>
          <delta_ts>2016-01-21 12:27:53 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Alice Bertini">aliceb</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7321</commentid>
    <comment_count>0</comment_count>
    <who name="Alice Bertini">aliceb</who>
    <bug_when>2016-01-21 12:27:53 -0700</bug_when>
    <thetext>The length for the history filenames for CLM (and subsequently RTM and MOSART which 
used copies of some of the CLM code) are too short when running the CESM tests with long test names. This limitation causes some tests to fail. Ben investigated the CLM code and found the filename length to be hardcoded in numerous places and even reached into other shared code like PIO. The linux file system allows for filenames of up to 255 characters, excluding the full path. The current limit in CLM and RTM and MOSART is set to 150 characters.

This is a problem across all test machines.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2269</bug_id>
          
          <creation_ts>2016-01-19 12:04:00 -0700</creation_ts>
          <short_desc>log(0) possibility on respmods branch...</short_desc>
          <delta_ts>2016-01-21 15:18:25 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>dlawren</cc>
    
    <cc>hannay</cc>
    
    <cc>oleson</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7313</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-01-19 12:04:26 -0700</bug_when>
    <thetext>I have several cases that fail on the respmods branch and it looks like to be due to the following issue in PhotosynthesisMod.F90

The Atkins leafresp method has the following...

            else if ( leafresp_method == leafresp_mtd_atkin2015 ) then
            ! Alternative calculation for (higher) leaf maintenance respiration (Rdark)
            ! Taken from Atkin et al. (2015) New Phytologist meta analysis.
            ! Slope values from table S3 for N_area vs Rd_area for all plants with 
            ! growth temp 20-25C (to avoid confusion from acclimation processes). 
            ! Other slope values are potentially availble from that paper. 
            ! This is the simplest implementation. NB. THIS COULD BE INSIDE A SWITCH. 
               lmr25top = 10._r8**(-0.256_r8+log10(lnc(p))*1.141_r8)


But, note that before that lnc(p) CAN be set to zero as follows...
            if (tlai(p) &gt; 0.0_r8 .AND. sum_nscaler &gt; 0.0_r8) then
               ! dividing by LAI to convert total leaf nitrogen
               ! from m2 ground to m2 leaf; dividing by sum_nscaler to
               ! convert total leaf N to leaf N at canopy top
               lnc(p) = cnveg_nitrogenstate_inst%leafn_patch(p) / (tlai(p) * sum_nscaler)
               ! NOTE(bja, 2015-11) can not associate leafn_patch to a
               ! shorter name because leafn_patch may not be
               ! allocated, e.g. SP runs. Using an associate with
               ! unallocated memory results in a NAG runtime error.
            else
               lnc(p) = 0.0_r8
            end if

So for the Atkin&apos;s case lnc(p) must be set to something at least slightly positive.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7314</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-01-19 14:42:59 -0700</bug_when>
    <thetext>OK, I added a simple check for lnc(p) exactly zero and if so set lmr25top to zero, and that seems to work.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7322</commentid>
    <comment_count>2</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-01-21 15:18:25 -0700</bug_when>
    <thetext>The following case fails even with the protection against divide by zero...

ERP_D_Ld5.f19_g16.ICRUCLM50BGC.yellowstone_intel.clm-fire_emis

it looks like it&apos;s on the log10 call as well, so I think that means that lnc(p) must be either negative or infinity.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2240</bug_id>
          
          <creation_ts>2015-11-04 06:17:00 -0700</creation_ts>
          <short_desc>cannot use init_interp to interpolate clm45 initial conditions to clm50</short_desc>
          <delta_ts>2017-01-22 12:50:43 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.4.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>dlawren</cc>
    
    <cc>mvertens</cc>
    
    <cc>oleson</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7194</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2015-11-04 06:17:52 -0700</bug_when>
    <thetext>When trying to interpolate clm45 initial conditions to a clm50 case, init_interp dies because URBAN_AC is dimensioned by column in CLM45 and by landunit in CLM50.

I can see three possible solutions:

(1) Live with the fact that we cannot interpolate initial conditions files between CLM45 and CLM50 cases.

(2) Give URBAN_AC a different name on the restart file depending on whether it is at the column-level or landunit-level. In the future, something like this would probably be best: If fundamental changes are made to a restart variable, then its name should change to avoid breaking init_interp. We could do something like this retroactively, possibly combined with the feature I have added to allow listing multiple possible names for a restart variable.

(3) Change init_interp to make it skip a variable when the dimensions differ in the input and output, rather than aborting. This is probably the easiest solution in the short-term, but I worry a bit that this could make init_interp too permissive, doing the wrong thing (i.e., leaving values at their cold start values) when it should be aborting with an error.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7829</commentid>
    <comment_count>1</comment_count>
    <who name="Ben Andre">andre</who>
    <bug_when>2017-01-22 11:54:31 -0700</bug_when>
    <thetext>Since clm is now runtime configurable, clm45 vs clm50 vs clmX.Y is kind of a vague distinction based on runtime flags. One could start with a clm5 compset, but flip a set of switches to generate an interp_init incompatible run. It is going to be increasingly important to handle this situation more gracefully going forward.

I propose solution (1.b): live with the fact that we can&apos;t interpolate from some simulations into others, but add consistency checks when we introduce incompatible changes. For the urban_ac example, we need to check dimensions and error out with a meaningful message if they differ. A meaningful message is something like:

&quot;ERROR running interp_init on VAR_XYZ. Dimensions in model are A, dimensions in initial conditions file are B. This indicates a significant change in science. Please chose a more appropriate initial conditions file or spinup from cold start.&quot;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7830</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-01-22 12:50:43 -0700</bug_when>
    <thetext>I&apos;m fine with your solution (1.b). Moving forward, I think we should be careful to avoid changing the meaning (dimensionality, etc.) of a variable on the restart file without giving it a different name, because this has caused a lot of unforeseen pain. For example, I have recently changed some variables from col-level to gridcell-level, and have renamed the restart variables by giving them a &apos;_g&apos; suffix to distinguish them from the old version.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2237</bug_id>
          
          <creation_ts>2015-10-31 05:15:00 -0600</creation_ts>
          <short_desc>dynamic root code divides by 0</short_desc>
          <delta_ts>2015-11-23 13:13:54 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.4.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>dlawren</cc>
    
    <cc>gbisht</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7182</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2015-10-31 05:15:52 -0600</bug_when>
    <thetext>Runs that activate both use_dynroot and crop crash in the first time step if run in debug mode. This is due to a divide by 0 error in this line in CNRootDynMod:

                    root_depth(p) = max(zi(c,2), min(hui(p)/huigrain(p)* root_dmx(ivt(p)), root_dmx(ivt(p))))

huigrain(p) can sometimes be 0; in the one case I looked at, hui was also 0. Also, in the first timestep of a cold start, huigrain is NaN.

So this needs:

(1) initialization of huigrain in cold start so that it isn&apos;t NaN: it should probably be initialized to 0

(2) appropriate handling of the case when huigrain = 0</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7223</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2015-11-18 14:29:31 -0700</bug_when>
    <thetext>The fix that Beth Drewniak gave us for this was to initialize huigrain to zero everywhere, and then...

Index: components/clm/src/biogeochem/CNRootDynMod.F90
===================================================================
--- components/clm/src/biogeochem/CNRootDynMod.F90	(.../branch_tags/fun20exp_tags/fun20exp_n08_fun2_0_n09clm4_5_6_r153)	(revision 75190)
+++ components/clm/src/biogeochem/CNRootDynMod.F90	(.../branches/fun20exp)	(revision 75190)
@@ -134,7 +134,9 @@
             c = pcolumn(p)
             if (ivt(p) /= noveg) then
                 if((ivt(p)) &gt;= npcropmin)then !skip generic crop types
-                    root_depth(p) = max(zi(c,2), min(hui(p)/huigrain(p)* root_dmx(ivt(p)), root_dmx(ivt(p))))
+                    if(huigrain(p) &gt; 0._r8)then
+                        root_depth(p) = max(zi(c,2), min(hui(p)/huigrain(p)* root_dmx(ivt(p)), root_dmx(ivt(p))))
+                    end if
                 else
                 ! this can be changed to any depth (i.e. the maximum soil depth)
                     root_depth(p) = zi(c,nlevsoi)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7224</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2015-11-18 14:52:50 -0700</bug_when>
    <thetext>Shouldn&apos;t there be an &apos;else&apos; clause here, so that root_depth gets set explicitly if huigrain(p) == 0? Or is the intention really that it remains at whatever value it was at in the previous time step?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7227</commentid>
    <comment_count>3</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2015-11-23 12:33:10 -0700</bug_when>
    <thetext>Gautam&apos;s suggestion to the &apos;else&apos;, approved by Beth, is:

How about adding root_depth(bounds%begp:bounds%endp) = 0._r8 on CNRootDynMod.F90#L111?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7228</commentid>
    <comment_count>4</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2015-11-23 12:35:28 -0700</bug_when>
    <thetext>Oops, I forgot to finish Gautam&apos;s suggestion:

Then, you can get rid of the &apos;else&apos; clause at line CNRootDynMod.F90#L130.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7229</commentid>
    <comment_count>5</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2015-11-23 12:39:27 -0700</bug_when>
    <thetext>However, in response to comment 3: Based on the performance impact we have seen for CNZero, I am coming to feel that we should avoid code like:

root_depth(bounds%begp:bounds%endp) = 0._r8

instead either (a) initializing this in the loop over the filter (i.e., setting root_depth(p) = 0._r8 before the conditionals), or (b) keeping / adding explicit &apos;else&apos; clauses to ensure it is set to something for any path through the conditionals.

This isn&apos;t a big deal for this particular change, but is something we should think about in general: As we have seen from CNZero, when you add up the total time we spend zeroing quantities, it amounts to a significant fraction of CLM run time.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7230</commentid>
    <comment_count>6</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2015-11-23 13:13:54 -0700</bug_when>
    <thetext>The first part of this was completed in clm4_5_6_r155.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2227</bug_id>
          
          <creation_ts>2015-10-04 14:41:00 -0600</creation_ts>
          <short_desc>rework or remove max_patch_per_col</short_desc>
          <delta_ts>2015-10-05 15:51:11 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.4.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7160</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2015-10-04 14:41:13 -0600</bug_when>
    <thetext>Currently in clm_varpar, we have:

    max_patch_per_col= max(numpft+1, numcft, maxpatch_urb)

This is used in loops in the code like this:

    do pi = 1,max_patch_per_col
       do j = 1,nlevsoi
          do fc = 1, num_hydrologyc
             c = filter_hydrologyc(fc)
             if (pi &lt;= col%npatches(c)) then

However: Using numcft in this &apos;max&apos; gives a significant overestimate of max_patch_per_col when use_crop is true. This should be reworked - or, better, removed from the code entirely (because it is a maintenance problem, and I can&apos;t imagine that looping idioms that use it help performance that much, and likely they hurt performance - at least when it is overestimated by so much.)

Loops like this could be reworked to avoid needing max_patch_per_col by either:

(1) Looping over patches, and finding the corresponding column with patch%col(p)

(2) Looping over columns, then looping from begp to endp in an inner loop. This would likely be less vectorization-friendly, but you save many unnecessary loop iterations, so it&apos;s probably not likely to hurt performance much, and may help it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7161</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2015-10-05 15:51:11 -0600</bug_when>
    <thetext>Ben (or was it Erik?) points out: in the calculation of max_patch_per_col, we could replace numcft with something like num_crop_patches_per_col, which would be 1 for a prognostic crop run.

I&apos;m going to defer this change until after we pass the crunch time for the upcoming science freeze.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2221</bug_id>
          
          <creation_ts>2015-09-29 15:40:00 -0600</creation_ts>
          <short_desc>ED runs die in PIO while trying to read params file, starting with cime3</short_desc>
          <delta_ts>2015-09-30 04:43:20 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.4.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Stefan">muszala</assigned_to>
          <cc>andre</cc>
    
    <cc>erik</cc>
    
    <cc>jedwards</cc>
    
    <cc>mvertens</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7143</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2015-09-29 15:40:54 -0600</bug_when>
    <thetext>With the updates to cime3 (planned for clm4_5_3_r131), these two ED runs now die while trying to read the params file:

SMS_Ld5.f10_f10.ICLM45ED.yellowstone_pgi.clm-edTest
SMS_Ld5.f19_g16.ICLM45ED.yellowstone_intel.clm-edTest

The deaths look like:

   1: Opened existing file
   1: /glade/p/cesmdata/cseg/inputdata/lnd/clm2/paramdata/clm_params_ed.c150317.nc
   1:           0
[then many instances of the following:]
   9: pio_support::pio_die:: myrank=          -1 : ERROR: pionfget_mod.F90:
   9:         426 : Input/Output data amount mismatch
  41:Image              PC                Routine            Line        Source
  41:cesm.exe           000000000144CC38  Unknown               Unknown  Unknown
  41:cesm.exe           0000000000D705D1  pio_support_mp_pi         120  pio_support.F90
  41:cesm.exe           0000000000D6E645  pio_utils_mp_chec          59  pio_utils.F90
  41:cesm.exe           0000000000E27DDD  pionfget_mod_mp_g         426  pionfget_mod.F90.in
  41:cesm.exe           00000000005A859D  ncdio_pio_mp_ncd_        1202  ncdio_pio.F90.in
  41:cesm.exe           0000000000AFBBB2  paramutilmod_mp_r          50  paramUtilMod.F90
  41:cesm.exe           00000000007BC556  edparamsmod_mp_ed         106  EDParamsMod.F90
  41:cesm.exe           00000000005CE868  readparamsmod_mp_          69  readParamsMod.F90
  41:cesm.exe           0000000000508628  clm_initializemod         355  clm_initializeMod.F90
  41:cesm.exe           00000000004F7DC8  lnd_comp_mct_mp_l         232  lnd_comp_mct.F90
  41:cesm.exe           00000000004262AB  component_mod_mp_         229  component_mod.F90
  41:cesm.exe           0000000000415D38  cesm_comp_mod_mp_        1086  cesm_comp_mod.F90
  41:cesm.exe           00000000004213ED  MAIN__                     92  cesm_driver.F90


I wonder if this is showing up for the first time now because one of the changes in the cime3 update was:

   NEW:         pio_typename = &apos;pnetcdf&apos;
   BASELINE:  pio_typename = &apos;netcdf&apos;

i.e., could the use of pnetcdf be revealing a problem that until now went unnoticed?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7144</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2015-09-29 15:50:58 -0600</bug_when>
    <thetext>Bill, if you change it by hand for these cases to &quot;netcdf&quot; do the test cases work?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7145</commentid>
    <comment_count>2</comment_count>
    <who name="Mariana Vertenstein">mvertens</who>
    <bug_when>2015-09-29 15:55:16 -0600</bug_when>
    <thetext>(In reply to Erik Kluzek from comment #1)
&gt; Bill, if you change it by hand for these cases to &quot;netcdf&quot; do the test cases
&gt; work?

That is a good question. Right now all yellowstone configuration (other than serial) are using pnetcdf rather than netcdf. So that might be an issue.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7149</commentid>
    <comment_count>3</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2015-09-30 04:42:02 -0600</bug_when>
    <thetext>This one dies the same way:

RUN SMS_Ld5.f10_f10.ICLM45ED.yellowstone_intel.clm-edTest</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7150</commentid>
    <comment_count>4</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2015-09-30 04:43:20 -0600</bug_when>
    <thetext>In response to Erik: I haven&apos;t had a chance to look into whether using netcdf fixes this problem. If it does, I&apos;m not sure what it means. Note that I suspect that this has a different underlying cause than bug 1730 (this is a problem in a read, rather than a write).</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2218</bug_id>
          
          <creation_ts>2015-09-18 12:30:00 -0600</creation_ts>
          <short_desc>each patch / column / landunit type index should have unique meaning</short_desc>
          <delta_ts>2015-09-18 12:30:09 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.4.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>dlawren</cc>
    
    <cc>mvertens</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>7140</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2015-09-18 12:30:09 -0600</bug_when>
    <thetext>I feel that each patch / column / landunit type index should have unique meaning. For example, we currently use noveg (0) for the patch type for the bare ground patch on the natural veg landunit, as well as for all patches on special landunits. For column index, I think we&apos;re doing pretty well now, although we should confirm that there aren&apos;t any indices that are used on multiple landunits.

This would help in two ways:

(1) It would make it easier to process the 1-d (vector) history output

(2) It would allow for more straightforward logic in initInterp. For example, when checking is_sametype for patches, we could just check whether the patch type is the same, without having to also check the column and landunit type - because an identical patch type would imply identical column and landunit type, too. (In the case of generic crop, which can appear on either the natural veg landunit or the crop landunit, identical patch type doesn&apos;t imply identical col/landunit type, but in that case, that&apos;s what we want: i.e., we just want to find the same patch type without regards for what landunit type it&apos;s on.)</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2187</bug_id>
          
          <creation_ts>2015-06-26 11:29:00 -0600</creation_ts>
          <short_desc>need better way to find all possible history fields</short_desc>
          <delta_ts>2016-10-24 14:33:02 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM2.0.x Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>dlawren</cc>
    
    <cc>mvertens</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>6875</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2015-06-26 11:29:48 -0600</bug_when>
    <thetext>Danica raised the point that it is hard to find all possible history fields with the new CLM code organization. I know we have findHistFields.pl, but it doesn&apos;t seem to work right from the latest code base: it finds a lot of BGC-related fields, but didn&apos;t find the fields we were looking for (RH and QBOT in atm2lndType.F90). 

So maybe this tool just needs to be fixed? Or maybe I was using it wrong.

We also felt that this should either (a) print more information about the fields (e.g. whether it&apos;s active or inactive by default) or (b) print the file in which a given field is defined, so that you can go there to find more information about the field.

In looking through this code, I also noticed that the list of files to search is hard-coded. It seems like this list will quickly get out-of-date, if it isn&apos;t already. Can it simply search all F90 files below src?

Alternatively, if this tool is too hard to maintain, perhaps another option would be to give a namelist option to CLM to make it write out all history fields to its log file in initialization.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7719</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-10-24 14:33:02 -0600</bug_when>
    <thetext>Feeling from today&apos;s clm-cmt meeting is that, at least for now, we may just make use of the runtime output for this purpose. We think there&apos;s already something like this; it may just be a matter of cleaning up this output to be easily greppable (e.g., one line per variable).

But this depends somewhat on what the purpose is: e.g., the runtime output can&apos;t tell you what file the field is defined in (need to do a later grep for that), or the association between variable names in the code and history file variable names.

So we should ask Danica what her main use case is.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2185</bug_id>
          
          <creation_ts>2015-06-16 10:32:00 -0600</creation_ts>
          <short_desc>re-evaluate pnetcdf for 1-d fields with pio2</short_desc>
          <delta_ts>2016-07-07 11:46:19 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.4.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P4</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>erik</cc>
    
    <cc>jedwards</cc>
    
    <cc>mvertens</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>6872</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2015-06-16 10:32:47 -0600</bug_when>
    <thetext>Once we start using PIO2 in CLM, we should re-evaluate bug 1730.

In particular, we should try backing out the workaround that was put in place in clm4_5_1_r091, which involved avoiding pnetcdf for 1-d (dov2xy = .false.) fields. Then we should see if the problem documented in bug 1730 still exists.

If it seems to be resolved with pio2, we should back out the workaround.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2176</bug_id>
          
          <creation_ts>2015-05-11 16:17:00 -0600</creation_ts>
          <short_desc>ED doesn&apos;t work with MEGAN</short_desc>
          <delta_ts>2016-09-06 16:11:30 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.4.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>6851</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2015-05-11 16:17:41 -0600</bug_when>
    <thetext>MEGAN at least functioned before clm4_5_1_r106, but in clm4_5_1_r106, MEGAN fails here...
    if ( (cisun_in .eq. cisun_in) .and. (cisha_in .eq. cisha_in) .and. (forc_pbot_in &gt; 0._r8) .and. (fsun_in &gt; 0._r8) ) then
       ci = ( fsun_in*cisun_in + (1._r8-fsun_in)*cisha_in )/forc_pbot_in * 1.e6_r8
 &gt;&gt;&gt;      gamma_ci = Ismax - ( (Ismax*ci**h)/(Cstar**h+ci**h) )

cisun_in and cisha_in are still set to missing value (-999.) and hence the calculation fails.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6853</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2015-05-12 15:19:59 -0600</bug_when>
    <thetext>These are the two tests that failed.

ERS_D_Mmpi-serial_Ld5.1x1_brazil.ICLM45ED.yellowstone_intel.clm-edTest
SMS_Ld5.f19_g16.ICLM45ED.yellowstone_gnu.clm-edTest

There are some tests that actually passed even with the issue. So it must be partially dependent on the compiler. 

But, I&apos;m having build-namelist to make sure MEGAN is off if ED is on, and the ED tests will now be with MEGAN off. And there was an issue in clm.buildnml that didn&apos;t allow MEGAN to be off, so I fixed that as well.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6854</commentid>
    <comment_count>2</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2015-05-12 16:12:09 -0600</bug_when>
    <thetext>The SMS gnu test still fails with the following error...

   1: NetCDF: Numeric conversion not representable
   1: pio_support::pio_die:: myrank=          -1 : ERROR: pionfwrite_mod::write_nfdarray_double:         249 : NetCDF: Numeric conversion not representable
   1:Abort(1) on node 1 (rank 1 in comm 1140850688): application called MPI_Abort(MPI_COMM_WORLD, 1) - process 1

That is with MEGAN turned off.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6855</commentid>
    <comment_count>3</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2015-05-14 10:50:41 -0600</bug_when>
    <thetext>By turning off a bunch of history fields, I got it to run further. Then it stopped in RTM, so I turned RTM off...

Change user_nl_clm hist_fincl1 to...

hist_fincl1       = &apos;GPP&apos;,&apos;BTRAN&apos;,&apos;H2OSOI&apos;,&apos;LITTER_IN&apos;,
   &apos;FIRE_AREA&apos;,&apos;FIRE_INTENSITY&apos;,&apos;FIRE_TFC_ROS&apos;
   &apos;FIRE_NESTEROV_INDEX&apos;,
   &apos;FIRE_ROS&apos;,&apos;DISPVEGC&apos;,&apos;AREA_TREES&apos;,&apos;AREA_PLANT&apos; 

And make a bunch of those fields inactive...

Index: ../../components/clm/src/ED/main/EDCLMLinkMod.F90
===================================================================
--- ../../components/clm/src/ED/main/EDCLMLinkMod.F90	(revision 70648)
+++ ../../components/clm/src/ED/main/EDCLMLinkMod.F90	(working copy)
@@ -221,19 +221,23 @@
 
     call hist_addfld2d (fname=&apos;PFTbiomass&apos;,  units=&apos;kgC/m2&apos;, type2d=&apos;levgrnd&apos;, &amp;
          avgflag=&apos;A&apos;, long_name=&apos;total PFT level biomass&apos;, &amp;
-         ptr_patch=this%PFTbiomass_patch, set_lake=0._r8, set_urb=0._r8)
+         ptr_patch=this%PFTbiomass_patch, set_lake=0._r8, set_urb=0._r8, &amp;
+         default=&apos;inactive&apos; )
 
     call hist_addfld2d (fname=&apos;PFTleafbiomass&apos;,  units=&apos;kgC/m2&apos;, type2d=&apos;levgrnd&apos;, &amp;
          avgflag=&apos;A&apos;, long_name=&apos;total PFT level biomass&apos;, &amp;
-         ptr_patch=this%PFTleafbiomass_patch, set_lake=0._r8, set_urb=0._r8)
+         ptr_patch=this%PFTleafbiomass_patch, set_lake=0._r8, set_urb=0._r8, &amp;
+         default=&apos;inactive&apos; )
 
     call hist_addfld2d (fname=&apos;PFTstorebiomass&apos;,  units=&apos;kgC/m2&apos;, type2d=&apos;levgrnd&apos;, &amp;
          avgflag=&apos;A&apos;, long_name=&apos;total PFT level biomass&apos;, &amp;
-         ptr_patch=this%PFTstorebiomass_patch, set_lake=0._r8, set_urb=0._r8)
+         ptr_patch=this%PFTstorebiomass_patch, set_lake=0._r8, set_urb=0._r8, &amp;
+         default=&apos;inactive&apos; )
 
     call hist_addfld2d (fname=&apos;PFTnindivs&apos;,  units=&apos;kgC/m2&apos;, type2d=&apos;levgrnd&apos;, &amp;
          avgflag=&apos;A&apos;, long_name=&apos;total PFT level biomass&apos;, &amp;
-         ptr_patch=this%PFTnindivs_patch, set_lake=0._r8, set_urb=0._r8)
+         ptr_patch=this%PFTnindivs_patch, set_lake=0._r8, set_urb=0._r8, &amp;
+         default=&apos;inactive&apos; )
 
     call hist_addfld1d (fname=&apos;FIRE_NESTEROV_INDEX&apos;, units=&apos;none&apos;,  &amp;
          avgflag=&apos;A&apos;, long_name=&apos;nesterov_fire_danger index&apos;, &amp;
@@ -249,7 +253,8 @@
 
     call hist_addfld1d (fname=&apos;FIRE_TFC_ROS&apos;, units=&apos;none&apos;,  &amp;
          avgflag=&apos;A&apos;, long_name=&apos;total fuel consumed&apos;, &amp;
-         ptr_patch=this%TFC_ROS_patch, set_lake=0._r8, set_urb=0._r8)
+         ptr_patch=this%TFC_ROS_patch, set_lake=0._r8, set_urb=0._r8, &amp;
+         default=&apos;inactive&apos;)
 
     call hist_addfld1d (fname=&apos;FIRE_INTENSITY&apos;, units=&apos;kJ/m/s&apos;,  &amp;
          avgflag=&apos;A&apos;, long_name=&apos;spitfire fire intensity: kJ/m/s&apos;, &amp;
@@ -261,27 +266,33 @@
 
     call hist_addfld1d (fname=&apos;SCORCH_HEIGHT&apos;, units=&apos;m&apos;,  &amp;
          avgflag=&apos;A&apos;, long_name=&apos;spitfire fire area:m2&apos;, &amp;
-         ptr_patch=this%scorch_height_patch, set_lake=0._r8, set_urb=0._r8)
+         ptr_patch=this%scorch_height_patch, set_lake=0._r8, set_urb=0._r8, &amp;
+         default=&apos;inactive&apos; )
 
     call hist_addfld1d (fname=&apos;fire_fuel_mef&apos;, units=&apos;m&apos;,  &amp;
          avgflag=&apos;A&apos;, long_name=&apos;spitfire fuel moisture&apos;, &amp;
-         ptr_patch=this%fire_fuel_mef_patch, set_lake=0._r8, set_urb=0._r8)
+         ptr_patch=this%fire_fuel_mef_patch, set_lake=0._r8, set_urb=0._r8, &amp;
+         default=&apos;inactive&apos; )
 
     call hist_addfld1d (fname=&apos;fire_fuel_bulkd&apos;, units=&apos;m&apos;,  &amp;
          avgflag=&apos;A&apos;, long_name=&apos;spitfire fuel bulk density&apos;, &amp;
-         ptr_patch=this%fire_fuel_bulkd_patch, set_lake=0._r8, set_urb=0._r8)
+         ptr_patch=this%fire_fuel_bulkd_patch, set_lake=0._r8, set_urb=0._r8, &amp;
+         default=&apos;inactive&apos; )
 
     call hist_addfld1d (fname=&apos;fire_fuel_eff_moist&apos;, units=&apos;m&apos;,  &amp;
          avgflag=&apos;A&apos;, long_name=&apos;spitfire fuel moisture&apos;, &amp;
-         ptr_patch=this%fire_fuel_eff_moist_patch, set_lake=0._r8, set_urb=0._r8)
+         ptr_patch=this%fire_fuel_eff_moist_patch, set_lake=0._r8, set_urb=0._r8, &amp;
+         default=&apos;inactive&apos; )
 
     call hist_addfld1d (fname=&apos;fire_fuel_sav&apos;, units=&apos;m&apos;,  &amp;
          avgflag=&apos;A&apos;, long_name=&apos;spitfire fuel surface/volume &apos;, &amp;
-         ptr_patch=this%fire_fuel_sav_patch, set_lake=0._r8, set_urb=0._r8)
+         ptr_patch=this%fire_fuel_sav_patch, set_lake=0._r8, set_urb=0._r8, &amp;
+         default=&apos;inactive&apos; )
 
     call hist_addfld1d (fname=&apos;TFC_ROS&apos;, units=&apos;m&apos;,  &amp;
          avgflag=&apos;A&apos;, long_name=&apos;spitfire fuel surface/volume &apos;, &amp;
-         ptr_patch=this%TFC_ROS_patch, set_lake=0._r8, set_urb=0._r8)
+         ptr_patch=this%TFC_ROS_patch, set_lake=0._r8, set_urb=0._r8, &amp;
+         default=&apos;inactive&apos;)
 
     call hist_addfld1d (fname=&apos;SUM_FUEL&apos;, units=&apos; KgC m-2 y-1&apos;,  &amp;
          avgflag=&apos;A&apos;, long_name=&apos;Litter flux in leaves&apos;, &amp;
@@ -293,7 +304,8 @@
 
     call hist_addfld1d (fname=&apos;LITTER_OUT&apos;, units=&apos; KgC m-2 y-1&apos;,  &amp;
          avgflag=&apos;A&apos;, long_name=&apos;Litter flux out leaves&apos;, &amp;
-         ptr_patch=this%litter_out_patch, set_lake=0._r8, set_urb=0._r8)
+         ptr_patch=this%litter_out_patch, set_lake=0._r8, set_urb=0._r8, &amp;
+         default=&apos;inactive&apos;)
 
     call hist_addfld1d (fname=&apos;SEED_BANK&apos;, units=&apos; KgC m-2&apos;,  &amp;
          avgflag=&apos;A&apos;, long_name=&apos;Total Seed Mass of all PFTs&apos;, &amp;
@@ -347,7 +359,8 @@
     this%storvegc_patch(begp:endp) = spval
     call hist_addfld1d (fname=&apos;STORVEGC&apos;, units=&apos;gC/m^2&apos;, &amp;
          avgflag=&apos;A&apos;, long_name=&apos;stored vegetation carbon, excluding cpool&apos;, &amp;
-         ptr_patch=this%storvegc_patch)
+         ptr_patch=this%storvegc_patch, &amp;
+         default=&apos;inactive&apos;)
 
     this%leafc_patch(begp:endp) = spval
     call hist_addfld1d (fname=&apos;LEAFC&apos;, units=&apos;gC/m^2&apos;, &amp;
@@ -377,7 +390,7 @@
     this%npp_patch(begp:endp) = spval
     call hist_addfld1d (fname=&apos;NPP&apos;, units=&apos;gC/m^2/s&apos;, &amp;
          avgflag=&apos;A&apos;, long_name=&apos;net primary production&apos;, &amp;
-         ptr_patch=this%npp_patch)
+         ptr_patch=this%npp_patch, default=&apos;inactive&apos;)
 
   end subroutine InitHistory
 
Index: ../../components/clm/src/biogeophys/CanopyStateType.F90
===================================================================
--- ../../components/clm/src/biogeophys/CanopyStateType.F90	(revision 70648)
+++ ../../components/clm/src/biogeophys/CanopyStateType.F90	(working copy)
@@ -168,7 +168,7 @@
     this%tlai_patch(begp:endp) = spval
     call hist_addfld1d (fname=&apos;TLAI&apos;, units=&apos;none&apos;, &amp;
          avgflag=&apos;A&apos;, long_name=&apos;total projected leaf area index&apos;, &amp;
-         ptr_patch=this%tlai_patch)
+         ptr_patch=this%tlai_patch, default=&apos;inactive&apos;)
 
     this%tsai_patch(begp:endp) = spval
     call hist_addfld1d (fname=&apos;TSAI&apos;, units=&apos;none&apos;, &amp;
Index: ../../components/clm/src/main/atm2lndType.F90
===================================================================
--- ../../components/clm/src/main/atm2lndType.F90	(revision 70648)
+++ ../../components/clm/src/main/atm2lndType.F90	(working copy)
@@ -255,7 +255,7 @@
     this%forc_wind_grc(begg:endg) = spval
     call hist_addfld1d (fname=&apos;WIND&apos;, units=&apos;m/s&apos;,  &amp;
          avgflag=&apos;A&apos;, long_name=&apos;atmospheric wind velocity magnitude&apos;, &amp;
-         ptr_lnd=this%forc_wind_grc)
+         ptr_lnd=this%forc_wind_grc, default=&apos;inactive&apos;)
     ! Rename of WIND for Urban intercomparision project
     call hist_addfld1d (fname=&apos;Wind&apos;, units=&apos;m/s&apos;,  &amp;
          avgflag=&apos;A&apos;, long_name=&apos;atmospheric wind velocity magnitude&apos;, &amp;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6858</commentid>
    <comment_count>4</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2015-05-14 13:28:37 -0600</bug_when>
    <thetext>In clm4_5_1_r106 when ED is on, MEGAN is NOT allowed to be on in the build-namelist.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2159</bug_id>
          
          <creation_ts>2015-03-17 15:07:00 -0600</creation_ts>
          <short_desc>refactor pft initialization to read mxpft from the params file</short_desc>
          <delta_ts>2016-09-06 16:10:42 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.3.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Ben Andre">andre</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>6761</commentid>
    <comment_count>0</comment_count>
    <who name="Ben Andre">andre</who>
    <bug_when>2015-03-17 15:07:27 -0600</bug_when>
    <thetext>mxpft should be moved out of clm_varpar and made a module level variable in pftconMod. Once it is in pftconMod, it should be read from the params file rather than hard coded as a parameter. This may require some refactoring during initialization to ensure numpft is set correctly in clm_varpar.

use of maxpft in ED should be replaced with the ed num pft variable. It should also be read from the ed parameters file.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2143</bug_id>
          
          <creation_ts>2015-02-12 10:49:00 -0700</creation_ts>
          <short_desc>Move manure code from Stuart Riddick and Dan Ward to trunk</short_desc>
          <delta_ts>2016-09-06 16:07:33 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.3.z Development</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P4</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>dlawren</cc>
    
    <cc>muszala</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
    
    <cc>slevis</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>6728</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2015-02-12 10:49:13 -0700</bug_when>
    <thetext>I&apos;ve created a branch for this work at:

https://svn-ccsm-models.cgd.ucar.edu/clm2/branches/MF11manure

It has Dan&apos;s initial code from the clm45_MFmodel_1.1 case checked into it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7683</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-09-06 16:07:33 -0600</bug_when>
    <thetext>Keith and Will are working on this.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2142</bug_id>
          
          <creation_ts>2015-02-11 16:14:00 -0700</creation_ts>
          <short_desc>Add &quot;tillage&quot; to bgc-crop model</short_desc>
          <delta_ts>2016-09-06 16:11:14 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.3.z Development</version>
          <rep_platform>Other</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P4</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>dlawren</cc>
    
    <cc>mvertens</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
    
    <cc>slevis</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>6721</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2015-02-11 16:14:09 -0700</bug_when>
    <thetext>Here are the changes from Sam (relative to clm4_5_06).

[erik@yslogin1 clm45bgccltv_0.5deg4506_1973-2004]$ diff -c /glade/p/work/slevis/clm4_5_06/models/lnd/clm/src/clm4_5/main/clmtype.F90 SourceMods/src.clm/
*** /glade/p/work/slevis/clm4_5_06/models/lnd/clm/src/clm4_5/main/clmtype.F90	2013-05-22 17:53:49.764464745 -0600
--- SourceMods/src.clm/clmtype.F90	2013-07-17 11:46:50.777948000 -0600
***************
*** 2361,2366 ****
--- 2361,2367 ----
     real(r8), pointer :: aais_mask(:)    !Antarctic ice sheet mask 
     real(r8), pointer :: aais_area(:)    !Antarctic ice-covered area per gridcell (km^2)
     real(r8), pointer :: tws(:)          !total water storage (mm H2O)
+    real(r8), pointer :: developed(:)
  
  #if (defined CNDV)
     ! dgvm variables defined at the gridcell level
[erik@yslogin1 clm45bgccltv_0.5deg4506_1973-2004]$ diff -c /glade/p/work/slevis/clm4_5_06/models/lnd/clm/src/clm4_5/biogeophys/BalanceCheckMod.F90  SourceMods/src.clm/
*** /glade/p/work/slevis/clm4_5_06/models/lnd/clm/src/clm4_5/biogeophys/BalanceCheckMod.F90	2013-05-22 17:53:50.930877831 -0600
--- SourceMods/src.clm/BalanceCheckMod.F90	2013-07-17 12:01:55.936740000 -0600
***************
*** 549,555 ****
                  endif
               endif
  
!              if (ltype(l) == istsoil .or. ltype(l) == istcrop .or. ltype(l) == istwet ) then
                   if ( do_capsnow(c) ) then
                      snow_sources(c) = frac_sno_eff(c) * (qflx_dew_snow(c) + qflx_dew_grnd(c) ) &amp;
                           + qflx_h2osfc_to_ice(c) + qflx_prec_grnd(c)
--- 549,555 ----
                  endif
               endif
  
!              if (ctype(c) == icol_road_perv .or. ltype(l) == istsoil .or. ltype(l) == istcrop .or. ltype(l) == istwet ) then
                   if ( do_capsnow(c) ) then
                      snow_sources(c) = frac_sno_eff(c) * (qflx_dew_snow(c) + qflx_dew_grnd(c) ) &amp;
                           + qflx_h2osfc_to_ice(c) + qflx_prec_grnd(c) 
[erik@yslogin1 clm45bgccltv_0.5deg4506_1973-2004]$ diff -c /glade/p/work/slevis/clm4_5_06/models/lnd/clm/src/clm4_5/biogeochem/CNDecompCascadeMod_CENTURY.F90  SourceMods/src.clm/
*** /glade/p/work/slevis/clm4_5_06/models/lnd/clm/src/clm4_5/biogeochem/CNDecompCascadeMod_CENTURY.F90	2013-05-22 17:53:47.078278215 -0600
--- SourceMods/src.clm/CNDecompCascadeMod_CENTURY.F90	2013-08-05 17:23:21.163550471 -0600
***************
*** 406,412 ****
  ! !IROUTINE: decomp_rate_constants
  !
  ! !INTERFACE:
! subroutine decomp_rate_constants(lbc, ubc, num_soilc, filter_soilc)
   !
  ! !DESCRIPTION:
  !
--- 406,412 ----
  ! !IROUTINE: decomp_rate_constants
  !
  ! !INTERFACE:
! subroutine decomp_rate_constants(lbc, ubc, num_soilc, filter_soilc, num_soilp, filter_soilp)
   !
  ! !DESCRIPTION:
  !
***************
*** 418,423 ****
--- 418,427 ----
     use shr_const_mod, only : SHR_CONST_PI
     use clm_varcon, only: secspday
     use clm_time_manager, only : get_days_per_year
+    ! slevis additions
+    use clm_time_manager, only : get_curr_calday,is_first_restart_step
+    use fileutils, only : getfil
+    use ncdio_pio
  
     !
  ! !ARGUMENTS:
***************
*** 425,430 ****
--- 429,437 ----
     integer, intent(in) :: lbc, ubc        ! column bounds
     integer, intent(in) :: num_soilc       ! number of soil columns in filter
     integer, intent(in) :: filter_soilc(:) ! filter for soil columns
+    ! slevis additions
+    integer, intent(in) :: num_soilp       ! number of soil pfts in filter
+    integer, intent(in) :: filter_soilp(:) ! filter for soil pfts
  !
  ! !CALLED FROM:
  ! 
***************
*** 491,496 ****
--- 498,509 ----
     real(r8) :: normalization_factor ! factor by which to offset the decomposition rates frm century to a q10 formulation
     real(r8):: days_per_year         ! days per year
  
+    ! slevis additions
+    character(len=256):: locfn ! local file name
+    type(file_desc_t) :: ncid  ! netcdf id
+    logical :: readvar         ! true =&gt; variable is on input file 
+    integer :: day, fp, p, g
+    real(r8) :: clteff_scalar(lbc:ubc,1:7) ! plowing modifies decomp_k
  
  #if (defined VERTSOILC)
     real(r8) :: depth_scalar(lbc:ubc,1:nlevdecomp) 
***************
*** 801,818 ****
        end do
     end do
  #endif
!    
  #if (defined VERTSOILC)
     do j = 1,nlevdecomp
        do fc = 1,num_soilc
           c = filter_soilc(fc)
           decomp_k(c,j,i_litr1) = k_l1 * t_scalar(c,j) * w_scalar(c,j) * depth_scalar(c,j) * o_scalar(c,j)
!          decomp_k(c,j,i_litr2) = k_l2_l3 * t_scalar(c,j) * w_scalar(c,j) * depth_scalar(c,j) * o_scalar(c,j)
!          decomp_k(c,j,i_litr3) = k_l2_l3 * t_scalar(c,j) * w_scalar(c,j) * depth_scalar(c,j) * o_scalar(c,j)
           decomp_k(c,j,i_cwd) = k_frag * t_scalar(c,j) * w_scalar(c,j) * depth_scalar(c,j) * o_scalar(c,j)
!          decomp_k(c,j,i_soil1) = k_s1 * t_scalar(c,j) * w_scalar(c,j) * depth_scalar(c,j) * o_scalar(c,j)
!          decomp_k(c,j,i_soil2) = k_s2 * t_scalar(c,j) * w_scalar(c,j) * depth_scalar(c,j) * o_scalar(c,j)
!          decomp_k(c,j,i_soil3) = k_s3 * t_scalar(c,j) * w_scalar(c,j) * depth_scalar(c,j) * o_scalar(c,j)
        end do
     end do
  #else
--- 814,968 ----
        end do
     end do
  #endif
! 
!    ! -----------------------------------------------------
!    ! slevis adding effect of cultivation (e.g., plowing)
!    !        on soil C decomposition
!    ! -----------------------------------------------------
!    ! 1) hardwired read of Melannie Hartmann&apos;s file
!    ! -----------------------------------------------------
! 
!    day = get_curr_calday()
! 
!    call getfil(&apos;/glade/scratch/slevis/clm45bgccltv_0.5deg4506_1972/run/dev_countries_0-360.nc&apos;, locfn, 0 )
!    call ncd_pio_openfile (ncid, trim(locfn), 0)
!    call ncd_io(ncid=ncid, varname=&apos;DEVELOPED&apos;, flag=&apos;read&apos;, data=clm3%g%developed, dim1name=grlnd, readvar=readvar)
!    if (.not. readvar) call endrun(&apos;ERROR: DEVELOPED not on dev_countries file&apos;)
! 
!    do fp = 1,num_soilp
!       p = filter_soilp(fp)
!       c = clm3%g%l%c%p%column(p)
!       g = clm3%g%l%c%p%gridcell(p)
!       ! -----------------------------------------------------
!       ! 2) error check
!       ! -----------------------------------------------------
!       if (clm3%g%developed(g) &gt; 1._r8 .or. &amp;
!           clm3%g%developed(g) &lt; 0._r8) then
!          write(iulog,*) &apos;ERROR: this variable - developed - should not take on this value:&apos;
!          write(iulog,*) clm3%g%developed(g), g
!          call endrun()
! 
!       ! -----------------------------------------------------
!       ! 3) assigning cultivation practices and mapping to the
!       !    effect on soil C decomposition
!       ! -----------------------------------------------------
!       ! About the next two ELSE IFs:
!       ! CLM does not know the day of planting before it happens because the
!       ! CLM calculates day of planting from indexes that respond to
!       ! environmental conditions at every time step. Hence,
!       ! I see two options:
!       ! a) start DAYCENT&apos;s farming practices on the day of planting
!       !    rather than 30 d before planting OR
!       ! b) start DAYCENT&apos;s farming practices on April 15th, which assumes
!       !    planting on May 15th. This option seems simpler for now. Later we
!       !    may test whether choice a or b makes much difference.
!       else if (clm3%g%developed(g) &gt; 0._r8) then ! == 1
!          ! More developed country; info from DAYCENT (Melannie Hartman CSU)
!          ! temp. cereals: I 30 d bef, D on day of planting
!          ! corn, soy    : I           D           &amp; ROW 30 d aftr planting
! 
!          if (day &lt; 105) then
!             clteff_scalar(c,:) = 1._r8
!          else if (day &gt;= 105 .and. day &lt; 135) then ! April 15
!             clteff_scalar(c,:) = 1._r8
!             if (clm3%g%l%c%p%itype(p) &gt;= 17) then
!                clteff_scalar(c,i_litr2) = 6.67_r8
!                clteff_scalar(c,i_litr3) = 6.67_r8
!                clteff_scalar(c,i_soil1) = 6.67_r8
!                clteff_scalar(c,i_soil2) = 6.67_r8
!             end if
!          else if (day &gt;= 135 .and. day &lt; 165) then ! May 15
!             clteff_scalar(c,:) = 1._r8
!             if (clm3%g%l%c%p%itype(p) &gt;= 17) then
!                clteff_scalar(c,i_litr2) = 3.41_r8
!                clteff_scalar(c,i_litr3) = 3.41_r8
!                clteff_scalar(c,i_soil1) = 3.41_r8
!                clteff_scalar(c,i_soil2) = 3.41_r8
!             end if
!          else if (day &gt;= 165 .and. day &lt; 195) then ! June 14
!             clteff_scalar(c,:) = 1._r8
!             if (clm3%g%l%c%p%itype(p) == 17 .or. &amp;
!                 clm3%g%l%c%p%itype(p) == 18 .or. &amp;
!                 clm3%g%l%c%p%itype(p) == 23 .or. &amp;
!                 clm3%g%l%c%p%itype(p) == 24      ) then
!                clteff_scalar(c,i_litr2) = 3.41_r8
!                clteff_scalar(c,i_litr3) = 3.41_r8
!                clteff_scalar(c,i_soil1) = 3.41_r8
!                clteff_scalar(c,i_soil2) = 3.41_r8
!             end if
!          else if (day &gt;= 195) then ! July 14
!             clteff_scalar(c,:) = 1._r8
!          end if
! 
!       else if (clm3%g%developed(g) &lt; 1._r8) then ! == 0
!          ! less developed country; info from DAYCENT (Melannie Hartman CSU)
!          ! temp. cereals: P 30 d bef, C 15 d bef, D on day of planting
!          ! corn, soy    : P           C           D           &amp; HW-7 30 d aftr
! 
!          if (day &lt; 105) then
!             clteff_scalar(c,:) = 1._r8
!          else if (day &gt;= 105 .and. day &lt; 120) then ! April 15
!             clteff_scalar(c,:) = 1._r8
!             if (clm3%g%l%c%p%itype(p) &gt;= 17) then
!                clteff_scalar(c,i_litr2) = 10.00_r8
!                clteff_scalar(c,i_litr3) = 10.00_r8
!                clteff_scalar(c,i_soil1) = 10.00_r8
!                clteff_scalar(c,i_soil2) = 10.00_r8
!             end if
!          else if (day &gt;= 120 .and. day &lt; 135) then ! April 30
!             clteff_scalar(c,:) = 1._r8
!             if (clm3%g%l%c%p%itype(p) &gt;= 17) then
!                clteff_scalar(c,i_litr2) = 2.69_r8
!                clteff_scalar(c,i_litr3) = 2.69_r8
!                clteff_scalar(c,i_soil1) = 2.69_r8
!                clteff_scalar(c,i_soil2) = 2.69_r8
!             end if
!          else if (day &gt;= 135 .and. day &lt; 165) then ! May 15
!             clteff_scalar(c,:) = 1._r8
!             if (clm3%g%l%c%p%itype(p) &gt;= 17) then
!                clteff_scalar(c,i_litr2) = 3.41_r8
!                clteff_scalar(c,i_litr3) = 3.41_r8
!                clteff_scalar(c,i_soil1) = 3.41_r8
!                clteff_scalar(c,i_soil2) = 3.41_r8
!             end if
!          else if (day &gt;= 165 .and. day &lt; 195) then ! June 14
!             clteff_scalar(c,:) = 1._r8
!             if (clm3%g%l%c%p%itype(p) == 17 .or. &amp;
!                 clm3%g%l%c%p%itype(p) == 18 .or. &amp;
!                 clm3%g%l%c%p%itype(p) == 23 .or. &amp;
!                 clm3%g%l%c%p%itype(p) == 24      ) then
!                clteff_scalar(c,i_litr2) = 1.10_r8
!                clteff_scalar(c,i_litr3) = 1.10_r8
!                clteff_scalar(c,i_soil1) = 1.10_r8
!                clteff_scalar(c,i_soil2) = 1.10_r8
!                clteff_scalar(c,i_soil3) = 1.10_r8
!             end if
!          else if (day &gt;= 195) then ! July 14
!             clteff_scalar(c,:) = 1._r8
!          end if
!       end if
!    enddo
! 
!    call ncd_pio_closefile(ncid)
! ! -----------------------------------------------------
! 
  #if (defined VERTSOILC)
     do j = 1,nlevdecomp
        do fc = 1,num_soilc
           c = filter_soilc(fc)
           decomp_k(c,j,i_litr1) = k_l1 * t_scalar(c,j) * w_scalar(c,j) * depth_scalar(c,j) * o_scalar(c,j)
!          decomp_k(c,j,i_litr2) = k_l2_l3 * t_scalar(c,j) * w_scalar(c,j) * depth_scalar(c,j) * o_scalar(c,j) * clteff_scalar(c,i_litr2)
!          decomp_k(c,j,i_litr3) = k_l2_l3 * t_scalar(c,j) * w_scalar(c,j) * depth_scalar(c,j) * o_scalar(c,j) * clteff_scalar(c,i_litr3)
           decomp_k(c,j,i_cwd) = k_frag * t_scalar(c,j) * w_scalar(c,j) * depth_scalar(c,j) * o_scalar(c,j)
!          decomp_k(c,j,i_soil1) = k_s1 * t_scalar(c,j) * w_scalar(c,j) * depth_scalar(c,j) * o_scalar(c,j) * clteff_scalar(c,i_soil1)
!          decomp_k(c,j,i_soil2) = k_s2 * t_scalar(c,j) * w_scalar(c,j) * depth_scalar(c,j) * o_scalar(c,j) * clteff_scalar(c,i_soil2)
!          decomp_k(c,j,i_soil3) = k_s3 * t_scalar(c,j) * w_scalar(c,j) * depth_scalar(c,j) * o_scalar(c,j) * clteff_scalar(c,i_soil3)
!          if (c==115688) then ! begin slevis diag
!          write(iulog,*) &apos;day, clteff_scalar&apos;
!          write(iulog,*) day, clteff_scalar(c,:)
!          write(iulog,*) &apos;i_litr1,i_litr2,i_litr3,i_cwd,i_soil1,i_soil2,i_soil3&apos;
!          write(iulog,*) i_litr1,i_litr2,i_litr3,i_cwd,i_soil1,i_soil2,i_soil3
!          end if ! end slevis diag
        end do
     end do
  #else
[erik@yslogin1 clm45bgccltv_0.5deg4506_1973-2004]$ diff -c /glade/p/work/slevis/clm4_5_06/models/lnd/clm/src/clm4_5/biogeochem/CNDecompMod.F90  SourceMods/src.clm/*** /glade/p/work/slevis/clm4_5_06/models/lnd/clm/src/clm4_5/biogeochem/CNDecompMod.F90	2013-05-22 17:53:47.061045089 -0600
--- SourceMods/src.clm/CNDecompMod.F90	2013-07-17 11:46:50.863425000 -0600
***************
*** 188,194 ****
     
     
     
!    call decomp_rate_constants(lbc, ubc, num_soilc, filter_soilc)
     
     
     ! set initial values for potential C and N fluxes
--- 188,194 ----
     
     
     
!    call decomp_rate_constants(lbc, ubc, num_soilc, filter_soilc, num_soilp, filter_soilp)
     
     
     ! set initial values for potential C and N fluxes
[erik@yslogin1 clm45bgccltv_0.5deg4506_1973-2004]$ diff -c /glade/p/work/slevis/clm4_5_06/models/lnd/clm/src/clm4_5/main/clmtypeInitMod.F90  SourceMods/src.clm/
*** /glade/p/work/slevis/clm4_5_06/models/lnd/clm/src/clm4_5/main/clmtypeInitMod.F90	2013-05-22 17:53:49.720922909 -0600
--- SourceMods/src.clm/clmtypeInitMod.F90	2013-07-17 11:46:50.800493000 -0600
***************
*** 553,563 ****
--- 553,565 ----
     allocate(g%aais_mask(beg:end))
     allocate(g%aais_area(beg:end))
     allocate(g%tws(beg:end))
+    allocate(g%developed(beg:end))
     g%gris_mask(beg:end) = nan
     g%gris_area(beg:end) = nan
     g%aais_mask(beg:end) = nan
     g%aais_area(beg:end) = nan
     g%tws(beg:end) = nan
+    g%developed(beg:end) = nan
  
    end subroutine init_gridcell_type</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6722</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2015-02-11 16:14:29 -0700</bug_when>
    <thetext>Namelist changes are:

hist_mfilt     = 1,1
hist_nhtfrq    = 0,0
hist_fincl2    = &apos;TLAI&apos;,&apos;TSAI&apos;,&apos;HTOP&apos;,&apos;HBOT&apos;,&apos;NPP&apos;
hist_dov2xy    = .true.,.false.
finidat=&apos;/glade/scratch/slevis/clm45bgccrop_0.5deg4506_1972/run/clm45bgccrop_0.5deg4506_1972.clm2.r.0301-01-01-00000.nc&apos;
fsurdat=&apos;/glade/p/work/slevis/clm4_5_06/models/lnd/clm/tools/clm4_5/mksurfdata_map/surfdata_360x720cru_simyr2000_c130523.nc&apos;
fpftdyn=&apos;&apos;
stream_year_first_ndep = 1972
stream_year_last_ndep = 2005
stream_year_first_popdens = 1972
stream_year_last_popdens = 2005</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6723</commentid>
    <comment_count>2</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2015-02-11 16:18:29 -0700</bug_when>
    <thetext>Sam&apos;s case:

create_newcase -case /glade/u/home/slevis/clm45bgccrop_0.5deg4506_1972 -mach yellowstone -compset 1850_DATM%QIA_CLM45%BGC_SICE_SOCN_RTM_SGLC_SWAV -res a%360x720cru_l%360x720cru_oi%360x720cru_r%r05_m%360x720cru_g%null_w%null</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6724</commentid>
    <comment_count>3</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2015-02-11 16:28:40 -0700</bug_when>
    <thetext>Surface dataset difference (versus standard surfdata_360x720cru_simyr2000_c130418.nc:

&lt;               :Lai_raw_data_file_name = &quot;mksrf_lai24pftnontrop_c120712.nc&quot; ;
---
&gt;               :Lai_raw_data_file_name = &quot;mksrf_lai_global_c090506.nc&quot; ;
298c298
&lt;               :Vegetation_type_raw_data_filename = &quot;mksrf_24pftirrNT_landuse_rc2000_c120712.nc&quot; ;
---
&gt;               :Vegetation_type_raw_data_filename = &quot;mksrf_landuse_rc2000_c090630.nc&quot; ;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6726</commentid>
    <comment_count>4</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2015-02-12 10:07:29 -0700</bug_when>
    <thetext>Here&apos;s the difference for the file called: CNDecompCascadeMod_CENTURY.F90fromYumaPlow
I think it might be from a different base version of CLM.

[erik@yslogin2 biogeochem]$ cp ~slevis/archivedRUNS.mvHereToUse/levisetal2014gmd/clm45bgccltv_0.5deg4506_1973-2004/SourceMods/src.clm/CNDecompCascadeMod_CENTURY.F90fromYumaPlow CNDecompCascadeMod_CENTURY.F90 
[erik@yslogin2 biogeochem]$ svn diff
Index: CNDecompCascadeMod_CENTURY.F90
===================================================================
--- CNDecompCascadeMod_CENTURY.F90	(revision 68110)
+++ CNDecompCascadeMod_CENTURY.F90	(working copy)
@@ -16,9 +16,9 @@
 ! !USES:
    use shr_kind_mod , only: r8 =&gt; shr_kind_r8
    use shr_const_mod, only: SHR_CONST_TKFRZ
-   use clm_varpar   , only: nlevsoi, nlevgrnd, nlevdecomp, ndecomp_cascade_transitions, ndecomp_pools, nsompools 
+   use clm_varpar   , only: nlevsoi,nlevgrnd,nlevdecomp,ndecomp_cascade_transitions,ndecomp_pools 
    use clm_varpar   , only: i_met_lit, i_cel_lit, i_lig_lit, i_cwd
-   use clm_varctl   , only: iulog, spinup_state
+   use clm_varctl   , only: iulog
    use clm_varcon   , only: zsoi
 #ifdef LCH4
    use clm_varctl   , only: anoxia
@@ -46,9 +46,6 @@
    real(r8), public :: froz_q10 = 1.5_r8                     ! separate q10 for frozen soil respiration rates.  default to same as above zero rates
    integer, public :: nlev_soildecomp_standard               ! used here and in ch4Mod
 
-   !! parameters for AD spinup
-   real(r8), public, parameter :: spinup_vector(nsompools) = (/ 1.0_r8, 15.0_r8, 675.0_r8 /) ! multipliers for soil decomp during accelerated spinup
-
 !EOP
 !-----------------------------------------------------------------------
 
@@ -72,6 +69,8 @@
    use clmtype
    use clm_time_manager    , only : get_step_size
 
+   use clm_varcon, only: spinup_vector
+
 ! !ARGUMENTS:
    implicit none
 !
@@ -406,7 +405,7 @@
 ! !IROUTINE: decomp_rate_constants
 !
 ! !INTERFACE:
-subroutine decomp_rate_constants(lbc, ubc, num_soilc, filter_soilc, num_soilp, filter_soilp)
+subroutine decomp_rate_constants(lbc, ubc, num_soilc, filter_soilc)
  !
 ! !DESCRIPTION:
 !
@@ -416,12 +415,10 @@
 ! !USES:
    use clmtype
    use shr_const_mod, only : SHR_CONST_PI
-   use clm_varcon, only: secspday
+   use clm_varcon, only: spinup_vector, secspday
    use clm_time_manager, only : get_days_per_year
-   ! slevis additions
-   use clm_time_manager, only : get_curr_calday,is_first_restart_step
-   use fileutils, only : getfil
-   use ncdio_pio
+   use clm_time_manager, only : get_curr_date, get_curr_calday ! slevis adding
+   use spmdMod, only : masterproc                  ! for hardwired read statmt
 
    !
 ! !ARGUMENTS:
@@ -429,9 +426,6 @@
    integer, intent(in) :: lbc, ubc        ! column bounds
    integer, intent(in) :: num_soilc       ! number of soil columns in filter
    integer, intent(in) :: filter_soilc(:) ! filter for soil columns
-   ! slevis additions
-   integer, intent(in) :: num_soilp       ! number of soil pfts in filter
-   integer, intent(in) :: filter_soilp(:) ! filter for soil pfts
 !
 ! !CALLED FROM:
 ! 
@@ -446,7 +440,11 @@
 
    real(r8), pointer :: dz(:,:)           ! soil layer thickness (m)
    real(r8), pointer :: t_soisno(:,:)     ! soil temperature (Kelvin)  (-nlevsno+1:nlevgrnd)
-   real(r8), pointer :: sucsat(:,:)      ! minimum soil suction (mm)
+#ifndef STNDRD_BSW_FOR_SOILPSI_CALC
+   real(r8), pointer :: psisat(:,:)       ! soil water potential at saturation for CN code (MPa)
+#else
+    real(r8), pointer :: sucsat(:,:)      ! minimum soil suction (mm)
+#endif
    real(r8), pointer :: soilpsi(:,:)      ! soil water potential in each soil layer (MPa)
 #ifdef LCH4
    real(r8), pointer :: o2stress_unsat(:,:) ! Ratio of oxygen available to that demanded by roots, aerobes, &amp; methanotrophs (nlevsoi)
@@ -483,6 +481,16 @@
    real(r8):: cwdc_loss             ! fragmentation rate for CWD carbon (gC/m2/s)
    real(r8):: cwdn_loss             ! fragmentation rate for CWD nitrogen (gN/m2/s)
 
+   integer :: yr, mon, day, tod      ! slevis needs tod (time of day in sec) +
+   integer :: iostatcropschedule     ! error code for hardwired read statement
+   integer :: year = 0               ! init year+jday (julian day) here; then
+   integer :: jday = 0               ! read from cropschedule file and
+   real(r8) :: clteff_scalar(1:7)    ! modify decomp_k in response to plowing...
+   character :: clteffcode = &apos;Z&apos;     ! ...according to cultivation effect code
+   integer :: yearold = 0
+   integer :: jdayold = 0
+   data clteff_scalar /7*1._r8/      ! initialize all 7 slots incl. unused ones
+   character :: clteffcodeold = &apos;Z&apos;  ! end slevis variable declarations
    integer :: i_litr1
    integer :: i_litr2
    integer :: i_litr3
@@ -498,12 +506,6 @@
    real(r8) :: normalization_factor ! factor by which to offset the decomposition rates frm century to a q10 formulation
    real(r8):: days_per_year         ! days per year
 
-   ! slevis additions
-   character(len=256):: locfn ! local file name
-   type(file_desc_t) :: ncid  ! netcdf id
-   logical :: readvar         ! true =&gt; variable is on input file 
-   integer :: day, fp, p, g
-   real(r8) :: clteff_scalar(lbc:ubc,1:7) ! plowing modifies decomp_k
 
 #if (defined VERTSOILC)
    real(r8) :: depth_scalar(lbc:ubc,1:nlevdecomp) 
@@ -514,7 +516,11 @@
 
    ! Assign local pointers to derived type arrays
    t_soisno              =&gt; clm3%g%l%c%ces%t_soisno
+#ifndef STNDRD_BSW_FOR_SOILPSI_CALC
+   psisat                =&gt; clm3%g%l%c%cps%psisat
+#else
    sucsat            =&gt; clm3%g%l%c%cps%sucsat
+#endif
    soilpsi               =&gt; clm3%g%l%c%cps%soilpsi
    dz                    =&gt; clm3%g%l%c%cps%dz
    t_scalar           =&gt; clm3%g%l%c%ccf%t_scalar
@@ -565,11 +571,11 @@
    catanf_30 = catanf(30._r8)
    ! The following code implements the acceleration part of the AD spinup algorithm
 
-if ( spinup_state .eq. 1 ) then
+#if (defined AD_SPINUP)
    k_s1 = k_s1 * spinup_vector(1)
    k_s2 = k_s2 * spinup_vector(2)
    k_s3 = k_s3 * spinup_vector(3)
-endif
+#endif
 
    i_litr1 = 1
    i_litr2 = 2
@@ -654,7 +660,12 @@
          do fc = 1,num_soilc
             c = filter_soilc(fc)
             if (j==1) w_scalar(c,:) = 0._r8
+
+#ifndef STNDRD_BSW_FOR_SOILPSI_CALC
+            maxpsi = psisat(c,j)
+#else
             maxpsi = sucsat(c,j) * (-9.8e-6_r8)
+#endif
             psi = min(soilpsi(c,j),maxpsi)
             ! decomp only if soilpsi is higher than minpsi
             if (psi &gt; minpsi) then
@@ -751,7 +762,11 @@
       do j = 1,nlevdecomp
          do fc = 1,num_soilc
             c = filter_soilc(fc)
+#ifndef STNDRD_BSW_FOR_SOILPSI_CALC
+            maxpsi = psisat(c,j)
+#else
             maxpsi = sucsat(c,j) * (-9.8e-6_r8)
+#endif
             psi = min(soilpsi(c,j),maxpsi)
             ! decomp only if soilpsi is higher than minpsi
             if (psi &gt; minpsi) then
@@ -815,154 +830,129 @@
    end do
 #endif
 
-   ! -----------------------------------------------------
-   ! slevis adding effect of cultivation (e.g., plowing)
-   !        on soil C decomposition
-   ! -----------------------------------------------------
-   ! 1) hardwired read of Melannie Hartmann&apos;s file
-   ! -----------------------------------------------------
+   if (masterproc) then ! slevis adds hardwired read statmt; see also pftvarcon
 
-   day = get_curr_calday()
+      call get_curr_date( yr, mon, day, tod )
+      day = get_curr_calday() ! replace day of the month with julian day
 
-   call getfil(&apos;/glade/scratch/slevis/clm45bgccltv_0.5deg4506_1972/run/dev_countries_0-360.nc&apos;, locfn, 0 )
-   call ncd_pio_openfile (ncid, trim(locfn), 0)
-   call ncd_io(ncid=ncid, varname=&apos;DEVELOPED&apos;, flag=&apos;read&apos;, data=clm3%g%developed, dim1name=grlnd, readvar=readvar)
-   if (.not. readvar) call endrun(&apos;ERROR: DEVELOPED not on dev_countries file&apos;)
+! Apply plowing event
+! In the same timestep, the read statmt below loads info about the next event
+! Hence I use yearold, jdayold, and clteffcodeold in the following &quot;if&quot;
 
-   do fp = 1,num_soilp
-      p = filter_soilp(fp)
-      c = clm3%g%l%c%p%column(p)
-      g = clm3%g%l%c%p%gridcell(p)
-      ! -----------------------------------------------------
-      ! 2) error check
-      ! -----------------------------------------------------
-      if (clm3%g%developed(g) &gt; 1._r8 .or. &amp;
-          clm3%g%developed(g) &lt; 0._r8) then
-         write(iulog,*) &apos;ERROR: this variable - developed - should not take on this value:&apos;
-         write(iulog,*) clm3%g%developed(g), g
-         call endrun()
-
-      ! -----------------------------------------------------
-      ! 3) assigning cultivation practices and mapping to the
-      !    effect on soil C decomposition
-      ! -----------------------------------------------------
-      ! About the next two ELSE IFs:
-      ! CLM does not know the day of planting before it happens because the
-      ! CLM calculates day of planting from indexes that respond to
-      ! environmental conditions at every time step. Hence,
-      ! I see two options:
-      ! a) start DAYCENT&apos;s farming practices on the day of planting
-      !    rather than 30 d before planting OR
-      ! b) start DAYCENT&apos;s farming practices on April 15th, which assumes
-      !    planting on May 15th. This option seems simpler for now. Later we
-      !    may test whether choice a or b makes much difference.
-      else if (clm3%g%developed(g) &gt; 0._r8) then ! == 1
-         ! More developed country; info from DAYCENT (Melannie Hartman CSU)
-         ! temp. cereals: I 30 d bef, D on day of planting
-         ! corn, soy    : I           D           &amp; ROW 30 d aftr planting
-
-         if (day &lt; 105) then
-            clteff_scalar(c,:) = 1._r8
-         else if (day &gt;= 105 .and. day &lt; 135) then ! April 15
-            clteff_scalar(c,:) = 1._r8
-            if (clm3%g%l%c%p%itype(p) &gt;= 17) then
-               clteff_scalar(c,i_litr2) = 6.67_r8
-               clteff_scalar(c,i_litr3) = 6.67_r8
-               clteff_scalar(c,i_soil1) = 6.67_r8
-               clteff_scalar(c,i_soil2) = 6.67_r8
-            end if
-         else if (day &gt;= 135 .and. day &lt; 165) then ! May 15
-            clteff_scalar(c,:) = 1._r8
-            if (clm3%g%l%c%p%itype(p) &gt;= 17) then
-               clteff_scalar(c,i_litr2) = 3.41_r8
-               clteff_scalar(c,i_litr3) = 3.41_r8
-               clteff_scalar(c,i_soil1) = 3.41_r8
-               clteff_scalar(c,i_soil2) = 3.41_r8
-            end if
-         else if (day &gt;= 165 .and. day &lt; 195) then ! June 14
-            clteff_scalar(c,:) = 1._r8
-            if (clm3%g%l%c%p%itype(p) == 17 .or. &amp;
-                clm3%g%l%c%p%itype(p) == 18 .or. &amp;
-                clm3%g%l%c%p%itype(p) == 23 .or. &amp;
-                clm3%g%l%c%p%itype(p) == 24      ) then
-               clteff_scalar(c,i_litr2) = 3.41_r8
-               clteff_scalar(c,i_litr3) = 3.41_r8
-               clteff_scalar(c,i_soil1) = 3.41_r8
-               clteff_scalar(c,i_soil2) = 3.41_r8
-            end if
-         else if (day &gt;= 195) then ! July 14
-            clteff_scalar(c,:) = 1._r8
+      if (yr==yearold .and. day&gt;=jdayold .and. day&lt;jdayold+30) then
+         if (clteffcodeold==&apos;Z&apos;) then
+            clteff_scalar(i_litr2) = 1._r8 ! no effect
+            clteff_scalar(i_litr3) = 1._r8 ! no effect
+            clteff_scalar(i_soil1) = 1._r8 ! no effect
+            clteff_scalar(i_soil2) = 1._r8 ! no effect
+            clteff_scalar(i_soil3) = 1._r8 ! no effect
+         else if (clteffcodeold==&apos;A&apos;) then
+            clteff_scalar(i_litr2) = 1.100_r8
+            clteff_scalar(i_litr3) = 1.100_r8
+            clteff_scalar(i_soil1) = 1.000_r8
+            clteff_scalar(i_soil2) = 2.554_r8
+            clteff_scalar(i_soil3) = 2.554_r8
+         else if (clteffcodeold==&apos;B&apos;) then
+            clteff_scalar(i_litr2) = 1.200_r8
+            clteff_scalar(i_litr3) = 1.200_r8
+            clteff_scalar(i_soil1) = 1.000_r8
+            clteff_scalar(i_soil2) = 2.815_r8
+            clteff_scalar(i_soil3) = 2.815_r8
+         else if (clteffcodeold==&apos;C&apos;) then
+            clteff_scalar(i_litr2) = 1.241_r8
+            clteff_scalar(i_litr3) = 1.241_r8
+            clteff_scalar(i_soil1) = 1.041_r8
+            clteff_scalar(i_soil2) = 3.041_r8
+            clteff_scalar(i_soil3) = 3.041_r8
+         else if (clteffcodeold==&apos;D&apos;) then
+            clteff_scalar(i_litr2) = 1.50_r8
+            clteff_scalar(i_litr3) = 1.50_r8
+            clteff_scalar(i_soil1) = 1.00_r8
+            clteff_scalar(i_soil2) = 3.50_r8
+            clteff_scalar(i_soil3) = 3.50_r8
+         else if (clteffcodeold==&apos;E&apos;) then
+            clteff_scalar(i_litr2) = 1.600_r8
+            clteff_scalar(i_litr3) = 1.600_r8
+            clteff_scalar(i_soil1) = 1.100_r8
+            clteff_scalar(i_soil2) = 3.691_r8
+            clteff_scalar(i_soil3) = 3.691_r8
+         else if (clteffcodeold==&apos;F&apos;) then
+            clteff_scalar(i_litr2) = 1.649_r8
+            clteff_scalar(i_litr3) = 1.649_r8
+            clteff_scalar(i_soil1) = 1.149_r8
+            clteff_scalar(i_soil2) = 3.849_r8
+            clteff_scalar(i_soil3) = 3.849_r8
+         else if (clteffcodeold==&apos;G&apos;) then
+            clteff_scalar(i_litr2) = 1.735_r8
+            clteff_scalar(i_litr3) = 1.735_r8
+            clteff_scalar(i_soil1) = 1.235_r8
+            clteff_scalar(i_soil2) = 4.435_r8
+            clteff_scalar(i_soil3) = 4.435_r8
+         else if (clteffcodeold==&apos;H&apos;) then
+            clteff_scalar(i_litr2) = 1.8_r8
+            clteff_scalar(i_litr3) = 1.8_r8
+            clteff_scalar(i_soil1) = 1.2_r8
+            clteff_scalar(i_soil2) = 4.8_r8
+            clteff_scalar(i_soil3) = 4.8_r8
+         else if (clteffcodeold==&apos;I&apos;) then
+            clteff_scalar(i_litr2) = 2.034_r8
+            clteff_scalar(i_litr3) = 2.034_r8
+            clteff_scalar(i_soil1) = 1.234_r8
+            clteff_scalar(i_soil2) = 5.434_r8
+            clteff_scalar(i_soil3) = 5.434_r8
+         else if (clteffcodeold==&apos;J&apos;) then
+            clteff_scalar(i_litr2) = 3.396_r8
+            clteff_scalar(i_litr3) = 3.396_r8
+            clteff_scalar(i_soil1) = 1.396_r8
+            clteff_scalar(i_soil2) = 7.396_r8
+            clteff_scalar(i_soil3) = 7.396_r8
+         else if (clteffcodeold==&apos;K&apos;) then
+            clteff_scalar(i_litr2) = 3.5_r8
+            clteff_scalar(i_litr3) = 3.5_r8
+            clteff_scalar(i_soil1) = 8.0_r8
+            clteff_scalar(i_soil2) = 8.0_r8
+            clteff_scalar(i_soil3) = 8.0_r8
+         else
+            write(iulog,*) &apos;clteffcodeold=&apos;, clteffcodeold
+            call endrun( &apos;decomp_rate_constants ERROR: unexpected clteffcode.&apos; )
          end if
+      else
+         clteff_scalar(i_litr2) = 1._r8 ! no effect
+         clteff_scalar(i_litr3) = 1._r8 ! no effect
+         clteff_scalar(i_soil1) = 1._r8 ! no effect
+         clteff_scalar(i_soil2) = 1._r8 ! no effect
+         clteff_scalar(i_soil3) = 1._r8 ! no effect
+      end if
+      write(iulog,*) &apos;yr,day,clteffcodeold,clteff_scalar=&apos;,yr,day,clteffcodeold,clteff_scalar
 
-      else if (clm3%g%developed(g) &lt; 1._r8) then ! == 0
-         ! less developed country; info from DAYCENT (Melannie Hartman CSU)
-         ! temp. cereals: P 30 d bef, C 15 d bef, D on day of planting
-         ! corn, soy    : P           C           D           &amp; HW-7 30 d aftr
+! read next plowing event while applying the previous one
 
-         if (day &lt; 105) then
-            clteff_scalar(c,:) = 1._r8
-         else if (day &gt;= 105 .and. day &lt; 120) then ! April 15
-            clteff_scalar(c,:) = 1._r8
-            if (clm3%g%l%c%p%itype(p) &gt;= 17) then
-               clteff_scalar(c,i_litr2) = 10.00_r8
-               clteff_scalar(c,i_litr3) = 10.00_r8
-               clteff_scalar(c,i_soil1) = 10.00_r8
-               clteff_scalar(c,i_soil2) = 10.00_r8
+      do while (yr&gt;=year .and. day&gt;=jday)
+         if (tod == 0) then ! time of day = 0 at the beginning of every day
+            yearold = year
+            jdayold = jday
+            clteffcodeold = clteffcode
+            read(unit=42, fmt=&apos;(i4,1x,i3,1x,a1)&apos;, iostat=iostatcropschedule) year, jday, clteffcode
+            if (iostatcropschedule.ne.0) then
+               call endrun( &apos;decomp_rate_constants ERROR: failed to read cropschedule.&apos; )
+            else
+               write(iulog,*) &apos;Successfully read cropschedule&apos;
             end if
-         else if (day &gt;= 120 .and. day &lt; 135) then ! April 30
-            clteff_scalar(c,:) = 1._r8
-            if (clm3%g%l%c%p%itype(p) &gt;= 17) then
-               clteff_scalar(c,i_litr2) = 2.69_r8
-               clteff_scalar(c,i_litr3) = 2.69_r8
-               clteff_scalar(c,i_soil1) = 2.69_r8
-               clteff_scalar(c,i_soil2) = 2.69_r8
-            end if
-         else if (day &gt;= 135 .and. day &lt; 165) then ! May 15
-            clteff_scalar(c,:) = 1._r8
-            if (clm3%g%l%c%p%itype(p) &gt;= 17) then
-               clteff_scalar(c,i_litr2) = 3.41_r8
-               clteff_scalar(c,i_litr3) = 3.41_r8
-               clteff_scalar(c,i_soil1) = 3.41_r8
-               clteff_scalar(c,i_soil2) = 3.41_r8
-            end if
-         else if (day &gt;= 165 .and. day &lt; 195) then ! June 14
-            clteff_scalar(c,:) = 1._r8
-            if (clm3%g%l%c%p%itype(p) == 17 .or. &amp;
-                clm3%g%l%c%p%itype(p) == 18 .or. &amp;
-                clm3%g%l%c%p%itype(p) == 23 .or. &amp;
-                clm3%g%l%c%p%itype(p) == 24      ) then
-               clteff_scalar(c,i_litr2) = 1.10_r8
-               clteff_scalar(c,i_litr3) = 1.10_r8
-               clteff_scalar(c,i_soil1) = 1.10_r8
-               clteff_scalar(c,i_soil2) = 1.10_r8
-               clteff_scalar(c,i_soil3) = 1.10_r8
-            end if
-         else if (day &gt;= 195) then ! July 14
-            clteff_scalar(c,:) = 1._r8
          end if
-      end if
-   enddo
-
-   call ncd_pio_closefile(ncid)
-! -----------------------------------------------------
-
+      end do
+   end if ! end slevis adding hardwired read statmt
+   
 #if (defined VERTSOILC)
    do j = 1,nlevdecomp
       do fc = 1,num_soilc
          c = filter_soilc(fc)
          decomp_k(c,j,i_litr1) = k_l1 * t_scalar(c,j) * w_scalar(c,j) * depth_scalar(c,j) * o_scalar(c,j)
-         decomp_k(c,j,i_litr2) = k_l2_l3 * t_scalar(c,j) * w_scalar(c,j) * depth_scalar(c,j) * o_scalar(c,j) * clteff_scalar(c,i_litr2)
-         decomp_k(c,j,i_litr3) = k_l2_l3 * t_scalar(c,j) * w_scalar(c,j) * depth_scalar(c,j) * o_scalar(c,j) * clteff_scalar(c,i_litr3)
+         decomp_k(c,j,i_litr2) = k_l2_l3 * t_scalar(c,j) * w_scalar(c,j) * depth_scalar(c,j) * o_scalar(c,j) * clteff_scalar(i_litr2)
+         decomp_k(c,j,i_litr3) = k_l2_l3 * t_scalar(c,j) * w_scalar(c,j) * depth_scalar(c,j) * o_scalar(c,j) * clteff_scalar(i_litr3)
          decomp_k(c,j,i_cwd) = k_frag * t_scalar(c,j) * w_scalar(c,j) * depth_scalar(c,j) * o_scalar(c,j)
-         decomp_k(c,j,i_soil1) = k_s1 * t_scalar(c,j) * w_scalar(c,j) * depth_scalar(c,j) * o_scalar(c,j) * clteff_scalar(c,i_soil1)
-         decomp_k(c,j,i_soil2) = k_s2 * t_scalar(c,j) * w_scalar(c,j) * depth_scalar(c,j) * o_scalar(c,j) * clteff_scalar(c,i_soil2)
-         decomp_k(c,j,i_soil3) = k_s3 * t_scalar(c,j) * w_scalar(c,j) * depth_scalar(c,j) * o_scalar(c,j) * clteff_scalar(c,i_soil3)
-         if (c==115688) then ! begin slevis diag
-         write(iulog,*) &apos;day, clteff_scalar&apos;
-         write(iulog,*) day, clteff_scalar(c,:)
-         write(iulog,*) &apos;i_litr1,i_litr2,i_litr3,i_cwd,i_soil1,i_soil2,i_soil3&apos;
-         write(iulog,*) i_litr1,i_litr2,i_litr3,i_cwd,i_soil1,i_soil2,i_soil3
-         end if ! end slevis diag
+         decomp_k(c,j,i_soil1) = k_s1 * t_scalar(c,j) * w_scalar(c,j) * depth_scalar(c,j) * o_scalar(c,j) * clteff_scalar(i_soil1)
+         decomp_k(c,j,i_soil2) = k_s2 * t_scalar(c,j) * w_scalar(c,j) * depth_scalar(c,j) * o_scalar(c,j) * clteff_scalar(i_soil2)
+         decomp_k(c,j,i_soil3) = k_s3 * t_scalar(c,j) * w_scalar(c,j) * depth_scalar(c,j) * o_scalar(c,j) * clteff_scalar(i_soil3)
       end do
    end do
 #else
@@ -970,12 +960,12 @@
       do fc = 1,num_soilc
          c = filter_soilc(fc)
          decomp_k(c,j,i_litr1) = k_l1 * t_scalar(c,j) * w_scalar(c,j) * o_scalar(c,j)
-         decomp_k(c,j,i_litr2) = k_l2_l3 * t_scalar(c,j) * w_scalar(c,j) * o_scalar(c,j)
-         decomp_k(c,j,i_litr3) = k_l2_l3 * t_scalar(c,j) * w_scalar(c,j) * o_scalar(c,j)
+         decomp_k(c,j,i_litr2) = k_l2_l3 * t_scalar(c,j) * w_scalar(c,j) * o_scalar(c,j) * clteff_scalar(i_litr2)
+         decomp_k(c,j,i_litr3) = k_l2_l3 * t_scalar(c,j) * w_scalar(c,j) * o_scalar(c,j) * clteff_scalar(i_litr3)
          decomp_k(c,j,i_cwd) = k_frag * t_scalar(c,j) * w_scalar(c,j) * o_scalar(c,j)
-         decomp_k(c,j,i_soil1) = k_s1 * t_scalar(c,j) * w_scalar(c,j) * o_scalar(c,j)
-         decomp_k(c,j,i_soil2) = k_s2 * t_scalar(c,j) * w_scalar(c,j) * o_scalar(c,j)
-         decomp_k(c,j,i_soil3) = k_s3 * t_scalar(c,j) * w_scalar(c,j) * o_scalar(c,j)
+         decomp_k(c,j,i_soil1) = k_s1 * t_scalar(c,j) * w_scalar(c,j) * o_scalar(c,j) * clteff_scalar(i_soil1)
+         decomp_k(c,j,i_soil2) = k_s2 * t_scalar(c,j) * w_scalar(c,j) * o_scalar(c,j) * clteff_scalar(i_soil2)
+         decomp_k(c,j,i_soil3) = k_s3 * t_scalar(c,j) * w_scalar(c,j) * o_scalar(c,j) * clteff_scalar(i_soil3)
       end do
    end do
 #endif</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6727</commentid>
    <comment_count>5</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2015-02-12 10:10:45 -0700</bug_when>
    <thetext>I&apos;ve put this work on a branch...

https://svn-ccsm-models.cgd.ucar.edu/clm2/branches/tillage</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6729</commentid>
    <comment_count>6</comment_count>
    <who name="Sam Levis">slevis</who>
    <bug_when>2015-02-12 11:26:01 -0700</bug_when>
    <thetext>(In reply to Erik Kluzek from comment #4)
&gt; Here&apos;s the difference for the file called:
&gt; CNDecompCascadeMod_CENTURY.F90fromYumaPlow
&gt; I think it might be from a different base version of CLM.
&gt;[...]

Gordon wanted the global version of my tillage mods. The *YumaPlow file was used in 1x1 runs for a county named Yuma, CO.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6732</commentid>
    <comment_count>7</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2015-02-13 12:06:20 -0700</bug_when>
    <thetext>OK, I was able to exactly reproduce Sam&apos;s case with the branch I&apos;ve checked in. Now, I&apos;ll try it with the change using GDP and see what happens...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6737</commentid>
    <comment_count>8</comment_count>
    <who name="Sam Levis">slevis</who>
    <bug_when>2015-02-17 08:47:43 -0700</bug_when>
    <thetext>Found this in my &quot;enhanced decomposition by cultivation&quot; notes:

In future implementations apply enhanced decomp. to top 5 layers only!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6739</commentid>
    <comment_count>9</comment_count>
    <who name="David Lawrence">dlawren</who>
    <bug_when>2015-02-17 17:11:55 -0700</bug_when>
    <thetext>In response to Sam&apos;s prior comment, about only tilling first 5 layers.  Since the vertical resolution of the model could change, this should be implemented as tilling only to a certain depth.  First 5 layers is about 0.25m.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6740</commentid>
    <comment_count>10</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2015-02-18 11:30:03 -0700</bug_when>
    <thetext>OK to implement the reduction in number of layers applied over.  At initialization for cultivation, zsoi can be examined for the first layer that is above 0.25, and the index stored as ncult_layers. Then in CNDecompCascade_CENTURY a loop would be separated out for cultivation that loops over ncult_layers and applies clteff_scalar to only the top ncult_layers.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2141</bug_id>
          
          <creation_ts>2015-02-09 18:21:00 -0700</creation_ts>
          <short_desc>Precision of constants in SoilTemperature.F90 is not double</short_desc>
          <delta_ts>2017-10-31 16:05:03 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>PC</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P4</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>Future</target_milestone>
          
          <blocked>2336</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Gautam Bisht">gbisht</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>muszala</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>6718</commentid>
    <comment_count>0</comment_count>
    <who name="Gautam Bisht">gbisht</who>
    <bug_when>2015-02-09 18:21:31 -0700</bug_when>
    <thetext>The precision of a constant is incorrect at multiple locations in SoilTemperature.F90 (1 ---&gt; 1._r8). Below are the suggested modifications to fix the bug based of clm4_5_r104 tag.

&gt;hg diff
diff -r 90b9d2ff0302 models/lnd/clm/src/biogeophys/SoilTemperatureMod.F90
--- a/models/lnd/clm/src/biogeophys/SoilTemperatureMod.F90	Sat Jan 31 10:04:28 2015 -0800
+++ b/models/lnd/clm/src/biogeophys/SoilTemperatureMod.F90	Mon Feb 09 17:10:26 2015 -0800
@@ -533,7 +533,7 @@
 
          else
             if(frac_h2osfc(c) /= 0._r8) then
-               t_grnd(c) = (1 - frac_h2osfc(c)) * t_soisno(c,1) + frac_h2osfc(c) * t_h2osfc(c)
+               t_grnd(c) = (1._r8 - frac_h2osfc(c)) * t_soisno(c,1) + frac_h2osfc(c) * t_h2osfc(c)
             else
                t_grnd(c) = t_soisno(c,1)
             end if
@@ -786,7 +786,7 @@
             else if (lun%itype(l) /= istwet .AND. lun%itype(l) /= istice .AND. lun%itype(l) /= istice_mec &amp;
                  .AND. col%itype(c) /= icol_sunwall .AND. col%itype(c) /= icol_shadewall .AND. &amp;
                  col%itype(c) /= icol_roof) then
-               cv(c,j) = csol(c,j)*(1-watsat(c,j))*dz(c,j) + (h2osoi_ice(c,j)*cpice + h2osoi_liq(c,j)*cpliq)
+               cv(c,j) = csol(c,j)*(1._r8-watsat(c,j))*dz(c,j) + (h2osoi_ice(c,j)*cpice + h2osoi_liq(c,j)*cpliq)
             else if (lun%itype(l) == istwet) then 
                cv(c,j) = (h2osoi_ice(c,j)*cpice + h2osoi_liq(c,j)*cpliq)
                if (j &gt; nlevsoi) cv(c,j) = csol(c,j)*dz(c,j)
@@ -1541,21 +1541,21 @@
                if (patch%active(p)) then
                   if (.not. lun%urbpoi(l)) then
                      eflx_gnet(p) = sabg(p) + dlrad(p) &amp;
-                          + (1-frac_veg_nosno(p))*emg(c)*forc_lwrad(c) - lwrad_emit(c) &amp;
+                          + (1._r8-frac_veg_nosno(p))*emg(c)*forc_lwrad(c) - lwrad_emit(c) &amp;
                           - (eflx_sh_grnd(p)+qflx_evap_soi(p)*htvp(c))
                      ! save sabg for balancecheck, in case frac_sno is set to zero later
                      sabg_chk(p) = frac_sno_eff(c) * sabg_snow(p) + (1._r8 - frac_sno_eff(c) ) * sabg_soil(p)
 
                      eflx_gnet_snow = sabg_snow(p) + dlrad(p) &amp;
-                          + (1-frac_veg_nosno(p))*emg(c)*forc_lwrad(c) - lwrad_emit_snow(c) &amp;
+                          + (1._r8-frac_veg_nosno(p))*emg(c)*forc_lwrad(c) - lwrad_emit_snow(c) &amp;
                           - (eflx_sh_snow(p)+qflx_ev_snow(p)*htvp(c))
 
                      eflx_gnet_soil = sabg_soil(p) + dlrad(p) &amp;
-                          + (1-frac_veg_nosno(p))*emg(c)*forc_lwrad(c) - lwrad_emit_soil(c) &amp;
+                          + (1._r8-frac_veg_nosno(p))*emg(c)*forc_lwrad(c) - lwrad_emit_soil(c) &amp;
                           - (eflx_sh_soil(p)+qflx_ev_soil(p)*htvp(c))
 
                      eflx_gnet_h2osfc = sabg_soil(p) + dlrad(p) &amp;
-                          + (1-frac_veg_nosno(p))*emg(c)*forc_lwrad(c) - lwrad_emit_h2osfc(c) &amp;
+                          + (1._r8-frac_veg_nosno(p))*emg(c)*forc_lwrad(c) - lwrad_emit_h2osfc(c) &amp;
                           - (eflx_sh_h2osfc(p)+qflx_ev_h2osfc(p)*htvp(c))
                   else
                      ! For urban columns we use the net longwave radiation (eflx_lwrad_net) because of
@@ -1621,15 +1621,15 @@
                   l = patch%landunit(p)
                   if (.not. lun%urbpoi(l)) then
 
-                     eflx_gnet_top = sabg_lyr(p,lyr_top) + dlrad(p) + (1-frac_veg_nosno(p))*emg(c)*forc_lwrad(c) &amp;
+                     eflx_gnet_top = sabg_lyr(p,lyr_top) + dlrad(p) + (1._r8-frac_veg_nosno(p))*emg(c)*forc_lwrad(c) &amp;
                           - lwrad_emit(c) - (eflx_sh_grnd(p)+qflx_evap_soi(p)*htvp(c))
 
                      hs_top(c) = hs_top(c) + eflx_gnet_top*patch%wtcol(p)
 
-                     eflx_gnet_snow = sabg_lyr(p,lyr_top) + dlrad(p) + (1-frac_veg_nosno(p))*emg(c)*forc_lwrad(c) &amp;
+                     eflx_gnet_snow = sabg_lyr(p,lyr_top) + dlrad(p) + (1._r8-frac_veg_nosno(p))*emg(c)*forc_lwrad(c) &amp;
                           - lwrad_emit_snow(c) - (eflx_sh_snow(p)+qflx_ev_snow(p)*htvp(c))
 
-                     eflx_gnet_soil = sabg_lyr(p,lyr_top) + dlrad(p) + (1-frac_veg_nosno(p))*emg(c)*forc_lwrad(c) &amp;
+                     eflx_gnet_soil = sabg_lyr(p,lyr_top) + dlrad(p) + (1._r8-frac_veg_nosno(p))*emg(c)*forc_lwrad(c) &amp;
                           - lwrad_emit_soil(c) - (eflx_sh_soil(p)+qflx_ev_soil(p)*htvp(c))
 
                      hs_top_snow(c) = hs_top_snow(c) + eflx_gnet_snow*patch%wtcol(p)
@@ -3295,7 +3295,7 @@
                      if (j == col%snl(c)+1) then
                         dzp     = z(c,j+1)-z(c,j)
                         bmatrix_snow(c,4,j-1) = 0._r8
-                        bmatrix_snow(c,3,j-1) = 1+(1._r8-cnfac)*fact(c,j)*tk(c,j)/dzp-fact(c,j)*dhsdT(c)
+                        bmatrix_snow(c,3,j-1) = 1._r8+(1._r8-cnfac)*fact(c,j)*tk(c,j)/dzp-fact(c,j)*dhsdT(c)
                         if ( j /= 0) then
                            bmatrix_snow(c,2,j-1) =  -(1._r8-cnfac)*fact(c,j)*tk(c,j)/dzp
                         end if
@@ -3373,7 +3373,7 @@
                      if (j == col%snl(c)+1) then
                         dzp     = z(c,j+1)-z(c,j)
                         bmatrix_snow(c,4,j-1) = 0._r8
-                        bmatrix_snow(c,3,j-1) = 1+(1._r8-cnfac)*fact(c,j)*tk(c,j)/dzp-fact(c,j)*dhsdT(c)
+                        bmatrix_snow(c,3,j-1) = 1._r8+(1._r8-cnfac)*fact(c,j)*tk(c,j)/dzp-fact(c,j)*dhsdT(c)
                         if ( j /= 0) then
                            bmatrix_snow(c,2,j-1) =  -(1._r8-cnfac)*fact(c,j)*tk(c,j)/dzp
                         end if
@@ -3449,7 +3449,7 @@
                   if (j == col%snl(c)+1) then
                      dzp     = z(c,j+1)-z(c,j)
                      bmatrix_snow(c,4,j-1) = 0._r8
-                     bmatrix_snow(c,3,j-1) = 1+(1._r8-cnfac)*fact(c,j)*tk(c,j)/dzp-fact(c,j)*dhsdT(c)
+                     bmatrix_snow(c,3,j-1) = 1._r8+(1._r8-cnfac)*fact(c,j)*tk(c,j)/dzp-fact(c,j)*dhsdT(c)
                      if ( j /= 0) then
                         bmatrix_snow(c,2,j-1) =  -(1._r8-cnfac)*fact(c,j)*tk(c,j)/dzp
                      end if
@@ -3982,7 +3982,7 @@
                         if (j /= 1) then
                            bmatrix_soil(c,4,j) = 0._r8
                         end if
-                        bmatrix_soil(c,3,j) = 1+(1._r8-cnfac)*fact(c,j)*tk(c,j)/dzp-fact(c,j)*dhsdT(c)
+                        bmatrix_soil(c,3,j) = 1._r8+(1._r8-cnfac)*fact(c,j)*tk(c,j)/dzp-fact(c,j)*dhsdT(c)
                         bmatrix_soil(c,2,j) =  -(1._r8-cnfac)*fact(c,j)*tk(c,j)/dzp
                      else if (j &lt;= nlevurb-1) then
                         dzm     = (z(c,j)-z(c,j-1))
@@ -4074,7 +4074,7 @@
                         if (j /= 1) then
                            bmatrix_soil(c,4,j) = 0._r8
                         end if
-                        bmatrix_soil(c,3,j) = 1+(1._r8-cnfac)*fact(c,j)*tk(c,j)/dzp-fact(c,j)*dhsdT(c)
+                        bmatrix_soil(c,3,j) = 1.r8+(1._r8-cnfac)*fact(c,j)*tk(c,j)/dzp-fact(c,j)*dhsdT(c)
                         bmatrix_soil(c,2,j) =  -(1._r8-cnfac)*fact(c,j)*tk(c,j)/dzp
                      else if (j == 1) then
                         ! this is the snow/soil interface layer
@@ -4170,7 +4170,7 @@
                      if (j /= 1) then
                         bmatrix_soil(c,4,j) = 0._r8
                      end if
-                     bmatrix_soil(c,3,j) = 1+(1._r8-cnfac)*fact(c,j)*tk(c,j)/dzp-fact(c,j)*dhsdT(c)
+                     bmatrix_soil(c,3,j) = 1._r8+(1._r8-cnfac)*fact(c,j)*tk(c,j)/dzp-fact(c,j)*dhsdT(c)
                      bmatrix_soil(c,2,j) =  -(1._r8-cnfac)*fact(c,j)*tk(c,j)/dzp
                   else if (j == 1) then
                      ! this is the snow/soil interface layer
@@ -4570,7 +4570,7 @@
        ! surface water layer has two coefficients
        dzm=(0.5*dz_h2osfc(c)+col%z(c,1))
 
-       bmatrix_ssw(c,3,0)= 1+(1._r8-cnfac)*(dtime/c_h2osfc(c)) &amp;
+       bmatrix_ssw(c,3,0)= 1._r8+(1._r8-cnfac)*(dtime/c_h2osfc(c)) &amp;
             *tk_h2osfc(c)/dzm -(dtime/c_h2osfc(c))*dhsdT(c) !interaction from atm
 
     enddo</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6719</commentid>
    <comment_count>1</comment_count>
    <who name="Gautam Bisht">gbisht</who>
    <bug_when>2015-02-09 21:43:44 -0700</bug_when>
    <thetext>Btw, bug 2061 (http://bugs.cgd.ucar.edu/show_bug.cgi?id=2061) was similar to this reported bug and fixed in clm4_5_1_r096.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8316</commentid>
    <comment_count>2</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-10-31 16:05:03 -0600</bug_when>
    <thetext>These changes don&apos;t appear to actually change answers. At least for: SMS_D_P24x1_Ld5.f10_f10_musgs.I2000Clm50BgcCrop.hobart_nag.clm-irrig_spunup. I think it&apos;s a better practice to make it clear that double precision constants are being used. But, this change should go with other non-answer changing modifications.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2107</bug_id>
          
          <creation_ts>2014-12-12 16:42:00 -0700</creation_ts>
          <short_desc>move calls to alt_calc and SoilBiogeochemVerticalProfile to later in the driver sequence</short_desc>
          <delta_ts>2016-09-06 16:22:32 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>muszala</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>6612</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2014-12-12 16:42:00 -0700</bug_when>
    <thetext>alt_calc and SoilBiogeochemVerticalProfile are called very early in the driver sequence. I think these should be moved later - to sometime after the dynamic subgrid stuff - since as a rule, science code should be called AFTER subgrid weights are updated. This would allow them to just operate on the active filters, rather than the active_and_inactive filters.

This is connected to bug 1668, but I don&apos;t know which depends on which.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7685</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-09-06 16:22:32 -0600</bug_when>
    <thetext>See comments in bug 1668 for latest thoughts on how to handle this.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2093</bug_id>
          
          <creation_ts>2014-11-30 20:12:00 -0700</creation_ts>
          <short_desc>some CLM history fields don&apos;t restart properly</short_desc>
          <delta_ts>2016-08-22 14:45:19 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>erik</cc>
    
    <cc>muszala</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>6580</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2014-11-30 20:12:04 -0700</bug_when>
    <thetext>Mariana found that some CLM history fields don&apos;t restart properly. This was documented in bug 2091, but I&apos;m moving this here, because it&apos;s really a separate (and less critical) problem from 2091.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6581</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2014-11-30 20:12:40 -0700</bug_when>
    <thetext>From Mariana (from bug 2091):

There are still two problems that I have to track down with the restarts. They are that NFIRE is not bfb on restart and that EFLX_GRND_LAKE has a fill pattern difference on restart. I am wondering how long these two bugs have been there - since neither of these fields appear in when the suffix 
   &quot;clm-irrigOn_reduceOutput&quot;
is added to the test suite.  To discover this I actually ran the test
    ERS_Ly5.f10_f10.ICLM45BGCCROP.yellowstone_intel
where a lot more fields are output to monthly clm history files. The above two fields were the only ones that were a problem on restart. I am wondering if we should move to this test in the future rather than
    ERS_Ly5.f10_f10.ICLM45BGCCROP.yellowstone_intel.clm-irrigOn_reducedOutput</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6582</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2014-11-30 20:13:13 -0700</bug_when>
    <thetext>From Mariana (from bug 2091):

Committed 

   refactor_koven_bugfix_n01_clm4_5_1_r098 [I think this should say: refactor_koven_bugfix_n02_clm4_5_1_r098]

which fixed the restart problem for history variable NFIRE. Basically, it was to remove the following if clause in  CNVegStateType.F90
old:   if (nsrest == nsrStartup) this%nfire_col(c) = 0._r8
new:   this%nfire_col(c) = 0._r8

Now only history variable EFLX_GRND_LAKE has a problem on restart.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6583</commentid>
    <comment_count>3</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2014-11-30 20:13:34 -0700</bug_when>
    <thetext>From Mariana (from bug 2091):

I just confirmed that NFIRE was not bit-for-bit and EFLX_GRND_LAKE had fill pattern differences in clm4_5_1_r096 for the test: ERS_Ly5.f10_f10.ICLM45BGCCROP.yellowstone_intel
So the restart problems with those variables are outstanding issues not related to the clm4_5_1_r097 tag. As it turns out, I have fixed the NFIRE problem on the branch listed here - but the EFLX_GRND_LAKE problem is still outstanding.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6584</commentid>
    <comment_count>4</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2014-11-30 20:16:04 -0700</bug_when>
    <thetext>As to Mariana&apos;s suggestion of changing the ERS_Ly5 test to include more history fields: I think this is a good idea. I&apos;d suggest that, once the ERS test and others are set up to compare component history files as well as cpl hist files, we should change most or all of our reducedOutput tests to instead inherit from the &quot;monthly&quot; testmod, or something similar to it, so that they keep all of the default history fields, just with monthly rather than daily output.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6586</commentid>
    <comment_count>5</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2014-12-01 05:26:10 -0700</bug_when>
    <thetext>One more comment that I forgot to include from bug 2091, from me:

At a glance, I&apos;m not convinced that your fix for nfire is entirely correct. From a skim through CNFireMod, it looks like what&apos;s going on here is that nfire is only set in certain conditions, and when those conditions aren&apos;t met, it stays at its value from the previous time step. My intuition is that the correct thing to do is to either:

(1) Set nfire in every time step - setting it to 0 in conditions where it is currently not being touched.

(2) Keep the current logic (so nfire is only touched in certain conditions), and adding it as a restart field.

I don&apos;t understand the fire code well enough to know which of those is correct.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7589</commentid>
    <comment_count>6</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-07-07 11:35:59 -0600</bug_when>
    <thetext>To summarize the outstanding problems: 

(1) EFLX_GRND_LAKE has fill pattern differences upon restart

(2) NFIRE had different values upon restart; this was fixed, but I think in the wrong way</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2082</bug_id>
          
          <creation_ts>2014-11-02 14:26:00 -0700</creation_ts>
          <short_desc>problem with ED history files on restarts in clm4_5_1_r091</short_desc>
          <delta_ts>2016-08-22 14:42:35 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.3.z Development</version>
          <rep_platform>PC</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P2</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Mariana Vertenstein">mvertens</reporter>
          <assigned_to name="Ben Andre">andre</assigned_to>
          <cc>andre</cc>
    
    <cc>erik</cc>
    
    <cc>muszala</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>6492</commentid>
    <comment_count>0</comment_count>
    <who name="Mariana Vertenstein">mvertens</who>
    <bug_when>2014-11-02 14:26:06 -0700</bug_when>
    <thetext>I have found the that comparing the first ED history files upon restarts - they are not bit-for-bit - even though the model remains bit-for-bit and the restart test passes. In particular - for clm4_5_1_r091. As an example - if I look at the case 

ERS_D_Mmpi-serial.1x1_brazil.ICLM45CNED.yellowstone_gnu.clm-edTest

and write 1d history files daily  - I will see that upon restart (which starts from the beginning of day 7)

clm2.h0.0001-01-08-00000.nc is different between the initial and restart runs in the following fields:

 RMS GPP                              2.2001E-04            NORMALIZED  3.1505E-02
 RMS LITTER_OUT                       4.2088E+00            NORMALIZED  2.8284E+00
 RMS NPP                              1.1212E-04            NORMALIZED  3.2232E-02

However clm2.h0.0001-01-12-00000.nc are identical between the initial and restart runs.

The same thing holds for clm4_5_1_r091 with the koven refactoring  changes I have brought in. However, in this case there are now only 2 fields that are different.

 RMS GPP                              2.2001E-04            NORMALIZED  3.1505E-02
 RMS NPP                              1.1212E-04            NORMALIZED  3.2232E-02

The LITTER_OUT problem is not longer there - but the other two are still persistent.

This should be fixed - but it also points to the need to compare history files upon restart as well.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2068</bug_id>
          
          <creation_ts>2014-10-20 09:02:00 -0600</creation_ts>
          <short_desc>Use string to describe namelist option for urban_building_temp_method to make user-interface more clear</short_desc>
          <delta_ts>2014-10-20 09:02:44 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P2</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>oleson</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>6464</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2014-10-20 09:02:44 -0600</bug_when>
    <thetext>Instead of using an integer in the namelist for urban building temperature method, use a string to make it more clear in the namelist, and then then an integer in the code (faster and ensures correct values on compilation).</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2060</bug_id>
          
          <creation_ts>2014-10-13 15:51:00 -0600</creation_ts>
          <short_desc>Create UrbBuildTempOleson2013Mod.F90 module for older CLM4.5 building temperature</short_desc>
          <delta_ts>2014-10-13 15:51:57 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P2</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>dlawren</cc>
    
    <cc>oleson</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>6431</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2014-10-13 15:51:57 -0600</bug_when>
    <thetext>Create a module for the older CLM4.5 building temperature. UrbBuildTempOleson2013Mod.F90

Would have cool_on, heat_on arrays as well as clm_varcon constants...

        ht_wasteheat_factor = 0.0_r8
        ac_wasteheat_factor = 0.0_r8</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2059</bug_id>
          
          <creation_ts>2014-10-13 15:45:00 -0600</creation_ts>
          <short_desc>Move urban building constants to UrbBuildTempOleson2015Mod</short_desc>
          <delta_ts>2014-10-13 15:45:38 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>PC</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P2</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>dlawren</cc>
    
    <cc>oleson</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>6430</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2014-10-13 15:45:38 -0600</bug_when>
    <thetext>Move the urban building constants in clm_varcon.F90 to UrbBuildTempOleson2015Mod. Eventually should be on params file.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2058</bug_id>
          
          <creation_ts>2014-10-13 15:42:00 -0600</creation_ts>
          <short_desc>Create humanIndexMod method to encapsulate humanindex calculations</short_desc>
          <delta_ts>2014-10-13 15:42:05 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P2</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>dlawren</cc>
    
    <cc>oleson</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>6429</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2014-10-13 15:42:05 -0600</bug_when>
    <thetext>Add methods to humanIndexMod to calculate the list of human index calculations...

calc_human_stress_indices()

run_indices_on_filter( numfilter, filter, … )</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2057</bug_id>
          
          <creation_ts>2014-10-13 15:13:00 -0600</creation_ts>
          <short_desc>Problem with getregional_datasets.ncl for lists of files at more than one resolution</short_desc>
          <delta_ts>2016-08-22 14:36:40 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P4</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>dlawren</cc>
    
    <cc>muszala</cc>
    
    <cc>oleson</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>6428</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2014-10-13 15:13:12 -0600</bug_when>
    <thetext>getregional_datasets.ncl assumes that ALL of the files that are entered in the list are at the same resolution and at the same resolution as the fatmlndfrc domain file that is entered. If this is NOT the case it will create a box of the wrong size/position for the files that are a different resolution.

So getregional_datasets.ncl, should ensure the files are all the same and also match the input fatmlndfrc domain file.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6538</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2014-11-20 10:52:08 -0700</bug_when>
    <thetext>I added a simple check that the dimensions are at least consistent. And I split out the file lists appropriately. Checking the lat/long will take more work.

So this was partial fixed in clm4_5_1_r096</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2051</bug_id>
          
          <creation_ts>2014-09-26 14:16:00 -0600</creation_ts>
          <short_desc>dtime declarations are inconsistent</short_desc>
          <delta_ts>2016-08-26 06:33:34 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Stefan">muszala</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>6398</commentid>
    <comment_count>0</comment_count>
    <who name="Stefan">muszala</who>
    <bug_when>2014-09-26 14:16:40 -0600</bug_when>
    <thetext>sometimes dtime is declared as an integer, sometimes as a real(r8) but it is always set using the return value from get_step_size(), which returns the type of integer.  I&apos;ve also noticed casts of dtime from real to integer which don&apos;t need to be there.

This very basic use of dtime needs clean up in CLM.

one example:

main/clm_initializeMod.F90:    real(r8)              :: dtime        ! time step increment (sec)
main/clm_initializeMod.F90:    dtime = get_step_size()
main/clm_initializeMod.F90:    caldaym1 = get_curr_calday(offset=-int(dtime))</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7666</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-08-22 14:36:21 -0600</bug_when>
    <thetext>Ben Andre suggests: we should have a get_step_size_real and get_step_size_int.

It feels like the biggest practical problem in what we have now are the uses of int(dtime): if dtime (real) were 1799.9999999, then int(dtime) would be 1799. So if we don&apos;t do Ben&apos;s suggestion, then at the very least we should change int(dtime) to nint(dtime).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7672</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-08-26 06:32:44 -0600</bug_when>
    <thetext>On a branch that will come to the trunk soon, I&apos;m adding get_step_size_real. I&apos;m keeping the int-valued version as get_step_size for now so that I don&apos;t need to change a bunch of existing code.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2047</bug_id>
          
          <creation_ts>2014-09-19 11:27:00 -0600</creation_ts>
          <short_desc>Example 1.7 typo</short_desc>
          <delta_ts>2016-08-22 14:27:18 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.1.z Release</version>
          <rep_platform>PC</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc>http://www.cesm.ucar.edu/models/cesm1.1/clm/models/lnd/clm/doc/UsersGuide/clm_ug.pdf</bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Tim Hoar">thoar</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>6382</commentid>
    <comment_count>0</comment_count>
    <who name="Tim Hoar">thoar</who>
    <bug_when>2014-09-19 11:27:16 -0600</bug_when>
    <thetext>Example 1.7 in the CLM 1_1 users guide has a typo. (page 66)
http://www.cesm.ucar.edu/models/cesm1.1/clm/models/lnd/clm/doc/UsersGuide/clm_ug.pdf

The commentary indicates you set hist_type1d_pertape  but the example has hist_type2d_pertape (which doesn&apos;t exist).


Chapter 1. How to customize the configuration for a case with CLM
Sometimes it’s important to understand how different land-units or vegetation types are acting within a
grid-cell. The way to do this is to output history files as a 1D-vector of all land-units and vegetation
types. In order to display this, you’ll need to do extensive post-processing to make sense of the output.
Often you may only be interested in a few points, so once you figure out the 1D indices for the grid-cells
of interest, you can easily view that data. 1D vector output can also be useful for single point datasets,
since it’s then obvious that all data is for the same grid cell.
To do this you use hist_dov2xy which is an array of rank six for each history stream. Set it to
.false. if you want one of the history streams to be a 1D vector. You can also use
hist_type1d_pertape if you want to average over all the: Plant-Function-Types, columns, land-units,
or grid-cells. A sample user namelist user_nl_clm leaving the primary monthly files as 2D, and then
doing grid-cell (GRID), column (COLS), and no averaging over auxiliary tapes output daily for a single
field (ground temperature) is:
Example 1-7. Example user_nl_clm namelist outputting some files in 1D Vector format
hist_fincl2 = ’TG’
hist_fincl3 = ’TG’
hist_fincl4 = ’TG’
hist_fincl5 = ’TG’
hist_fincl6 = ’TG’
hist_dov2xy = .true., .false., .false., .false.
hist_type2d_pertape = ’ ’, ’GRID’, ’COLS’, ’ ’
hist_nhtfrq = 0, -24, -24, -24</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7664</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-08-22 14:27:18 -0600</bug_when>
    <thetext>Won&apos;t fix old user&apos;s guide, but want to make sure this is addressed in the new (CLM5) user&apos;s guide, if it isn&apos;t already.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2027</bug_id>
          
          <creation_ts>2014-08-15 15:54:00 -0600</creation_ts>
          <short_desc>Balance check error with the new B1850BPRPL45BGC compset</short_desc>
          <delta_ts>2017-05-02 13:45:04 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.2.z Release</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P2</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          <dependson>2026</dependson>
          <blocked>2310</blocked>
    
    <blocked>2439</blocked>
    
    <blocked>2048</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>dlawren</cc>
    
    <cc>jshollen</cc>
    
    <cc>klindsay</cc>
    
    <cc>muszala</cc>
    
    <cc>mvertens</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>6323</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2014-08-15 15:54:33 -0600</bug_when>
    <thetext>We added a new compset B1850BPRPL45BGC that blows up shortly after initialization with a balance check error.

 300: memory_write: model date =    10101   82800 memory =     272.46 MB (highwater)         -0.00 MB (usage)  (pe=  300 comps= OCN)
 300: memory_write: model date =    10101   84600 memory =     272.46 MB (highwater)         -0.00 MB (usage)  (pe=  300 comps= OCN)
 300: memory_write: model date =    10102       0 memory =     272.46 MB (highwater)         -0.00 MB (usage)  (pe=  300 comps= OCN)
 102: WARNING:  snow balance error
 100: WARNING:  snow balance error
 100:forrtl: severe (40): recursive I/O operation, unit 6, file unknown
 100:Image              PC                Routine            Line        Source
 100:libirc.so          00002AE45FB70A1E  Unknown               Unknown  Unknown
 100:libirc.so          00002AE45FB6F4B6  Unknown               Unknown  Unknown
 100:cesm.exe           000000000237A6F2  Unknown               Unknown  Unknown
 100:cesm.exe           00000000022FB33C  Unknown               Unknown  Unknown
 100:cesm.exe           000000000235542C  Unknown               Unknown  Unknown
 100:cesm.exe           0000000001CBCE47  shr_sys_mod_mp_pr         498  shr_sys_mod.F90
 100:cesm.exe           0000000001CBD590  shr_sys_mod_mp_sh         280  shr_sys_mod.F90
 100:cesm.exe           0000000001101A2B  decompmod_mp_get_         209  decompMod.F90
 100:cesm.exe           00000000013E02A1  getglobalvaluesmo          44  GetGlobalValuesMod.F90
 100:cesm.exe           00000000012467B6  balancecheckmod_m         439  BalanceCheckMod.F90
 100:cesm.exe           0000000000FC79BA  clm_driver_mp_clm         544  clm_driver.F90
 100:libiomp5.so        00002AE46003D4F3  Unknown               Unknown  Unknown
 102:forrtl: severe (40): recursive I/O operation, unit 6, file unknown
 102:Image              PC                Routine            Line        Source
 102:libirc.so          00002B0CA5E86A1E  Unknown               Unknown  Unknown
 102:libirc.so          00002B0CA5E854B6  Unknown               Unknown  Unknown
 102:cesm.exe           000000000237A6F2  Unknown               Unknown  Unknown
 102:cesm.exe           00000000022FB33C  Unknown               Unknown  Unknown
 102:cesm.exe           000000000235542C  Unknown               Unknown  Unknown
 102:cesm.exe           0000000001CBCE47  shr_sys_mod_mp_pr         498  shr_sys_mod.F90
 102:cesm.exe           0000000001CBD590  shr_sys_mod_mp_sh         280  shr_sys_mod.F90
 102:cesm.exe           0000000001101A2B  decompmod_mp_get_         209  decompMod.F90
 102:cesm.exe           00000000013E02A1  getglobalvaluesmo          44  GetGlobalValuesMod.F90
 102:cesm.exe           00000000012467B6  balancecheckmod_m         439  BalanceCheckMod.F90
 102:cesm.exe           0000000000FC79BA  clm_driver_mp_clm         544  clm_driver.F90
 102:libiomp5.so        00002B0CA63534F3  Unknown               Unknown  Unknown
 100:INFO: 0031-306  pm_atexit: pm_exit_value is 40.
 102:INFO: 0031-306  pm_atexit: pm_exit_value is 40.

This is with cesm1_3_alpha12b externals and

scripts                            https://svn-ccsm-models.cgd.ucar.edu/scripts/trunk_tags/scripts4_140814a
scripts/ccsm_utils/Machines        https://svn-ccsm-models.cgd.ucar.edu/Machines/trunk_tags/Machines_140811


out of the box for a SMS.f09_g16.B1850BPRPL45BGC.yellowstone_intel case.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6324</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2014-08-15 16:42:00 -0600</bug_when>
    <thetext>The abort seems to be on this line in BalanceCheck...

       write(iulog,*)&apos;nstep= &apos;,nstep, &amp;
            &apos; local indexc= &apos;,indexc, &amp;
            &apos; global indexc= &apos;,GetGlobalIndex(decomp_index=indexc, clmlevel=namec)

But, then GetGlobalIndex calls get_proc_bounds, and ends up trying to 
execute the line...

#ifdef _OPENMP
     if ( OMP_GET_NUM_THREADS() &gt; 1 )then
        call shr_sys_abort( trim(subname)//&apos; ERROR: Calling from inside  a threaded region&apos;)
     end if
#endif

so then you are trying to do a shr_sys_abort that writes out an error message that is itself a write statement. So the OS blows up in your face.

So one change is to do send the results of GetGlobalIndex to an integer temporary that you write out. The other issue is that this is being done from within a threaded region and it shouldn&apos;t be.

So another way to get around this would be change the PE layout to NOT be threaded. Right now it&apos;s sending 2 threads to every component. I&apos;m trying a case with only 1 thread per component, and we&apos;ll see what it does.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6325</commentid>
    <comment_count>2</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2014-08-15 17:25:06 -0600</bug_when>
    <thetext>Using a non-threaded layout (300x1) the compset is now running. The snow balance warning at the beginning is...

 275: WARNING:  snow balance error
 275: nstep=            0  local indexc=       233779  global indexc=       167423
 275:  ctype=           75  ltype=            9  errh2osno=   9.359429059187598E-003
 278: WARNING:  snow balance error
 278: nstep=            0  local indexc=       236445  global indexc=       150425
 278:  ctype=           75  ltype=            9  errh2osno=   9.917991872539743E-003
   1: Opened file

Note, that I also made the change in 2026, as I thought that might also be a problem here as well.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6326</commentid>
    <comment_count>3</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2014-08-15 19:31:06 -0600</bug_when>
    <thetext>Yep, non-threaded layout PASS&apos;es...

PASS  SMS_D_P300x1.f09_g16.B1850BPRPL45BGC.yellowstone_intel 
PASS  SMS_D_P300x1.f09_g16.B1850BPRPL45BGC.yellowstone_intel.memleak</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6327</commentid>
    <comment_count>4</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2014-08-16 14:25:26 -0600</bug_when>
    <thetext>IT turns out the aux_clm_short tests on goldbach for intel, nag and pgi show this same problem with the tests...

PET_P16x2_D.f10_f10.I1850CLM45BGC.goldbach_nag.clm-ciso

(for each compiler in turn).

For the nag compiler, the build of MCT fails, because of an issue with the gcc compiler...

configure:2398: checking whether the C compiler works
configure:2420: gcc  -g  -Wl,--as-needed,--allow-shlib-undefined  -DLINUX  -DMCT_INTERFACE -DHAVE_MPI -DTHREADED_OMP -DFORTRANUNDERSCORE -DNO_CRAY_POINTERS -DNO_SHR_VMATH  -DNO_C_SIZEOF  -DLINUX -DCPRNAG  -DHAVE_SLASHPROC -I.. -I.  -I/scratch/cluster/erik/sharedlibroot.140814-235435/nag/openmpi/debug/threads/include -I/scratch/cluster/erik/sharedlibroot.140814-235435/nag/openmpi/debug/threads/MCT/noesmf/a1l1r1i1o1g1w1/csm_share -I/usr/local/netcdf-gcc-nag/include -I/usr/local/openmpi-gcc-nag/include -I/scratch/cluster/erik/sharedlibroot.140814-235435/nag/openmpi/debug/threads/include -I/fs/cgd/data0/erik/clm_beta12ext/models/csm_share/shr  -L/home/santos/lib/fake_omp -lfake_omp -Wl,-Wl,,--rpath=/home/santos/lib/fake_omp  conftest.c -L/usr/local/netcdf_c-4.3.0_f-4.4-beta1-gcc-g++-4.4.7-3-nag-5.3.1-907/lib -lnetcdff -L/usr/local/hdf5/lib -lnetcdf -lnetcdf -L/usr/local/nag-5.3.1-907/lib/NAG_Fortran -lf53 &gt;&amp;5
/usr/bin/ld: unrecognized option &apos;-Wl&apos;
/usr/bin/ld: use the --help option for usage information
collect2: ld returned 1 exit status</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6329</commentid>
    <comment_count>5</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2014-08-22 10:36:20 -0600</bug_when>
    <thetext>OK, I thought this was coming from a non-threaded region -- but it&apos;s NOT. Balance check is inside a threaded loop in clm_driver. So I think this is correctly identifying a problem.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6334</commentid>
    <comment_count>6</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2014-08-22 17:53:40 -0600</bug_when>
    <thetext>OK, I was able to make some changes to the threaded version to get it to work. The problem is that GetGlobalIndex is figuring out the bounds (and assuming processor bounds, over clump bounds), rather than having the bounds sent into it. If you send bounds into GetGlobalIndex, it works. That ended up being a lot harder than I wanted it to, but I was able to do that, and now it works. The code diff is about a thousand lines, so I won&apos;t show the total, but here&apos;s an example...


-  function initial_template_col_soil(c_new) result(c_template)
+  function initial_template_col_soil(bounds, c_new) result(c_template)
     !
     ! !DESCRIPTION:
     ! Find column to use as a template for a vegetated column that has newly become active.
@@ -148,8 +148,9 @@
     use clm_varcon, only : ispval
     !
     ! !ARGUMENTS:
-    integer              :: c_template ! function result
-    integer , intent(in) :: c_new        ! column index that needs initialization
+    type(bounds_type) , intent(in) :: bounds     ! bounds
+    integer                        :: c_template ! function result
+    integer           , intent(in) :: c_new      ! column index that needs initialization
     !
     ! !LOCAL VARIABLES:
     
@@ -159,7 +160,7 @@
     if (col%wtgcell(c_new) &gt; 0._r8) then
        write(iulog,*) subname// &apos; ERROR: Expectation is that the only vegetated columns that&amp;
             &amp; can newly become active are ones with 0 weight on the grid cell&apos;
-       call endrun(decomp_index=c_new, clmlevel=namec, msg=errMsg(__FILE__, __LINE__))
+       call endrun(bounds, decomp_index=c_new, clmlevel=namec, msg=errMsg(__FILE__, __LINE__))
     end if
 
     c_template = ispval


Bill might be concerned, that the above might break unit-tests, but I will look at and make sure they can still work.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6519</commentid>
    <comment_count>7</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2014-11-18 13:19:17 -0700</bug_when>
    <thetext>This issue shows up in cesm1_3_alpha14d with the following tests that fail...

FAIL  SMS_D.f09_g16.BPIPDC5L45BGC.edison_intel 

FAIL  ERI_PT.f09_g16.B1850C5L45BGC.edison_intel 

RUN   ERS.f09_g16.BPIPDC5L45BGC.edison_intel.GC.cesm1_3_alpha14d

RUN   ERS_PT.f09_g16.BRCP85C5L45BGC.edison_intel.GC.cesm1_3_alpha14d

and the same tests fail on yellowstone_intel.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6554</commentid>
    <comment_count>8</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2014-11-20 14:40:36 -0700</bug_when>
    <thetext>I think the solution is to add an optional argument to get_proc_bounds, like &apos;force&apos;, and if that&apos;s provided, then it gets the proc bounds even if you&apos;re in a threaded region.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6555</commentid>
    <comment_count>9</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2014-11-20 14:41:02 -0700</bug_when>
    <thetext>Mariana put a temporary workaround in her branch to become r097.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6789</commentid>
    <comment_count>10</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2015-04-03 15:32:07 -0600</bug_when>
    <thetext>The new test: ERP_P15x2_D_Ld5.f10_f10.I1850CLM45BGC.goldbach_nag.clm-ciso shows this same problem.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7293</commentid>
    <comment_count>11</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-01-07 16:14:35 -0700</bug_when>
    <thetext>Still seems to be an issue on hobart_nag as of clm4_5_6_r158, with the following notes in expected fails file.

&lt;entry bugz=&quot;2027&quot; &gt;FAIL PET_P12x2_D.f10_f10.I1850CLM45BGC.hobart_intel.clm-ciso&lt;/entry&gt;

   &lt;entry bugz=&quot;2027&quot; &gt;CFAIL PET_P12x2_D.f10_f10.I1850CLM45BGC.hobart_nag.clm-ciso&lt;/entry&gt;

   &lt;entry bugz=&quot;2027&quot; &gt;FAIL PET_P12x2_D.f10_f10.I1850CLM45BGC.hobart_pgi.clm-ciso&lt;/entry&gt;

However, we removed all the threaded ciso tests from hobart_nag.

But, we do have a threaded test on yellowstone that is working (as of clm4_5_7_r164)...

ERP_P15x2_D_Ld5.f10_f10.I1850CLM45BGC.yellowstone_pgi.clm-ciso</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2025</bug_id>
          
          <creation_ts>2014-08-12 11:02:00 -0600</creation_ts>
          <short_desc>Crop simulations, do not properly ignore year when picking initial conditions</short_desc>
          <delta_ts>2017-06-13 15:30:55 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P2</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>dlawren</cc>
    
    <cc>muszala</cc>
    
    <cc>mvertens</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
    
    <cc>slevis</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>6311</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2014-08-12 11:02:51 -0600</bug_when>
    <thetext>Previously, when running with CROP on, we would set the flag to build-namelist to ignore the year when picking an initial condition (ID) file to use. Currently that doesn&apos;t happen by default when the model is run. There is the following vestige of that in scripts...

&lt;CLM_BLDNML_OPTS compset=&quot;%CNCR&quot;&gt;-ignore_ic_year&lt;/CLM_BLDNML_OPTS&gt;

but, it can NEVER be matched, so it doesn&apos;t do anything. And the logic in clm.buildnml.csh doesn&apos;t turn it on either (nor does build-namelist). The above field goes way back to when the new compsets were introduced by Mariana April of 2013.

Potentially, adding the correct line to scripts, would change answers as it makes it more likely that there are IC files that you can match. From looking at the clm4_5 namelist_defaults file, I do think it would match more IC files, as there are several files with an IC date with a year of &quot;0001&quot;. CLM4.0 just has one crop IC file with a year of &quot;2000&quot;, so probably wouldn&apos;t make a difference.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8074</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-06-13 15:30:55 -0600</bug_when>
    <thetext>I&apos;m confused about the status of this bug. The line in config_compsets.xml referenced in the original report (%CNCR) no longer seems to be there. Should this issue be closed? Or is there something else still responsible for this problem?

Note that we have this confusing and seemingly-wrong statement in CLM&apos;s config_component.xml:

  &lt;!-- CLM_BLDNML_OPTS is not additive, we must list all possible combinations --&gt;
  &lt;!-- ERROR: the node below is never matched, see bug 2025 --&gt;
  &lt;entry id=&quot;CLM_BLDNML_OPTS&quot;&gt;

I think that ERROR message is wrong.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2023</bug_id>
          
          <creation_ts>2014-08-05 15:32:00 -0600</creation_ts>
          <short_desc>Clean up use and implementation of accumulMod</short_desc>
          <delta_ts>2016-08-29 14:42:09 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>erik</cc>
    
    <cc>muszala</cc>
    
    <cc>mvertens</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>6309</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2014-08-05 15:32:30 -0600</bug_when>
    <thetext>Currently, on Mariana&apos;s refactor branch, there is a lot of verbosity and repeated boilerplate code needed in the InitAccVars routines, which initialize variables associated with time-accumulated fields. For example:

    begp = bounds%begp; endp = bounds%endp

    ! Allocate needed dynamic memory for single level pft field
    allocate(rbufslp(begp:endp), stat=ier)
    if (ier/=0) then
       write(iulog,*)&apos; in &apos;
       call endrun(msg=&quot; allocation error for rbufslp&quot;//&amp;
            errMsg(__FILE__, __LINE__))
    endif

    nstep = get_nstep()

    call extract_accum_field (&apos;AGDDTW&apos;, rbufslp, nstep) 
    this%agddtw_patch(begp:endp) = rbufslp(begp:endp)

    call extract_accum_field (&apos;AGDD&apos;, rbufslp, nstep) 
    this%agdd_patch(begp:endp) = rbufslp(begp:endp)

    deallocate(rbufslp)

Could this be replaced by simply the following?:

    call extract_accum_field(&apos;AGDDTW&apos;, this%agddtw_patch(bounds%begp:bounds%endp))

    call extract_accum_field(&apos;AGDD&apos;, this%agdd_patch(begp:endp))

The two major changes here are:

(1) the extract_accum_field routine gets nstep, rather than requiring the caller to obtain and pass in this value.

(2) I avoid the use of rbufslp - which may be needed in some cases, but doesn&apos;t appear to be needed here.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7675</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-08-29 14:40:44 -0600</bug_when>
    <thetext>We should also consider storing individual objects for each accumul object, rather than the current storage in one centralized location with fields accessed by string. This would be similar to what I&apos;m doing for the annual_flux_dribbler_type. The one downside of this is that clients would need to explicitly call Restart for each field, but the feeling at today&apos;s clm-cmt meeting is that that&apos;s worth it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7676</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-08-29 14:42:09 -0600</bug_when>
    <thetext>Note that accumulMod routines currently can&apos;t be called from inside a clump (threading) loop. I believe that it would be very difficult to remove that limitation until we rework threading to be done at a higher level. This is because the accumulMod infrastructure is general enough to handle fields at any level (gridcell, column, patch, etc.), and if you want to have code inside a clump loop, you need to declare the lower bounds of any array arguments... these two things seem incompatible.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2022</bug_id>
          
          <creation_ts>2014-07-31 14:44:00 -0600</creation_ts>
          <short_desc>add namelist option to turn on all history fields, add a CLM test that uses this</short_desc>
          <delta_ts>2016-07-07 11:26:14 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Mariana Vertenstein">mvertens</assigned_to>
          <cc>bandre</cc>
    
    <cc>erik</cc>
    
    <cc>muszala</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>6305</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2014-07-31 14:44:46 -0600</bug_when>
    <thetext>You can turn on all history fields by ignoring a few lines of code in histFileMod:

Index: src/clm4_5/main/histFileMod.F90
===================================================================
--- src/clm4_5/main/histFileMod.F90    (revision 61424)
+++ src/clm4_5/main/histFileMod.F90    (working copy)
@@ -4139,9 +4139,6 @@
          p2c_scale_type=scale_type_p2c, c2l_scale_type=scale_type_c2l, l2g_scale_type=scale_type_l2g)

     l_default = &apos;active&apos;
-    if (present(default)) then
-       l_default = default
-    end if
     if (trim(l_default) == &apos;inactive&apos;) then
        return
     else
@@ -4429,9 +4426,6 @@
          no_snow_behavior=no_snow_behavior)

     l_default = &apos;active&apos;
-    if (present(default)) then
-       l_default = default
-    end if
     if (trim(l_default) == &apos;inactive&apos;) then
        return
     else

It would be useful to have a namelist option that does this, for testing.

Then we should add a test that uses this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6306</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2014-07-31 14:47:52 -0600</bug_when>
    <thetext>We probably want to use this option for one test for each configuration... this could replace the addition of select fields, which we do for some tests.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2011</bug_id>
          
          <creation_ts>2014-07-09 16:24:00 -0600</creation_ts>
          <short_desc>duplicate CLM history fields, both on by default</short_desc>
          <delta_ts>2016-07-07 11:25:39 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>CLM5</target_milestone>
          <dependson>1856</dependson>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>dlawren</cc>
    
    <cc>muszala</cc>
    
    <cc>mvertens</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>6258</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2014-07-09 16:24:28 -0600</bug_when>
    <thetext>In working out some differences in Mariana&apos;s refactor branch, I discovered that there are a number of history fields that refer to the exact same thing but with a different name. The two I noticed are:

       call hist_addfld1d (fname=&apos;TOTLITC&apos;, units=&apos;gC/m^2&apos;, &amp;
            avgflag=&apos;A&apos;, long_name=&apos;total litter carbon&apos;, &amp;
            ptr_col=this%totlitc_col)
       call hist_addfld1d (fname=&apos;LITTERC&apos;, units=&apos;gC/m^2&apos;, &amp;
            avgflag=&apos;A&apos;, long_name=&apos;litter C&apos;, &amp;
            ptr_col=this%totlitc_col)

and:

       call hist_addfld1d (fname=&apos;TOTSOMC&apos;, units=&apos;gC/m^2&apos;, &amp;
            avgflag=&apos;A&apos;, long_name=&apos;total soil organic matter carbon&apos;, &amp;
            ptr_col=this%totsomc_col)
       call hist_addfld1d (fname=&apos;SOILC&apos;, units=&apos;gC/m^2&apos;, &amp;
            avgflag=&apos;A&apos;, long_name=&apos;soil C&apos;, &amp;
            ptr_col=this%totsomc_col)

The code had this comment:

       ! add history fields for all CLAMP CN variables

So presumably the variables needed to be renamed for CLAMP? But at the very least, it seems like only one of each of these should be on by default.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6259</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2014-07-09 16:39:07 -0600</bug_when>
    <thetext>To be clear: this is NOT a new problem with Mariana&apos;s branch: this duplication has existed for a while.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6260</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2014-07-09 16:40:07 -0600</bug_when>
    <thetext>A slightly different, but related, oddity: o2_decomp_depth_unsat_col is output regardless of hist_wrtch4diag, but with different names and metadata:

    if (hist_wrtch4diag) then
       call hist_addfld2d (fname=&apos;O2_DECOMP_DEPTH_UNSAT&apos;, units=&apos;mol/m3/s&apos;, type2d=&apos;levgrnd&apos;, &amp;
            avgflag=&apos;A&apos;, long_name=&apos;O2 consumption from HR and AR for non-inundated area&apos;, &amp;
            ptr_col=this%o2_decomp_depth_unsat_col)
    else
       call hist_addfld2d (fname=&apos;o2_decomp_depth_unsat&apos;, units=&apos;mol/m3/2&apos;, type2d=&apos;levgrnd&apos;, &amp;
            avgflag=&apos;A&apos;, long_name=&apos;o2_decomp_depth_unsat&apos;, &amp;
            ptr_col=this%o2_decomp_depth_unsat_col)
    end if

(this duplication also existed on the trunk, although it was less clear there)</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>2002</bug_id>
          
          <creation_ts>2014-06-25 20:00:00 -0600</creation_ts>
          <short_desc>BTRAN should be spval over all special landunits; also check other history fields</short_desc>
          <delta_ts>2016-07-29 09:08:06 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>dlawren</cc>
    
    <cc>muszala</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>6241</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2014-06-25 20:00:47 -0600</bug_when>
    <thetext>I noticed that the BTRAN history field is spval over urban and lake landunits (as it should be). However, it is 0 over glacier / glacier_mec, and also 0 over wetland. I&apos;m not sure if its value over wetland matters very much (because I&apos;m thinking that a grid cell can never have a mix of wetland and anything else; is that true?), but its 0 values over glacier means: If a grid cell has a mix of natural vegetation and glacier, its grid cell-average BTRAN will be wrong because of these 0 values that are averaged in.

I bet a similar problem exists for other history fields; I just happened to notice it for BTRAN.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1992</bug_id>
          
          <creation_ts>2014-06-09 15:33:00 -0600</creation_ts>
          <short_desc>Make ed_mode a BGC option</short_desc>
          <delta_ts>2016-07-28 16:09:46 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P2</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>bandre</cc>
    
    <cc>cdkoven</cc>
    
    <cc>dlawren</cc>
    
    <cc>muszala</cc>
    
    <cc>mvertens</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>6200</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2014-06-09 15:33:41 -0600</bug_when>
    <thetext>Currently, ed_mode is an option on top of the bgc setting in CLM build-namelist, and there are compsets for ED with CN as well as ED with BGC. And it appears that you can set bgc to any valid setting (sp, cn, cndv, or bgc) and combine it with ed_mode. And you would think that you&apos;d get different results with this. In reality, ed_mode turns cn off and adds switches that pretty much duplicate the logic of use_cn=.false. switches. The only difference for ED with CN and with BGC is BGC turns methane on. But, without fully enabled BGC, I don&apos;t think methane works correctly. Rosie said there is an intention to eventually have ED run with below-ground BGC, but that&apos;s not working yet, and undoubtably it would be enabled as a ed_mode switch.

I met with Rosie, and she agrees with me that having ED as a BGC mode makes more sense. She did say, that originally she couldn&apos;t get things to work without CN on, as certain arrays weren&apos;t allocated. I&apos;m pretty sure at this point, we allocate everything whether CN is on or not, so that issue wouldn&apos;t come up anymore.

To set this up would require some changes both to scripts (for compsets) and to CLM (to code and to CLM build-namelist).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6223</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2014-06-13 12:07:51 -0600</bug_when>
    <thetext>There actually is a &quot;use_ed&quot; statement in EDPhotosynthesisMod, so there was some effort to make ED run parallel to other bgc modes.

The statement requires the following change before it works, but after that ED will run without CN on.

Index: models/lnd/clm/src/clm4_5/biogeophys/ED/EDPhotosynthesisMod.F90
===================================================================
--- models/lnd/clm/src/clm4_5/biogeophys/ED/EDPhotosynthesisMod.F90	(revision 60800)
+++ models/lnd/clm/src/clm4_5/biogeophys/ED/EDPhotosynthesisMod.F90	(working copy)
@@ -476,7 +476,7 @@
         lmr25top(FT) = lmr25top(FT) * lnc(FT) / 12.e-06_r8
      else
         ! Leaf maintenance respiration in proportion to vcmax25top
-        lmr25top(FT) = vcmax25top(FT) * dr(nint(c3psn(FT)))
+        lmr25top(FT) = vcmax25top(FT) * dr(nint(c3psn(FT)+1))
      end if
   end do !FT 
 
I&apos;m also not sure if this is correct or not, as it&apos;s using c3psn, for the two ED types, but is that correct?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6224</commentid>
    <comment_count>2</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2014-06-13 13:12:18 -0600</bug_when>
    <thetext>I also turned more things off with (use_cn) when use_ed is on, to show that ED is NOT dependent on anything CN has.

Index: main/initTimeConstMod.F90
===================================================================
--- main/initTimeConstMod.F90	(revision 60800)
+++ main/initTimeConstMod.F90	(working copy)
@@ -1309,7 +1309,7 @@
 
    end do ! end pft level initialization
    
-   if (use_cn) then
+   if (use_cn .and. .NOT. use_ed) then
       if (masterproc) write(iulog,*) &apos; initializing decomposition pools and transitions ...&apos;
       if (use_century_decomp) then
          call init_decompcascade_bgc(bounds)
Index: main/clm_initializeMod.F90
===================================================================
--- main/clm_initializeMod.F90	(revision 60800)
+++ main/clm_initializeMod.F90	(working copy)
@@ -380,7 +380,7 @@
     ! Initialize CN Ecosystem Dynamics (must be after time-manager initialization)
     ! ------------------------------------------------------------------------
 
-    if (use_cn) then 
+    if (use_cn .and. .NOT. use_ed) then 
        call CNEcosystemDynInit(bounds_proc)
     end if
 
@@ -536,7 +536,7 @@
     ! Initialize nitrogen deposition
     ! ------------------------------------------------------------------------
 
-    if (use_cn) then
+    if (use_cn .and. .NOT. use_ed ) then
        call t_startf(&apos;init_ndep&apos;)
        call ndep_init(bounds_proc)
        call ndep_interp(bounds_proc)
Index: main/initColdMod.F90
===================================================================
--- main/initColdMod.F90	(revision 60800)
+++ main/initColdMod.F90	(working copy)
@@ -31,7 +31,7 @@
     ! non-blank fields
     !
     ! USES:
-    use clm_varctl   , only : use_cn, use_cndv, use_lch4, iulog
+    use clm_varctl   , only : use_cn, use_cndv, use_lch4, iulog, use_ed
     use UrbanInitMod , only : initColdUrban
     use SLakeInitMod , only : initColdSLake
     use CNInitMod    , only : initColdCN
@@ -57,11 +57,13 @@
 
     call initColdUrban(bounds)
 
+    if ( .not. use_ed )then
     if (use_cn)   call initColdCN(bounds)
 
     if (use_cndv) call initColdCNDV(bounds)
 
     if (use_lch4) call initColdCH4(bounds)
+    end if
 
   end subroutine initCold
 
Index: main/restFileMod.F90
===================================================================
--- main/restFileMod.F90	(revision 60800)
+++ main/restFileMod.F90	(working copy)
@@ -105,7 +105,7 @@
 
     call BiogeophysRest(bounds, ncid, flag=&apos;define&apos; )
 
-    if (use_cn) then
+    if (use_cn .and. .NOT. use_ed) then
        call CNRest(bounds,  ncid, flag=&apos;define&apos;)
        if ( crop_prog ) call CropRest( bounds, ncid, flag=&apos;define&apos; )
     end if
@@ -138,7 +138,7 @@
 
     call BiogeophysRest( bounds, ncid, flag=&apos;write&apos; )
 
-    if (use_cn) then
+    if (use_cn .and. .NOT. use_ed) then
        call CNRest( bounds, ncid, flag=&apos;write&apos; )
        if ( crop_prog ) call CropRest( bounds, ncid, flag=&apos;write&apos; )
     end if
@@ -217,7 +217,7 @@
 
     call BiogeophysRest( bounds, ncid, flag=&apos;read&apos; )
 
-    if (use_cn) then
+    if (use_cn .and. .NOT. use_ed) then
        call CNRest( bounds, ncid, flag=&apos;read&apos; )
        if ( crop_prog ) call CropRest( bounds, ncid, flag=&apos;read&apos; )
     end if
Index: main/clm_driver.F90
===================================================================
--- main/clm_driver.F90	(revision 60800)
+++ main/clm_driver.F90	(working copy)
@@ -130,7 +130,7 @@
   ! Specified phenology
   ! ============================================================================
   
-  if (use_cn) then 
+  if (use_cn) then
      ! For dry-deposition need to call CLMSP so that mlaidiff is obtained
      if ( n_drydep &gt; 0 .and. drydep_method == DD_XLND ) then
         call t_startf(&apos;interpMonthlyVeg&apos;)
@@ -166,7 +166,7 @@
       call t_startf(&quot;decomp_vert&quot;)
       call alt_calc(filter(nc)%num_soilc, filter(nc)%soilc)
 
-      if (use_cn) then
+      if (use_cn .and. .NOT. use_ed) then
          !  Note (WJS, 6-12-13): Because of this routine&apos;s placement in the driver sequence
          !  (it is called very early in each timestep, before weights are adjusted and
          !  filters are updated), it may be necessary for this routine to compute values over
@@ -195,7 +195,7 @@
    do nc = 1,nclumps
       call get_clump_bounds(nc, bounds_clump)
       
-      if (use_cn) then
+      if (use_cn .and. .NOT. use_ed) then
          call t_startf(&apos;begcnbal&apos;)
          call BeginCBalance(bounds_clump, filter(nc)%num_soilc, filter(nc)%soilc)
          call BeginNBalance(bounds_clump, filter(nc)%num_soilc, filter(nc)%soilc)
@@ -247,7 +247,7 @@
   ! ============================================================================
   
   call t_startf(&apos;ndep_interp&apos;)
-  if (use_cn) then
+  if (use_cn .and. .NOT. use_ed) then
      ! PET: switching CN timestep
      call ndep_interp(bounds_proc)
      call CNFireInterp(bounds_proc)
Index: main/histFldsMod.F90
===================================================================
--- main/histFldsMod.F90	(revision 60800)
+++ main/histFldsMod.F90	(working copy)
@@ -261,7 +261,7 @@
     ! End new lake fields
 
     ! Allow active layer fields to be optionally output even if not running CN
-    if (.not. use_cn) then
+    if (.not. use_cn .and. .NOT. use_ed ) then
        call hist_addfld1d (fname=&apos;ALT&apos;, units=&apos;m&apos;, &amp;
             avgflag=&apos;A&apos;, long_name=&apos;current active layer thickness&apos;, &amp;
             ptr_col=cps%alt, default=&apos;inactive&apos;)
@@ -1326,7 +1326,7 @@
                avgflag=&apos;A&apos;, long_name=&apos;lagged saturation status of layer in unsat. zone&apos;, &amp;
                ptr_col=cch4%layer_sat_lag)
 
-          if (use_cn) then
+          if (use_cn .and. .NOT. use_ed ) then
              call hist_addfld_decomp (fname=&apos;FPHR&apos;//trim(vr_suffix), units=&apos;unitless&apos;, type2d=&apos;levdcmp&apos;, &amp;
                   avgflag=&apos;A&apos;, long_name=&apos;fraction of potential HR due to N limitation&apos;, &amp;
                   ptr_col=cch4%fphr)
@@ -1392,7 +1392,7 @@
     end if ! CH4
 
 
-    if (use_cn) then
+    if (use_cn .and. .NOT. use_ed ) then
 
        call hist_addfld2d (fname=&apos;SOILPSI&apos;, units=&apos;MPa&apos;, type2d=&apos;levgrnd&apos;, &amp;
             avgflag=&apos;A&apos;, long_name=&apos;soil water potential in each soil layer&apos;, &amp;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6239</commentid>
    <comment_count>3</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2014-06-25 14:01:11 -0600</bug_when>
    <thetext>I did fix the issue in comment 1, in clm4_6_00, so that you can run ED with SP.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7595</commentid>
    <comment_count>4</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-07-08 09:59:41 -0600</bug_when>
    <thetext>Add Charlie to this bug. We are going to get this going on the NGEE-T repo first, before bringing to the CLM trunk.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1989</bug_id>
          
          <creation_ts>2014-06-06 15:27:00 -0600</creation_ts>
          <short_desc>add ability to specify namelist requirements via xml</short_desc>
          <delta_ts>2016-09-21 15:02:58 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P5</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>muszala</cc>
    
    <cc>mvertens</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>6197</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2014-06-06 15:27:44 -0600</bug_when>
    <thetext>Erik and I were talking about how it would be nice to be able to specify namelist requirements via an xml file, in order to simplify the error-checking that we currently do in build_namelist.

We could see three possible ways to do this:

(1) Specify requirements (somehow) in the namelist definition xml file

(2) Have a file similar to namelist_defaults, but giving requirements rather than defaults


(3) If a lot of our error-checking is along the lines of: 

If variable X=xxx, then variable Y should be yyy, which is its default value

- Then we could implement this by having something like an &quot;unmodifiable&quot; attribute in the namelist_defaults file.

e.g., rather than

&lt;Y X=xxx&gt;yyy&lt;/Y&gt;

instead, have:

&lt;Y X=xxx unmodifiable=&quot;true&quot;&gt;yyy&lt;/Y&gt;

If the unmodifiable attribute is set, that means that, not only is this its default value, but also it cannot be modified from this value by the user.

This could possibly be implemented in the add_default call.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7697</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-09-21 15:02:58 -0600</bug_when>
    <thetext>Mariana is working on a cime feature that accomplishes most or all of what we wanted here: You can add an element in namelist_definition like this:

&lt;unmodifiable_via_user_nl&gt;ERROR TEXT&lt;/unmodifiable_via_user_nl&gt;

Then if the given variable appears in the user_nl file, build_namelist will die with an error (printing the given ERROR TEXT).

This relies on the python version of the namelist utilities - so we&apos;ll be able to use it in CLM once CLM&apos;s build namelist is rewritten in python.

If I understand the original comment correctly, this mechanism wouldn&apos;t handle case (3) - which I think is dealing with the possibility that a given variable might be modifiable via the user_nl file in some circumstances but not in others. But I don&apos;t know how many (if any) cases we have of this... if it turns out we have a lot, I imagine we could extend the new code somehow to handle that case.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1984</bug_id>
          
          <creation_ts>2014-05-28 13:18:00 -0600</creation_ts>
          <short_desc>Add warning when using single instance of start file...</short_desc>
          <delta_ts>2016-07-28 16:07:31 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.2.z Release</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P2</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>cacraig</cc>
    
    <cc>muszala</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
    
    <cc>thoar</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>6170</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2014-05-28 13:18:41 -0600</bug_when>
    <thetext>I was looking through old email and found the following thing that needs to be addressed...

On 3/6/2014 3:13 PM, Jim Edwards wrote:
Hi Cheryl and Tim,

This is more than just for testing.    When you are doing the first hybrid or branch run of a new ensemble the ${inst_string} files don&apos;t exist so you need to start all of the instances from the inputdata archive of the single instance version of the same case.   That said I don&apos;t have any problem with adding the warning.    


On Thu, Mar 6, 2014 at 2:56 PM, Cheryl Craig &lt;cacraig@ucar.edu&gt; wrote:
Tim-

I am cc&apos;ing Jim as he is the original author of this section of code.  Once he agrees to your proposed change, I can implement this in CAM.  Someone else will need to implement this in CLM.

Cheryl

On 3/5/2014 5:31 PM, Tim Hoar wrote:
Hello Cheryl,

Mariana suggested that I talk to you about adding a message to the 1_2_2 versions of
[cam,clm].buildnml.csh

There is a block of logic that is (I believe) useful for testing but could be really misleading for &apos;production&apos;. If the inst_string is set to something like 0023
and the clm_startfile does not exist for a hybrid or branch case, evasive action is taken and a single-instance file is used. In the production world, this is alarming.

I would like a message printed that this is happening so instead of silently &apos;failing&apos;, you might notice it.

set clm_startfile = &quot; &quot;
if ( $RUN_TYPE == &quot;hybrid&quot; || $RUN_TYPE == &quot;branch&quot; ) then
     set clm_startfile = &quot;${RUN_REFCASE}.clm2${inst_string}.r.${RUN_REFDATE}-${RUN_REFTOD}.nc&quot;
     if ( -e &quot;$RUNDIR/$clm_startfile&quot;) then
       set clm_startfile = &quot;-clm_startfile $clm_startfile&quot;
     else
       set clm_startfile = &quot;-clm_startfile ${RUN_REFCASE}.clm2.r.${RUN_REFDATE}-${RUN_REFTOD}.nc&quot;
       echo &quot;WARNING: $clm_startfile is being used.&quot;
       echo &quot;WARNING: $clm_startfile is being used.&quot;
     endif
endif

In particular, now that cesm_setup calls preview_namelist, this gets executed before RUNDIR even exists, so I think it always fails the first time. I know it gets called again in the *run script before execution, but by that time the user does not have a chance to correct it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6185</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2014-06-02 16:11:57 -0600</bug_when>
    <thetext>Here&apos;s what this looks like in cesm1_2_2...

Index: bld/clm.buildnml.csh
===================================================================
--- bld/clm.buildnml.csh	(revision 60806)
+++ bld/clm.buildnml.csh	(working copy)
@@ -80,6 +80,8 @@
       set clm_startfile = &quot;$clm_startfile&quot;
     else
       set clm_startfile = &quot;${RUN_REFCASE}.clm2.r.${RUN_REFDATE}-${RUN_REFTOD}.nc&quot;
+      echo &quot;WARNING: $clm_startfile is being used.&quot;
+      echo &quot;WARNING: $clm_startfile is being used.&quot;
     endif
     set clmicfile = &quot; $startfiletype = &apos;$clm_startfile&apos;&quot;
 endif</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1964</bug_id>
          
          <creation_ts>2014-04-03 12:05:00 -0600</creation_ts>
          <short_desc>canopy bottom height greater than canopy top height</short_desc>
          <delta_ts>2016-07-28 16:02:44 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P2</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Keith Oleson">oleson</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>dlawren</cc>
    
    <cc>muszala</cc>
    
    <cc>oleson</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>6073</commentid>
    <comment_count>0</comment_count>
    <who name="Keith Oleson">oleson</who>
    <bug_when>2014-04-03 12:05:38 -0600</bug_when>
    <thetext>A user lowered the canopy top height of a tree pft without also lowering the canopy bottom height (in a surface dataset for SP mode), such that the canopy top height was lower than the canopy bottom height.
The CLM4 model runs happily with this inconsistency (I haven&apos;t tried the CLM4.5), the apparent effect of this is to act as a multiplier on TLAI such that ELAI is greater than TLAI.
We should probably put in a call to endrun in STATICEcosysDynMod if canopy bottom height is greater than canopy top height.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1940</bug_id>
          
          <creation_ts>2014-03-01 21:20:00 -0700</creation_ts>
          <short_desc>Problems with override_nsrest namelist option</short_desc>
          <delta_ts>2016-06-29 16:07:27 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.2.z Release</version>
          <rep_platform>PC</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>muszala</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
    
    <cc>slevis</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5952</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2014-03-01 21:20:54 -0700</bug_when>
    <thetext>The override_nsrest option is not working correctly.

A case with the following in user_nl_clm:

nrevsn = &apos;/glade/p/cesmdata/cseg/inputdata/lnd/clm2/initdata_map/clmi.ICRUCLM45BGCCROPmp24.0241-01-01.10x15_USGS_simyr2000_c131028.nc&apos;
override_nsrest=3


Here&apos;s an example issue

   0:(   13)  ys6223
   0:(   14)  ys6223
   0:(shr_sys_abort) ERROR: control_init                     ERROR: nsrest NOT set to a valid value
   0:(shr_sys_abort) WARNING: calling shr_mpi_abort() and stopping
   5:(shr_sys_abort) ERROR: control_init                     ERROR: nsrest NOT set to a valid value</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5967</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2014-03-04 14:18:33 -0700</bug_when>
    <thetext>The namelist changes to make to get it to start are as follows...

--- bld/build-namelist	(revision 57227)
+++ bld/build-namelist	(working copy)
@@ -1508,9 +1508,9 @@
   my $nsrest         = $nl-&gt;get_value(&apos;override_nsrest&apos;);
 
   if ( defined($nsrest) ) {
-    if ( $nsrest == 0 ) { $my_start_type = &quot;startup&quot;;  }
-    if ( $nsrest == 1 ) { $my_start_type = &quot;continue&quot;; }
-    if ( $nsrest == 3 ) { $my_start_type = &quot;branch&quot;;   }
+    if ( $nsrest == 0 ) { $my_start_type = &quot;&apos;startup&apos;&quot;;  }
+    if ( $nsrest == 1 ) { $my_start_type = &quot;&apos;continue&apos;&quot;; }
+    if ( $nsrest == 2 ) { $my_start_type = &quot;&apos;branch&apos;&quot;;   }
     if ( &quot;$my_start_type&quot; eq &quot;$drv_start_type&quot; ) {
       fatal_error(&quot;no need to set override_nsrest to same as start_type.\n&quot;);
     }
Index: bld/namelist_files/namelist_definition_clm4_0.xml
===================================================================
--- bld/namelist_files/namelist_definition_clm4_0.xml	(revision 57227)
+++ bld/namelist_files/namelist_definition_clm4_0.xml	(working copy)
@@ -113,9 +113,9 @@
 &lt;/entry&gt;
 
 &lt;entry id=&quot;override_nsrest&quot; type=&quot;integer&quot;  category=&quot;clm_restart&quot; 
-       group=&quot;clm_inparm&quot; valid_values=&quot;3&quot;&gt;
+       group=&quot;clm_inparm&quot; valid_values=&quot;2&quot;&gt;
 Override the start type from the driver: it can only be
-set to 3 meaning branch.
+set to 2 meaning branch.
 &lt;/entry&gt;
 
 &lt;entry id=&quot;fglcmask&quot; type=&quot;char*256&quot; category=&quot;datasets&quot;
Index: bld/namelist_files/namelist_definition_clm4_5.xml
===================================================================
--- bld/namelist_files/namelist_definition_clm4_5.xml	(revision 57227)
+++ bld/namelist_files/namelist_definition_clm4_5.xml	(working copy)
@@ -132,9 +132,9 @@
 &lt;/entry&gt;
 
 &lt;entry id=&quot;override_nsrest&quot; type=&quot;integer&quot;  category=&quot;clm_restart&quot; 
-       group=&quot;clm_inparm&quot; valid_values=&quot;3&quot;&gt;
+       group=&quot;clm_inparm&quot; valid_values=&quot;2&quot;&gt;
 Override the start type from the driver: it can only be
-set to 3 meaning branch.
+set to 2 meaning branch.
 &lt;/entry&gt;
 
 &lt;entry id=&quot;fglcmask&quot; type=&quot;char*256&quot; category=&quot;datasets&quot;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5976</commentid>
    <comment_count>2</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2014-03-05 14:33:33 -0700</bug_when>
    <thetext>I tried some cases for f10 and f19 with CROP compsets and they fail to run because of Balance Check errors. And numaIA doesn&apos;t have initial conditions which is the point of this.

So I don&apos;t have a good case for this, but I&apos;ll try to reproduce it with a non-CROP compset just to showcase the override functionality.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7568</commentid>
    <comment_count>3</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-06-29 16:07:27 -0600</bug_when>
    <thetext>We&apos;re not sure why override_nsrest would be needed, so will probably just remove it.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1927</bug_id>
          
          <creation_ts>2014-02-18 19:50:00 -0700</creation_ts>
          <short_desc>Put in sanity checks for longwave radiation and other atmospheric forcing fields</short_desc>
          <delta_ts>2016-11-07 14:44:04 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>PC</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P2</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Andy Fox">afox</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>erik</cc>
    
    <cc>oleson</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
    
    <cc>thoar</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5865</commentid>
    <comment_count>0</comment_count>
    <who name="Andy Fox">afox</who>
    <bug_when>2014-02-18 19:50:11 -0700</bug_when>
    <thetext>I am trying to move the CLM-DART framework from CLM4.0 to CLM4.5. We rely on using an ensemble of DATMs produced by CAM, these are couple history files with 6hrly values and 2 degree resolution and this has been working well with ICN compsets with a large number of model tags over the last couple of years.
 
I’m now working with clm tag 4_5_62. Using an ICN compset still causes no issues, however,  moving either CLM4.5CN or CLM4.5BGC compsets is causing long wave balance errors for some of the ensemble members.  I don’t know what fraction of the different DATMs cause errors, and which don’t, but it is the case that multiple different ones cause the error. I have been testing now with a single instance.

The following case
/glade/p/work/afox/cases/clm4_5_62_pmo_member_23

With cesm.log.140218-191607 in 
/glade/scratch/afox/clm4_5_62_pmo_member_23/run

has an error that reads as

   1: Opened file ./clm4_5_62_pmo_member_23.clm2.h0.2000-03.nc to write           1
  15: errsoi incorporated into sensible heat in SLakeTemperature: c, (W/m^2):66916  7.812500000000000E-003
  15: BalanceCheck: longwave energy balance error nstep = 5139 point =156436 imbalance =  163.744375 W/m2
  15: clm model is stopping
  15: ENDRUN: called without a message string
  15:Abort(1) on node 15 (rank 15 in comm -1006632951): application called MPI_Abort(comm=0xC4000009, 1) - process 15

There is an initial warning about a sensible heat balance error from the lake code (line 1003 of clm4_5_62/models/lnd/clm/src/clm4_5/biogeophys/SLakeTemperatureMod.F90), then an endrun call from BalanceCheck.F90 with longwave radiation. Its not immediately apparent if these are definitely actually related.

This is 100% replicable, but replicating the error is somewhat complex as you have to set the user_nl_datm correctly set the stream files to point to the correct forcing files.

We have a script that will do this for single instance case that will fail with this error

/glade/p/work/afox/DART/models/clm/shell_scripts/CESM1_1_1_setup_pmo_test</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6345</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2014-08-28 15:09:40 -0600</bug_when>
    <thetext>Andy, is this still an issue, or have you worked around it? If it&apos;s still an issue, we can return this to major importance.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6349</commentid>
    <comment_count>2</comment_count>
    <who name="Andy Fox">afox</who>
    <bug_when>2014-08-28 16:10:29 -0600</bug_when>
    <thetext>Bill,
I created a surface file with no lakes (thanks to your help) and have used that successfully. However, this isn&apos;t really a sustainable way forward for other users of DART with CLM4.5 which I know the DART folks would like to support.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6351</commentid>
    <comment_count>3</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2014-08-28 16:53:47 -0600</bug_when>
    <thetext>Okay, thanks for the reminder, Andy. I&apos;m returning this to major importance.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6541</commentid>
    <comment_count>4</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2014-11-20 10:56:45 -0700</bug_when>
    <thetext>Andy can you try either the latest code clm4_5_1_r096 or add in the bug fix for 1717 and see if it works for you now?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7187</commentid>
    <comment_count>5</comment_count>
    <who name="Tim Hoar">thoar</who>
    <bug_when>2015-11-03 14:47:22 -0700</bug_when>
    <thetext>(In reply to Erik Kluzek from comment #4)
&gt; Andy can you try either the latest code clm4_5_1_r096 or add in the bug fix
&gt; for 1717 and see if it works for you now?

The bug fix for 1717 was put in LakeHydrologyMod.F90 in clm4_5_1_r096 and does not have the last two lines that bug 1717 indicates would be a good idea.

Things apparently got moved around a bit for CLM4_5 in cesm_1_2_1, in that LakeHydrologyMod.F90 seems to be SLakeHydrologyMod.F90 - which is substantially bigger.

I did my best to add the fix to
/glade/u/home/thoar/cesm1_2_1/SourceMods/src.clm/src/clm4_5/biogeophys/SLakeHydrologyMod.F90

I did a clean_build and then a build, verified that the new SLakeHydrologyMod.F90 was used and I it appears to have had no effect.

I am still getting longwave balance errors, but my error message is slightly different than Andy&apos;s in that his pretty clearly indemnified LakeTemperature, mine does not:

63306   45:(shr_stream_set) size of filename =      1
63307   45:(shr_stream_set) filename = /glade/p/cesmdata/cseg/inputdata/lnd/clm2/ndepdata/fndep_clm_hist_simyr1849-2006_1.9x2.5_c100      428.nc
...
66589   45: BalanceCheck: longwave energy balance error nstep =        76 point =157575 imbalance =    4.556614 W/m2
66590   45: clm model is stopping
66591   45: ENDRUN:BalanceCheck: longwave energy balance error
66592   45:Abort(1) on node 45 (rank 15 in comm -1006632708): application called MPI_Abort(comm=0xC40000FC, 1) - process 15
66593   45:INFO: 0031-306  pm_atexit: pm_exit_value is 1.
66594 INFO: 0031-251  task 45 exited: rc=1
66595 ERROR: 0031-300  Forcing all remote tasks to exit due to exit code 1 in task 45</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7188</commentid>
    <comment_count>6</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2015-11-03 14:49:46 -0700</bug_when>
    <thetext>Adding Keith Oleson in case he has any insights.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7189</commentid>
    <comment_count>7</comment_count>
    <who name="Keith Oleson">oleson</who>
    <bug_when>2015-11-03 15:56:57 -0700</bug_when>
    <thetext>The only thing I can say at the moment is that it doesn&apos;t look like Zack&apos;s original suggested bug fix for 1717 was put into the code. I.e.,

&quot;I found one error that is not just a typo but also shows up in a rarely
exercised portion of the code (most likely a sudden very intense
snowstorm-- ~8 cm/hr -- preceded by warmer weather) in SLakeHydrology,
where the top lake layer temperature is likely being set incorrectly.  I
haven&apos;t tested this, but after looking it over, I think line 794 should
be changed from
&quot;t_lake(c,1) = t_lake(c,1) - heatrem/(cpliq*denh2o*dz_lake(c,1))&quot;,
to
&quot;t_lake(c,1) = tfrz + heatrem/(cpliq*denh2o*dz_lake(c,1))&quot;.  So you
could make another low-priority bug report for that.&quot;

The next comment after that is from Erik regarding a longwave balance error and then suggested fixes for that from Sean.

I don&apos;t know if the above from Zack is related to Tim&apos;s error though.  But I guess you could try it.  I will check with Erik/Sean to see why Zack&apos;s suggestion wasn&apos;t put in.  Maybe Sean&apos;s changes took care of Zack&apos;s suggestion somehow.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7190</commentid>
    <comment_count>8</comment_count>
    <who name="Tim Hoar">thoar</who>
    <bug_when>2015-11-03 16:08:15 -0700</bug_when>
    <thetext>(In reply to Keith Oleson from comment #7)
&gt; The only thing I can say at the moment is that it doesn&apos;t look like Zack&apos;s
&gt; original suggested bug fix for 1717 was put into the code. I.e.,
&gt; 
&gt; &quot;I found one error that is not just a typo but also shows up in a rarely
&gt; exercised portion of the code (most likely a sudden very intense
&gt; snowstorm-- ~8 cm/hr -- preceded by warmer weather) in SLakeHydrology,
&gt; where the top lake layer temperature is likely being set incorrectly.  I
&gt; haven&apos;t tested this, but after looking it over, I think line 794 should
&gt; be changed from
&gt; &quot;t_lake(c,1) = t_lake(c,1) - heatrem/(cpliq*denh2o*dz_lake(c,1))&quot;,
&gt; to
&gt; &quot;t_lake(c,1) = tfrz + heatrem/(cpliq*denh2o*dz_lake(c,1))&quot;.  So you
&gt; could make another low-priority bug report for that.&quot;
&gt; 
&gt; The next comment after that is from Erik regarding a longwave balance error
&gt; and then suggested fixes for that from Sean.
&gt; 
&gt; I don&apos;t know if the above from Zack is related to Tim&apos;s error though.  But I
&gt; guess you could try it.  I will check with Erik/Sean to see why Zack&apos;s
&gt; suggestion wasn&apos;t put in.  Maybe Sean&apos;s changes took care of Zack&apos;s
&gt; suggestion somehow.

I need some clarification, sorry ...

Are you saying I should back out the 20 or so lines from Sean that constitute the fix implemented in clm4_5_1_r096 in favor of Zack&apos;s one-liner:
t_lake(c,1) = tfrz + heatrem/(cpliq*denh2o*dz_lake(c,1))   ?

I already tried Sean&apos;s solution - and it did not help.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7191</commentid>
    <comment_count>9</comment_count>
    <who name="Keith Oleson">oleson</who>
    <bug_when>2015-11-03 16:14:25 -0700</bug_when>
    <thetext>No, I was suggesting you could just substitute in Zack&apos;s one-liner.  Leave
Sean&apos;s code alone.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7192</commentid>
    <comment_count>10</comment_count>
    <who name="Keith Oleson">oleson</who>
    <bug_when>2015-11-03 20:46:47 -0700</bug_when>
    <thetext>Tim, If you have a case I can clone easily I can take a closer look at this.  It will probably have to wait until next week though as we are trying to diagnose problems with CLM5 within the coupled model this week.

Keith</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7193</commentid>
    <comment_count>11</comment_count>
    <who name="Tim Hoar">thoar</who>
    <bug_when>2015-11-03 21:50:32 -0700</bug_when>
    <thetext>(In reply to Keith Oleson from comment #10)
&gt; Tim, If you have a case I can clone easily I can take a closer look at this.
&gt; It will probably have to wait until next week though as we are trying to
&gt; diagnose problems with CLM5 within the coupled model this week.
&gt; 
&gt; Keith

my case directory is:
/glade/p/work/thoar/cases/clm45_121_freerun2
the run directory is
/glade/scratch/thoar/clm45_121_freerun2/run

I appreciate the help. I have several people who want to use the multi-instance capability with CLM45 - at least one is BGC, and right now I cannot get it to run
when each instance has a separate stream file. My hunch is that (at least) one of the DATM input files (that work fine with CLM4.0) has a situation that causes CLM4.5BGC to blow up. I have not tracked down precisely which ensemble member has what I believe to be the culprit.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7196</commentid>
    <comment_count>12</comment_count>
    <who name="Andy Fox">afox</who>
    <bug_when>2015-11-04 10:05:05 -0700</bug_when>
    <thetext>I never managed to figure out which DATMS were causing the issues either - but from what I recall I decided that it was certainly more than a couple, but by no means all of them. I think I speculated it was maybe 10 out of 80 DATMS caused this issue?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7200</commentid>
    <comment_count>13</comment_count>
    <who name="Keith Oleson">oleson</who>
    <bug_when>2015-11-09 10:07:14 -0700</bug_when>
    <thetext>I&apos;d like to try to replicate the original balance error.  Will this script that Andy pointed to work for me?

/glade/p/work/afox/DART/models/clm/shell_scripts/CESM1_1_1_setup_pmo_test

I assume I would check out clm4_5_62 and then modify the above script for my directories/environment.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7201</commentid>
    <comment_count>14</comment_count>
    <who name="Tim Hoar">thoar</who>
    <bug_when>2015-11-09 16:49:46 -0700</bug_when>
    <thetext>OK - I whittled it down to a single instance that (reliably) fails.
After a newton bisection process to figure out which of the 80 instances was failing, it is this (drumroll please ...) number 2  ... sigh.

1) CASEROOT /glade/scratch/thoar/clm45bgc_121_pmo2/run
2) RUNDIR   /glade/p/work/thoar/cases/clm45bgc_121_pmo2

please clone away. Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7202</commentid>
    <comment_count>15</comment_count>
    <who name="Keith Oleson">oleson</who>
    <bug_when>2015-11-09 21:33:14 -0700</bug_when>
    <thetext>It looks like what is happening is that a negative sabg (solar absorbed) for a lake point is calculated by the albedo routine, because the incoming diffuse solar radiation is negative.  The sun is slightly above the horizon (coszen &gt; 0) so the model tries to use the negative incoming solar.  This causes a large value for lake surface temperature which generates a large outgoing longwave radiation (e+16) and the model can&apos;t quite compensate.

I checked all of the incoming diffuse solar from all of the ensemble members and several of the ensemble members have negative values in at least one grid cell.

Not sure why these forcing files worked with CLM4.0.  Maybe there is a check in the CLM4.0 source code that is not in CLM4.5 anymore.  Or maybe the CLM4.0 lake model is more forgiving of a negative solar radiation at a single time step than the CLM4.5 lake model is.  I assume that the same version of the datm is used to drive both CLM4.0 and CLM4.5.

I could see a few different fixes for this: 1) Simply zero out any negative values in the 6-hourly datm forcing files, 2) In the interpolation of 6-hourly values to 1/2 hourly in the datm code (or whatever time step CLM is using), zero out negative values, 2) Put a check into the SurfaceAlbedo code to zero out negative values before computing an albedo.

It seems to me like the best solution is 1).  Although maybe there should also be a check in CLM for negative solar radiation.  I don&apos;t know why those forcing files would have negative solar radiation.  Are those files generated by CAM?

I&apos;ll see if I can figure out why CLM4.0 works and CLM4.5 doesn&apos;t...it might be a useful exercise...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7203</commentid>
    <comment_count>16</comment_count>
    <who name="Tim Hoar">thoar</who>
    <bug_when>2015-11-10 09:53:50 -0700</bug_when>
    <thetext>Those files have origins in CESM/CAM and the CESM coupler. We do have to do some processing to concatenate them into annual files, but we don&apos;t do any &apos;math&apos; on them,
so I&apos;m not sure where the negative values are coming from, and the assimilation
doesn&apos;t screw with the diffuse solar (to my knowledge).

There are 1121 files of this nature. I&apos;m not looking forward to the prospect of hunting down all those values and replacing them with zeros. Solutions 2 or 3 might be a bit faster given the timeframe I&apos;m working with.

I&apos;d just as soon try to figure out where those are read and replace the negative values at that point.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7204</commentid>
    <comment_count>17</comment_count>
    <who name="Keith Oleson">oleson</who>
    <bug_when>2015-11-10 11:26:23 -0700</bug_when>
    <thetext>Ok, I will see if I can figure out how to zero out negative values when the datm reads them in.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7205</commentid>
    <comment_count>18</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2015-11-10 11:28:59 -0700</bug_when>
    <thetext>This discussion makes me feel like we should have some sanity checks in CLM (e.g., in atm2lndMod) that check for reasonable values of all of the forcing fields, so that problems like this can be caught more easily....</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7206</commentid>
    <comment_count>19</comment_count>
    <who name="Keith Oleson">oleson</who>
    <bug_when>2015-11-10 11:44:27 -0700</bug_when>
    <thetext>Yes, I agree.  One problem with forcing fields that appears every once in a while is negative incoming longwave radiation from the atmosphere.  This manifests itself as a longwave balance error in the urban model because the urban model has an internal check on longwave balance during the time step.  It&apos;s not obvious to users what the problem really is.  Establishing lower bounds on some fields is probably not too hard, e.g., incoming solar and longwave, humidity, precip should not be negative. Establishing upper bounds would be more challenging. Might also be a challenge for other fields such as temperature where we could be simulating climates far in the past and far in the future that have values that we would consider to be extreme relative to present day.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7207</commentid>
    <comment_count>20</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2015-11-10 11:55:38 -0700</bug_when>
    <thetext>We could tackle the easiest part first: make sure that things that should be non-negative truly are non-negative.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7209</commentid>
    <comment_count>21</comment_count>
    <who name="Andy Fox">afox</who>
    <bug_when>2015-11-10 13:40:38 -0700</bug_when>
    <thetext>Its great you guys have figured this out. Thanks so much for doing this Keith. 

I must admit back in the day when I looked in to this I didn&apos;t concentrate on errors in the DATMs as they had worked just fine with CLM4.0...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7211</commentid>
    <comment_count>22</comment_count>
    <who name="Keith Oleson">oleson</who>
    <bug_when>2015-11-10 14:56:26 -0700</bug_when>
    <thetext>Ok, I have a couple of suggested options.  They are really just to get you going with your specific CLM45 simulations, I don&apos;t recommend either as permanent bug fixes because I think we need a software engineer who is familiar with the datm code to take a look at this.  And as Bill suggested we may want to implement a more robust approach to bounding all of the forcing data under any situation, uncoupled or coupled to an active atmosphere model.

The first is to modify this file as I&apos;ve done in my SourceMods for your particular case:

/glade/p/work/oleson/cesm1_2_1/scripts/clm45bgc_121_pmo2/SourceMods/src.share/shr_strdata_mod.F90

My changes are marked with &quot;!KO&quot;:

!KO
    SDAT%avFLB(n)%rAttr(:,i) = max(SDAT%avFLB(n)%rAttr(:,i),0._r8)
!KO

This ensures that the solar radiation fields are greater than zero before the cosine normalization step to interpolate the 6-hourly data to half-hourly is performed.  The cosine normalization is only done for solar fields so we don&apos;t have to check the field names here. 

The second is to modify this file:

 /glade/p/work/oleson/cesm1_2_1/scripts/clm45bgc_121_pmo2/SourceMods/src.share/shr_dmodel_mod.F90

Changes are:
!KO
   if (sfldName == &quot;a2x6h_Faxa_swndr&quot; .or. sfldName == &quot;a2x6h_Faxa_swvdr&quot; .or. &amp;
       sfldName == &quot;a2x6h_Faxa_swndf&quot; .or. sfldName == &quot;a2x6h_Faxa_swvdf&quot;) then
      av%rattr(k,:) = max(av%rattr(k,:),0._r8)
   end if
!KO


The advantage of this is that the check for negative solar radiation is done right after the data is read in.  The disadvantage is that I&apos;m looking for specific atm fields, the four incoming solar fields on your forcing files.
NOTE that I&apos;m only doing this here for the case where &quot;pio_iotype&quot; is not &quot;iotype_std_netcdf&quot;, which is true for your particular case.  The same thing would have to be done for the other situation.

I&apos;ve tested both of these separately and they both work and get the simulation past the longwave balance error.
Ideally we would probably want to identify the negative solar radiation as it was read in, stop the model, and flag this to the user so that the user knows they have spurious incoming solar values.

If anyone can suggest a better temporary fix, let me know, thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7215</commentid>
    <comment_count>23</comment_count>
    <who name="Tim Hoar">thoar</who>
    <bug_when>2015-11-13 16:35:42 -0700</bug_when>
    <thetext>Keith, Bill, Andy;

Thank you very much. I tried your first method (modifying shr_strdata_mod.F90)
and it got past the part that stymied me before. When I get back from PTO, I will spin up an 80 member CLM4.5 BGC run for 12 years, maybe more. (I have 12 years of DATM forcing).

Again - Thanks very much and I&apos;ll keep you posted.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7567</commentid>
    <comment_count>24</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-06-29 16:01:52 -0600</bug_when>
    <thetext>Looking back at this quickly, we want to do three things:

(1) CAM should have some checks to not output negative values for some fluxes

(2) DATM should have similar checks, which convert negative values to 0

(3) CLM should check incoming values for sanity, and die with a meaningful message if values are outside the physically possible range.


(3) has come up a number of times recently. We should at least do this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7732</commentid>
    <comment_count>25</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-11-07 14:44:04 -0700</bug_when>
    <thetext>Renaming this based on what we still want to do.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1923</bug_id>
          
          <creation_ts>2014-02-14 15:16:00 -0700</creation_ts>
          <short_desc>reorganize how mocks are done for unit testing</short_desc>
          <delta_ts>2016-06-29 15:54:46 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Bill Sacks">sacks</assigned_to>
          <cc>bandre</cc>
    
    <cc>erik</cc>
    
    <cc>muszala</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5858</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2014-02-14 15:16:00 -0700</bug_when>
    <thetext>I&apos;m starting to think that I should have created mocks a level lower than where they currently are. For example, I currently mock out modules that use mpi, spmdMod, mct, etc. But this is leading to too many mocks. It might be better to mock out those problematic things - i.e., create mock versions of mpi, spmdMod, mct, etc. Then we could build the regular versions of modules that use them (they would just end up using the mocked-out version).</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1909</bug_id>
          
          <creation_ts>2014-01-27 14:09:00 -0700</creation_ts>
          <short_desc>Trouble with building PDF file for CLM User&apos;s Guide in cesm1.2...</short_desc>
          <delta_ts>2016-06-29 15:54:33 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.2.z Release</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P2</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>dlawren</cc>
    
    <cc>muszala</cc>
    
    <cc>mvertens</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5811</commentid>
    <comment_count>0</comment_count>
      <attachid>26</attachid>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2014-01-27 14:09:21 -0700</bug_when>
    <thetext>Created attachment 26
Log of the build failure...

I haven&apos;t been able to build the PDF file for the CLM User&apos;s Guide in cesm1.2. It worked before that version. The HTML works OK though. I haven&apos;t been able to figure out the issue with it. I thought it might&apos;ve been new figures I added, but that doesn&apos;t seem to be the issue.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7565</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-06-29 15:54:33 -0600</bug_when>
    <thetext>We may convert to restructured text (or some other tool) for clm5. Keeping this open until we decide for sure.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>26</attachid>
            <date>2014-01-27 14:09:00 -0700</date>
            <delta_ts>2014-01-27 14:09:21 -0700</delta_ts>
            <desc>Log of the build failure...</desc>
            <filename>build.log</filename>
            <type>application/octet-stream</type>
            <size>76178</size>
            <attacher name="Erik Kluzek">erik</attacher>
            

          </attachment>
      

    </bug>
    <bug>
          <bug_id>1906</bug_id>
          
          <creation_ts>2014-01-23 11:14:00 -0700</creation_ts>
          <short_desc>ncd_io_1d_log_glob is broken</short_desc>
          <delta_ts>2016-06-29 15:48:15 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>muszala</cc>
    
    <cc>mvertens</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5803</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2014-01-23 11:14:21 -0700</bug_when>
    <thetext>When trying to read in logical values with ncd_io in clm4_5_59, I get this message:

(shr_sys_abort) ERROR: ncd_io_1d_log_glob ERROR: read in bad integer value(s) for logical data

It looks like the relevant variable is never set: starting line 1216 in ncdio_pio.F90:

          allocate(idata1d(size(data))) 
          data = (idata == 1)
          if ( any(idata1d /= 0 .and. idata1d /= 1) )then
             call shr_sys_abort( subname// &amp;
                  &apos; ERROR: read in bad integer value(s) for logical data&apos; )
          end if

This worked in clm4_5_52. My guess is that it got broken in clm4_5_53, which created the .in version of ncdio_pio.F90.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7563</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-06-29 15:48:15 -0600</bug_when>
    <thetext>Plan is to remove this for now, since it apparently isn&apos;t used and is broken.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1904</bug_id>
          
          <creation_ts>2014-01-22 17:01:00 -0700</creation_ts>
          <short_desc>check for LSF_PJL_TYPE in regridbatch.sh doesn&apos;t work correctly</short_desc>
          <delta_ts>2016-06-29 15:44:27 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.2.z Release</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>muszala</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5801</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2014-01-22 17:01:23 -0700</bug_when>
    <thetext>This is from the cesm1.2.0 release, but I think this is the same in the latest CLM trunk:

It seems that the check for LSF_PJL_TYPE in tools/shared/mkmapdata/regridbatch.sh is no longer working correctly - i.e.:

       if [ ! -z $LSF_PJL_TYPE ]; then
	   cmdargs=&quot;$cmdargs -b&quot;
       fi

When I submitted this as a batch job, I got an error message:

ERROR: Program was not launched by POE.  Abort!!!

Removing the above lines allows this to work, but that&apos;s not a good, general solution.

It is possible that this was user error on my part....

As a reminder, we want to move to using the shared mapping tools (bug 1683), which might make this problem go away (???).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6174</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2014-05-28 22:21:40 -0600</bug_when>
    <thetext>In clm4_5_73 this was changed to

if [ ! -z &quot;$LSFUSER&quot; ]; then

I think the issue may be related to changes in LSF env variables with the specific version of LSF. So though the previous form worked before, a newer version of LSF makes it not work.

It sounds like this needs to be assessed for the cesm1_2_2 release.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1898</bug_id>
          
          <creation_ts>2014-01-13 14:18:00 -0700</creation_ts>
          <short_desc>incorrect version identifiers in text printed by source code</short_desc>
          <delta_ts>2016-06-29 15:42:53 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>muszala</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5786</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2014-01-13 14:18:55 -0700</bug_when>
    <thetext>The CLM version numbers are incorrect in various text that is printed by the model. Some examples are:

clm4_0/biogeochem/CNDVMod.F90:265:    str = &apos;Community Land Model: CLM3&apos;
clm4_5/biogeochem/CNDVMod.F90:181:    str = &apos;Community Land Model: CLM3&apos;
clm4_5/main/clm_varctl.F90:36:  character(len=256), public :: source   = &quot;Community Land Model CLM4.0&quot; ! description of this source</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7562</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-06-29 15:42:53 -0600</bug_when>
    <thetext>We should create a shared constant somewhere that has the CLM version number, and reference that.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1886</bug_id>
          
          <creation_ts>2013-12-23 12:57:00 -0700</creation_ts>
          <short_desc>refactor code that assumes a particular ordering of PFT type constants</short_desc>
          <delta_ts>2016-06-29 15:41:36 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>bandre</cc>
    
    <cc>dlawren</cc>
    
    <cc>muszala</cc>
    
    <cc>mvertens</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5766</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2013-12-23 12:57:11 -0700</bug_when>
    <thetext>Here&apos;s a fun thought experiment: How much of CLM would break if you changed the numbering of these variables in pftvarcon:

  integer :: noveg                  !value for not vegetated 
  integer :: ndllf_evr_tmp_tree     !value for Needleleaf evergreen temperate tree
  integer :: ndllf_evr_brl_tree     !value for Needleleaf evergreen boreal tree
  integer :: ndllf_dcd_brl_tree     !value for Needleleaf deciduous boreal tree
  integer :: nbrdlf_evr_trp_tree    !value for Broadleaf evergreen tropical tree
  integer :: nbrdlf_evr_tmp_tree    !value for Broadleaf evergreen temperate tree
  integer :: nbrdlf_dcd_trp_tree    !value for Broadleaf deciduous tropical tree
  integer :: nbrdlf_dcd_tmp_tree    !value for Broadleaf deciduous temperate tree
  integer :: nbrdlf_dcd_brl_tree    !value for Broadleaf deciduous boreal tree
  integer :: ntree                  !value for last type of tree
  integer :: nbrdlf_evr_shrub       !value for Broadleaf evergreen shrub
  integer :: nbrdlf_dcd_tmp_shrub   !value for Broadleaf deciduous temperate shrub
  integer :: nbrdlf_dcd_brl_shrub   !value for Broadleaf deciduous boreal shrub
  integer :: nc3_arctic_grass       !value for C3 arctic grass
  integer :: nc3_nonarctic_grass    !value for C3 non-arctic grass
  integer :: nc4_grass              !value for C4 grass

I don&apos;t know the answer to this question, but I know the answer is non-zero. Here are some examples, from a quick search:

From pftdynMod:

      ! If this is a tree pft, then
      ! get the annual harvest &quot;mortality&quot; rate (am) from harvest array
      ! and convert to rate per second
      if (ivt(p) &gt; noveg .and. ivt(p) &lt; nbrdlf_evr_shrub) then

From CNFireMod:

              ! For crop veg types
              if( pft%itype(p) &gt; nc4_grass )then
                 cropf_col(c) = cropf_col(c) + pft%wtcol(p)
              end if
              ! For natural vegetation (non-crop)
              if( pft%itype(p) &gt;= ndllf_evr_tmp_tree .and. pft%itype(p) &lt;= nc4_grass )then
                 lfwt(c) = lfwt(c) + pft%wtcol(p)
              end if

From CNVegStructUpdateMod:

             ! if shrubs have a squat taper 
             if (ivt(p) &gt;= nbrdlf_evr_shrub .and. ivt(p) &lt;= nbrdlf_dcd_brl_shrub) then
                taper = 10._r8




And a corollary question: How much of CLM SHOULD break when you change the ordering of these? I would argue strongly that the answer to this question SHOULD BE ZERO.

The problems I see with usages like the above examples are:

(1) If we change the ordering of these pfts in the future, or remove any pfts, we&apos;ll break a lot of code

(2) More importantly: If a user naively tries to add a new pft, they are likely to inadvertently break code in hard-to-detect ways. For example, if someone naively added a new shrub type before nbrdlf_evr_shrub, it would be treated as a tree by the above code in pftdynMod. 


What should be done? I&apos;d say that the only conditional that should be allowed involving ivt is equality: no checks of less than something or greater than something. To enable logic like the above, there should be additional metadata associated with each pft, like is_tree, is_crop, is_natveg, is_shrub, etc.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5767</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2013-12-23 13:40:58 -0700</bug_when>
    <thetext>Hey Bill

I agree with you. This has been something I&apos;ve been aware of as a danger, but haven&apos;t been able to refactor. I started adding the indices rather than having magic numbers hardcoded everywhere in CLM. That&apos;s part of the danger of this -- there are hard-coded assumptions about the values and likely still hard-coded magic numbers. I think we have a variable for tree, but we probably need something similar for shrub and grass.

I think I did add some limited checking that does verify things are expected when reading in the params file (pft con file). So if you change the order it might catch at least some situations. But, yeah it would be best if the code were flexible enough that the order didn&apos;t matter, especially as we are adding a ton of more crop PFT&apos;s.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1884</bug_id>
          
          <creation_ts>2013-12-17 11:26:00 -0700</creation_ts>
          <short_desc>min &amp; max don&apos;t work correctly for some history fields</short_desc>
          <delta_ts>2016-06-13 14:46:04 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>muszala</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5759</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2013-12-17 11:26:23 -0700</bug_when>
    <thetext>The &apos;min&apos; and &apos;max&apos; functions don&apos;t work correctly for some history fields. Specifically, this seems to apply to fields that take on spval at some points in time, but not others. This definitely applies to the multi-layer snow fields that I&apos;m adding; I&apos;m not sure if it applies to any others.

This problem seems to be in clm4.0 and clm4.5, although I have only witnessed it in CLM4.5.

The fix is as shown at the bottom of the bug report; I have tested this for my new snow fields (exercising the clm4.5 code, with 2-d fields averaged to the grid cell level). Note that the diffs below just fix the problem in one place. This problem occurs in at least 3 other places in the clm4.5 code, and a similar number of places in the clm4.0 code (and maybe more; I didn&apos;t look carefully - search for nacs in the code). The main reason I&apos;m not just making the fix right now is that I don&apos;t have time to test this fix in all the places where it occurs. This could actually be a good excuse to consolidate some of the duplicated code in histFileMod - i.e., consolidate the 4 (or more) places where the average / min / max logic is duplicated (with small variations).

Note that I am planning to add min/max versions of the snow history fields to some of the CLM tests. If I do this, then I would expect this bug fix to change answers for these min/max snow history fields (in particular, I expect to see a FILLDIFF in cprnc).

Here are the diffs that fix the problem in one place:

Index: main/histFileMod.F90
===================================================================
--- main/histFileMod.F90	(revision 56050)
+++ main/histFileMod.F90	(working copy)
@@ -1391,10 +1391,10 @@
                 if (field_gcell(k,j) /= spval) then
                    if (nacs(k,j) == 0) hbuf(k,j) = -1.e50_r8
                    hbuf(k,j) = max( hbuf(k,j), field_gcell(k,j) )
+                   nacs(k,j) = 1
                 else
-                   hbuf(k,j) = spval
+                   if (nacs(k,j) == 0) hbuf(k,j) = spval
                 endif
-                nacs(k,j) = 1
              end do
           end do
        case (&apos;M&apos;) ! Minimum over time
@@ -1403,10 +1403,10 @@
                 if (field_gcell(k,j) /= spval) then
                    if (nacs(k,j) == 0) hbuf(k,j) = +1.e50_r8
                    hbuf(k,j) = min( hbuf(k,j), field_gcell(k,j) )
+                   nacs(k,j) = 1
                 else
-                   hbuf(k,j) = spval
+                   if (nacs(k,j) == 0) hbuf(k,j) = spval
                 endif
-                nacs(k,j) = 1
              end do
           end do
        case default</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1843</bug_id>
          
          <creation_ts>2013-10-16 09:49:00 -0600</creation_ts>
          <short_desc>max daylength is hard-coded for present-day orbital parameters</short_desc>
          <delta_ts>2016-06-13 14:32:54 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>erik</cc>
    
    <cc>muszala</cc>
    
    <cc>nanr</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5599</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2013-10-16 09:49:44 -0600</bug_when>
    <thetext>In doing my daylength refactor (https://svn-ccsm-models.cgd.ucar.edu/clm2/branches/daylength_refactor/), I discovered that max daylength is hard-coded for present-day orbital parameters. In talking with Nan, this could be a problem for present-day runs.

It is easiest to see the problem on the above-referenced branch (which will come to the trunk soon). 

I believe that the daylength calculation (in models/lnd/clm/src/clm4_5/biogeophys/DaylengthMod.F90 - see the daylength function) is agnostic to orbital parameters, so that should be fine - as long as it is getting the true, current solar declination angle, which I believe is the case.

The problem is in src/clm4_5/main/iniTimeConst.F90 - see the setting of max_decl there. There are actually two related problems here:

(1)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5600</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2013-10-16 10:06:16 -0600</bug_when>
    <thetext>Oops, didn&apos;t finish that; to finish:

The two related problems are:

(1) max_dayl is computed using an orbital parameter that is hard-coded for present-day

(2) max_dayl is set in initialization, then doesn&apos;t change... this isn&apos;t itself a problem currently, but would be a problem if we set it based on the actual, current orbital parameters


So I propose the following solution:

(1) Create a new function in DaylengthMod that computes the max daylength for a given grid cell. This would look like:

elemental real(r8) function max_daylength(lat, obliquity)
   max_decl = obliquity
   if (lat &lt; 0) max_decl = -max_decl
   max_daylength = daylength(lat, max_decl)
end function

(2) Do NOT set max_dayl in iniTimeConst. Instead, call the above function wherever it is needed - currently, this is just in one place, in CanopyFluxesMod.F90. So here we could have a local variable, max_dayl, and calculate it as:

max_dayl(begg:endg) = max_daylength(lat, obliquity)

(3) We then have to get the obliquity from the coupler, which I believe is already done in this call in lnd_comp_mct:

       call shr_orb_decl( calday     , eccen, mvelpp, lambm0, obliqr, declin  , eccf )

and then pass obliquity as an argument to the driver, which will then pass it along to CanopyFluxes.



I would like confirmation from Nan and Erik on these points:

(a) Nan (or Erik): Is obliquity the correct parameter to use here? What we want is the maximum solar declination angle; in iniTime const this is set as:

      ! +/- 23.4667 degrees = +/- 0.409571 radians, use negative value for S. Hem

So, is that the obliquity?

(b) Mostly for Erik: Does this seem like a reasonable solution? And do you agree with the overall design I am proposing? In particular, does it make sense to get obliquity in lnd_comp_mct and pass it down the call chain? The alternative would be to call shr_orb_decl from within the max_daylength function, but from our brief shuttle conversation, it sounded like there is some design reason to get these sort of parameters at the top level and then pass them down?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5601</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2013-10-16 10:11:01 -0600</bug_when>
    <thetext>This change will almost certainly change answers slightly, even for present-day runs (because I imagine that the hard-coded max declination angle in iniTimeConst doesn&apos;t agree completely with CESM&apos;s obliquity).

So for testing purposes, this should be done in two steps:

(1) Simply change the hard-coded max declination angle in iniTimeConst to agree with CESM&apos;s obliquity. This will change answers. (If this differs for different time periods, e.g. 1850 vs 2000, I may want to introduce a kludge so that the hard-coded value keys off of the time period of the run (or maybe introduce a call in iniTimeConst to shr_orb_decl) - so that this hard-coded value always agrees with CESM&apos;s obliquity at initialization.

(2) Do my proposed refactoring. For runs in which the orbital parameters are fixed throughout the run, this should be bfb with #1.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5602</commentid>
    <comment_count>3</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2013-10-16 10:13:16 -0600</bug_when>
    <thetext>Oops, when I said &quot;or maybe introduce a call in iniTimeConst to shr_orb_decl&quot; I meant shr_orb_params</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5758</commentid>
    <comment_count>4</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2013-12-17 11:18:05 -0700</bug_when>
    <thetext>Un-assigning myself from this... I was only assigned to this because it came up in the course of my work a few months ago, but it&apos;s not currently relevant for me.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6845</commentid>
    <comment_count>5</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2015-05-08 09:44:02 -0600</bug_when>
    <thetext>Looking back at this bug report, I noticed a typo in the initial bug report:

&gt; In talking with Nan, this could be a problem for present-day runs.

Should read:

&gt; In talking with Nan, this could be a problem for PALEO runs.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1823</bug_id>
          
          <creation_ts>2013-09-26 21:49:00 -0600</creation_ts>
          <short_desc>change restart file format to decrease file size and prevent the need for some interpinic&apos;s</short_desc>
          <delta_ts>2016-06-13 14:29:11 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>dlawren</cc>
    
    <cc>muszala</cc>
    
    <cc>mvertens</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5536</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2013-09-26 21:49:39 -0600</bug_when>
    <thetext>With the addition of lots of inactive points in memory for the sake of dynamic landunits, the size of CLM&apos;s restart files has increased significantly; e.g., for an f09 file:

old:
-rw-rw-r-- 1 sacks ncar 808M Jun  6 15:11 clmi.I1850CRUCLM45BGC.0241-01-01.0.9x1.25_g1v6_simyr1850_c130606.nc

new:
-rw-r--r-- 1 sacks ncar 2.3G Sep 26 21:03 clmi.I1850CRUCLM45BGC.0241-01-01.0.9x1.25_g1v6_simyr1850_c130926.nc


In addition, I have now had to go through a painful interpinic process twice, when simply adding 0-weight points to CLM&apos;s internal arrays.

Thus, I propose modifying the restart file format to remove a bunch of unneeded clutter - and ideally prevent having to run interpinic whenever you change the convention of which 0-weight points are included in CLM&apos;s internal arrays.

One idea would be to only write ACTIVE points to the restart file (i.e., using the active flags at the pft, col &amp; landunit levels). This makes sense because inactive points will generally have meaningless values anyway. This would require packing arrays into temporary, active-only arrays when writing restart files. The reverse operation would need to be done when reading restart files - read into a temporary array then unpack into memory by assigning the 1st point in the restart file to the 1st active point in memory, the 2nd point in the restart file to the 2nd active point, etc. Note that this might require doing away with some of the consistency checks (e.g., that the number of pfts on the restart file matches the number computed internally based on the surface dataset) - although with some thought we might be able to maintain equivalent checks (e.g., the number of pfts on the restart file should match the number of ACTIVE pfts computed internally).


Some thought would be needed as to how (if at all) this would require changes in interpinic - though my first thought is that nothing may need to be done in interpinic to handle this change.


Presumably the size of 1-d history files (with dov2xy = .false.) has increased similarly, but I&apos;m not sure if we want to apply these ideas to history files, because this could mess with people&apos;s ability to post-process these files.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1806</bug_id>
          
          <creation_ts>2013-08-31 07:26:00 -0600</creation_ts>
          <short_desc>albgrd and albgri history fields depend on decomposition, for urban points</short_desc>
          <delta_ts>2016-06-13 14:58:17 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>muszala</cc>
    
    <cc>oleson</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5447</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2013-08-31 07:26:34 -0600</bug_when>
    <thetext>I believe that this problem only affects history fields, and doesn&apos;t actually affect the operation of the model. This is a restatement of the initial bug in bug 1310 (most of the comments in that bug report really relate to a different bug).

For urban points, albgrd and albgri depend on the decomposition - either the number of tasks or the number of threads per task.

I believe that what is going on is the following (copied from bug 1310; I haven&apos;t checked carefully whether the behavior has changed slightly from this): 

(1) In UrbanMod.F90: UrbanAlbedo: A count is made of the number of urban
landunits with coszen &gt; 0 (num_solar); note that this count is just of the
number of landunits that this processor is responsible for; thus, this is where
the # PE-dependence comes in, I think.

(2) Later in that subroutine, a bunch of calculations are done if num_solar &gt; 0
-- i.e., if this PE is responsible for at least one urban landunit with coszen
&gt; 0. Note that many of these calculations are done for all landunits, even ones
for which coszen = 0. This introduces the possibility for different results
depending on the decomposition.

(3) The particular difference that I am seeing is in albgrd &amp; albgri. These are
initialized to 0 at the start of the subroutine, and so remain 0 on any PE for
which num_solar = 0. However, for PEs with num_solar &gt; 0, landunits that have
coszen = 0 end up getting albgrd = albgri = 1. This is because the calculation
of albgrd &amp; albgri depends on the values of the sref_* variables, which are
initialized to 1 (and stay at 1 for any landunit for which coszen = 0).



I have confirmed this by comparing the following from clm4_5_20: SMS_Lm1_P180x1.f19_g16.ICLM45BGC.yellowstone_intel vs SMS_Lm1_P360x1.f19_g16.ICLM45BGC.yellowstone_intel - both with ALBGRD, ALBGRI, ALBD and ALBI added to history output.

One thing I am confused about is whether this problem occurs from albgrd and albgri, but not for albd and albi - since the latter seem to just be copies of the former in UrbanMod.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7537</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-06-13 14:23:02 -0600</bug_when>
    <thetext>Keith: is this a priority to fix for CLM5? It affects these two diagnostic fields.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7545</commentid>
    <comment_count>2</comment_count>
    <who name="Keith Oleson">oleson</who>
    <bug_when>2016-06-13 14:47:20 -0600</bug_when>
    <thetext>I don&apos;t think it&apos;s a priority.  As I understand it, it just affects those history fields (which are off by default) and not the model operation (as in actual albedos that the urban model uses and/or bfb restarts).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7546</commentid>
    <comment_count>3</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-06-13 14:58:17 -0600</bug_when>
    <thetext>Sounds good - thanks. Yes, your understanding is correct.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1798</bug_id>
          
          <creation_ts>2013-08-29 13:57:00 -0600</creation_ts>
          <short_desc>extension past 2100 very slow with pftdyn file that ends in 2100</short_desc>
          <delta_ts>2016-05-16 14:28:09 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.2.z Release</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>REOPENED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P2</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="David Lawrence">dlawren</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>bugzillaMuszala</cc>
    
    <cc>erik</cc>
    
    <cc>jedwards</cc>
    
    <cc>muszala</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5420</commentid>
    <comment_count>0</comment_count>
    <who name="David Lawrence">dlawren</who>
    <bug_when>2013-08-29 13:57:39 -0600</bug_when>
    <thetext>When extending past the end of a pftdyn file time domain, the model slows down massively because of incorrect logic in pftdynMod.F90.  The model tries to read in pft information and interpolate at every timestep when it actually shouldn&apos;t be reading at all.  The fix is simple.  In pftdynMod.F90, add the line between the !DML (and add the endif)

    call get_curr_date(year, mon, day, sec)

    ! Obtain new time sample if necessary.
    ! The first condition is the regular crossing of a year boundary
    ! when within the dynpft timeseries range. The second condition is
    ! the case of the first entry into the dynpft timeseries range from
    ! an earlier period of constant weights.
!DML
    if (year &lt;= yearspft(ntimes)) then
!DML
         if (year &gt; yearspft(nt1) .or. (nt1 == 1 .and. nt2 == 1 .and. year == yearspft(1))) then

              if (year &gt;= yearspft(ntimes)) then</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5521</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2013-09-24 14:58:08 -0600</bug_when>
    <thetext>Assign to Stef</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5532</commentid>
    <comment_count>2</comment_count>
    <who name="muszala">bugzillaMuszala</who>
    <bug_when>2013-09-26 10:01:52 -0600</bug_when>
    <thetext>fixed and in clm4_5_32</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6302</commentid>
    <comment_count>3</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2014-07-30 14:01:43 -0600</bug_when>
    <thetext>*** Bug 2021 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6303</commentid>
    <comment_count>4</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2014-07-30 14:17:35 -0600</bug_when>
    <thetext>Looks like this was only fixed for clm4_5 in clm4_5_32. So it needs to be put into the clm4_0 side again. The clm4_5 side has been reworked extensively and I don&apos;t see any code similar to this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6304</commentid>
    <comment_count>5</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2014-07-30 14:45:41 -0600</bug_when>
    <thetext>In the clm4_5 code, this logic has been moved to dyn_subgrid/dynVarTimeInterpMod.F90.in - although the logic is completely reworked. (Part of my motivation for creating a new module was to handle what had become tangled, hard-to-follow logic for cases like this.)</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1786</bug_id>
          
          <creation_ts>2013-08-17 07:46:00 -0600</creation_ts>
          <short_desc>problem with the bounds of some history fields</short_desc>
          <delta_ts>2016-05-16 14:26:27 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P4</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>bandre</cc>
    
    <cc>muszala</cc>
    
    <cc>mvertens</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5381</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2013-08-17 07:46:54 -0600</bug_when>
    <thetext>There is a potential problem with the bounds of some history fields. My guess is that this doesn&apos;t cause any problems now, but could cause problems in the future, if either (1) hist_update_hbuf was called within a threaded region (right now it&apos;s not), or (2) assumptions were made about the lower bound of arrays in hist_update_hbuf.

The problem arises from associating a pointer with an array slice, as in:

ptr =&gt; target(:, 1:n)

When you do this, the lower bound of ptr is reset to 1. Contrast this to:

ptr =&gt; target

in which case ptr retains the lower bounds of target.

Specifically, this occurs in:

(1) hist_update_hbuf_field_2d

    field          =&gt; clmptr_ra(hpindex)%ptr(:,1:num2d)


(2) histFldsMod; e.g.:

          data1dptr =&gt; ccs%decomp_cpools(:,l)

(and maybe elsewhere - I haven&apos;t done an extensive search)

I believe this can be solved with the following syntax:

    ! In the following, we need to explicitly set the lower bound of &apos;field&apos;, otherwise
    ! it gets set to 1 when it&apos;s associated with the slice of &apos;ptr&apos;
    arr_lbound = lbound(clmptr_ra(hpindex)%ptr, 1)
    field(arr_lbound: , 1:) =&gt; clmptr_ra(hpindex)%ptr(:,1:num2d)

but I haven&apos;t tested this.


For now, in the interest of time, I am working around this problem simply by NOT explicitly specifying the bounds of the history fields in calls to p2g/c2g/l2g in hist_update_hbuf; e.g., I am calling these routines like:

          call p2g(bounds, &amp;
               field, &amp;
               field_gcell(bounds%begg:bounds%endg), &amp;
               p2c_scale_type, c2l_scale_type, l2g_scale_type)

rather than like:

          call p2g(bounds, &amp;
               field(bounds%begp:bounds%endp), &amp;
               field_gcell(bounds%begg:bounds%endg), &amp;
               p2c_scale_type, c2l_scale_type, l2g_scale_type)

I think this should be okay for now, but wouldn&apos;t work if this was called from within a threaded region.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5395</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2013-08-26 06:06:31 -0600</bug_when>
    <thetext>I think that the trickier part of this problem - the calls from histFldsMod (#2 in my original report) - can be solved by changing the dummy argument declarations in hist_addfld1d and hist_addfld2d, by adding lower bounds to these arguments:

    real(r8)        , optional, pointer    :: ptr_gcell(:)   ! pointer to gridcell array
    real(r8)        , optional, pointer    :: ptr_lunit(:)   ! pointer to landunit array
    real(r8)        , optional, pointer    :: ptr_col(:)     ! pointer to column array
    real(r8)        , optional, pointer    :: ptr_pft(:)     ! pointer to pft array


(I missed these in my initial rework of subroutine arguments.)

To do this, we would need to pass bounds to hist_addfld1d and hist_addfld2d - ensuring that these are the proc bounds rather than the clump bounds.

At that point, I believe that the only remaining problem would be #1 in my initial report, which could be solved via my original suggestion.

I&apos;m not sure whether this refactoring is worth the time right now, though.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5503</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2013-09-19 14:31:41 -0600</bug_when>
    <thetext>I am adding more code in histFileMod where this issue arises - specifically, code to deal with multi-layer snow history fields. 

Specifically, I have this code on my branch, in hist_update_hbuf_field_2d:

    if (is_snow_layer_field) then
       ! For multi-layer snow fields, build a special output variable that handles
       ! missing snow layers appropriately

       ! Note that the following allocation is not what we would want if this routine
       ! were operating in a threaded region (or, more generally, within a loop over
       ! nclumps) - in that case we would want to use the bounds information for this
       ! clump. But currently that&apos;s not possible because the bounds of some fields have
       ! been reset to 1 - see also bug 1786.
       allocate(field(lbound(clmptr_ra(hpindex)%ptr, 1) : ubound(clmptr_ra(hpindex)%ptr, 1), 1:num2d))
 
Ideally, we would want field to be allocated to be just big enough for the given clump bounds (if we were within a loop over clumps). But that&apos;s not possible if the field&apos;s lower bound has been reset to 1.

So, as with my above notes, this code will only work as intended if the bounds passed to hist_update_hbuf_field_2d are proc bounds.

Once this bug is addressed, we should search for &apos;1786&apos; in histFileMod to find all notes about this problem.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5504</commentid>
    <comment_count>3</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2013-09-19 14:32:41 -0600</bug_when>
    <thetext>It looks like the syntax I suggested:

    field(arr_lbound: , 1:) =&gt; clmptr_ra(hpindex)%ptr(:,1:num2d)


is a fortran2003 feature, which should now be supported by the major compilers.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7518</commentid>
    <comment_count>4</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-05-16 14:26:27 -0600</bug_when>
    <thetext>Probably deferring this until threading is reworked in CLM to be done at a higher level - at which point this bug will either go away or be changed considerably</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1769</bug_id>
          
          <creation_ts>2013-07-23 21:57:00 -0600</creation_ts>
          <short_desc>duplicate definitions of a few functions in CanopyFluxesMod.F90</short_desc>
          <delta_ts>2016-05-16 14:19:19 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>erik</cc>
    
    <cc>muszala</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5341</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2013-07-23 21:57:40 -0600</bug_when>
    <thetext>Starting in clm4_0_67 (Jinyun&apos;s changes), there are duplicate definitions of 3 functions: ft, fth, fth25. 

It looks like Jinyun turned these into true functions, which is an improvement.

However, the old statement functions were never removed from the top of subroutine Photosynthesis: 

   real(r8) :: ft                ! photosynthesis temperature response (statement function)
   real(r8) :: fth               ! photosynthesis temperature inhibition (statement function)
   real(r8) :: fth25             ! ccaling factor for photosynthesis temperature inhibition (statement function)

   ...

   ft(tl,ha) = exp( ha / (rgas*1.e-3_r8*(tfrz+25._r8)) * (1._r8 - (tfrz+25._r8)/tl) )
   fth(tl,hd,se,cc) = cc / ( 1._r8 + exp( (-hd+se*tl) / (rgas*1.e-3_r8*tl) ) )
   fth25(hd,se) = 1._r8 + exp( (-hd+se*(tfrz+25._r8)) / (rgas*1.e-3_r8*(tfrz+25._r8)) )


(Incidentally, I had to go to a fortran reference to even figure out what these lines were doing... now that they have served their educational purpose, I think these old statement functions should be purged.)

I&apos;m guessing that the local statement functions take precedence over the module-level functions, so the module-level functions currently aren&apos;t being used. So we should (1) remove the above lines, and then (2) confirm that answers are bfb.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6074</commentid>
    <comment_count>1</comment_count>
    <who name="Stefan">muszala</who>
    <bug_when>2014-04-07 09:47:38 -0600</bug_when>
    <thetext>Need to also pull out Jinyun&apos;s new functions as common code to both ED and non-ED code Photosynthesis code.

Should be part of BFB refactor tag.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1746</bug_id>
          
          <creation_ts>2013-06-11 06:02:00 -0600</creation_ts>
          <short_desc>ERS_D.f10_f10.ICLM45BGCNoVS.yellowstone_intel.clm-rootlit error</short_desc>
          <delta_ts>2016-05-16 14:14:18 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>REOPENED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P2</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="muszala">bugzillaMuszala</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>erik</cc>
    
    <cc>muszala</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5267</commentid>
    <comment_count>0</comment_count>
    <who name="muszala">bugzillaMuszala</who>
    <bug_when>2013-06-11 06:02:41 -0600</bug_when>
    <thetext>ERS_D.f10_f10.ICLM45BGCNoVS.yellowstone_intel.clm-rootlit

Ran in clm4_5_09.  After the refactor in clm4_5_10, this test still runs but is not BFB with clm4_5_09.  Consider clm4_5_09 truth.

As a sanity check, ERS_D.f10_f10.ICLM45BGCNoVS.frankfurt_intel.clm-rootlit is BFB between clm4_5_09 and clm4_5_10.

This looks like a problem specific to yellowstone &amp; the intel compiler.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5279</commentid>
    <comment_count>1</comment_count>
    <who name="muszala">bugzillaMuszala</who>
    <bug_when>2013-06-12 13:05:28 -0600</bug_when>
    <thetext>found error with nag in

ch4Mod.F90, line 1003: Subscript 2 of POT_F_NIT_VR (value 2) is out of range (1:1). 

fix from Jim:: change

if (.not. lake )

t0

if (.not. lake .and. j&lt;=nlevdcomp_full ) then

fixes things with nag+frankfurt, intel+frankfurt and intel+yellowstone.

This will be added in an upcoming tag.

Consider any simulation with this compset suspect until the fix is in place.

Stef-</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5282</commentid>
    <comment_count>2</comment_count>
    <who name="muszala">bugzillaMuszala</who>
    <bug_when>2013-06-13 09:49:25 -0600</bug_when>
    <thetext>put ch4Mod.F90 fix in clm4_5_12.  Tested with:

frankfurt+nag
frankfrut+intel

yellowstone+intel

The fix does change CLM fields for this test only.  Coupler and CLM history files remained BFB in all other tests.  Please see the clm4_5_12 ChangeLog for details.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5285</commentid>
    <comment_count>3</comment_count>
    <who name="muszala">bugzillaMuszala</who>
    <bug_when>2013-06-13 10:25:48 -0600</bug_when>
    <thetext>SPM- reopened.  proper fix is needs to go in a future tag.
 
Charlie brought me into this thread.  As I mentioned to him, I think what was going on is, the methane model is supposed to work without the vertically resolved BGC (indeed, it was originally developed in that mode), but I didn&apos;t anticipate that &quot;NITRIF_DENITRIF&quot; would be used without vertically resolved BGC when I wrote that loop.  If this is an unsupported configuration intended for machine testing only, then Jim&apos;s fix below is fine; otherwise I would tweak it to get the correct behavior, as Jim&apos;s fix will increase anoxia in the top soil layer and reduce methane oxidation more than intended.  Better to just ignore the oxygen demand by nitrifiers when the vertically resolved soil BGC is not used, and replace the logic with something like:
 
&quot;if (.not. lake .and. nlevdcomp &gt;= nlevsoi) then&quot;
or
&quot;if (.not. lake .and. nlevdcomp_full &gt;= nlevgrnd) then&quot;
 
--Zack</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6159</commentid>
    <comment_count>4</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2014-05-22 23:21:54 -0600</bug_when>
    <thetext>*** Bug 1672 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6160</commentid>
    <comment_count>5</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2014-05-23 00:17:55 -0600</bug_when>
    <thetext>Here&apos;s what those changes look like in cesm1_2_2

Index: models/lnd/clm/src/clm4_5/biogeochem/ch4Mod.F90
===================================================================
--- models/lnd/clm/src/clm4_5/biogeochem/ch4Mod.F90	(revision 60566)
+++ models/lnd/clm/src/clm4_5/biogeochem/ch4Mod.F90	(working copy)
@@ -674,7 +674,7 @@
    use ch4varcon,        only : q10ch4base, q10ch4, rootlitfrac, cnscalefactor, mino2lim, &amp; 
                                 f_ch4, lake_decomp_fact, usephfact, anoxicmicrosites, ch4rmcnlim
    use clm_varctl,       only : anoxia
-   use clm_varpar, only : nlevdecomp
+   use clm_varpar, only : nlevdecomp, nlevdecomp_full, nlevgrnd
 #ifdef CENTURY_DECOMP
    use CNDecompCascadeMod_CENTURY, only : nlev_soildecomp_standard
 #else
@@ -999,7 +999,7 @@
 
          ! Add oxygen demand for nitrification
 #if (defined NITRIF_DENITRIF)
-         if (.not. lake) then
+         if (.not. lake .and. nlevdecomp_full &gt;= nlevgrnd) then
             o2_decomp_depth(c,j) = o2_decomp_depth(c,j) + pot_f_nit_vr(c,j) * 2.0_r8/14.0_r8
                                                         ! g N/m^3/s           mol O2 / g N
          end if</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6161</commentid>
    <comment_count>6</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2014-05-23 13:46:50 -0600</bug_when>
    <thetext>Zack&apos;s fix was put into: cesm1_2_x_n12_clm4_5_10</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7515</commentid>
    <comment_count>7</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-05-16 14:13:44 -0600</bug_when>
    <thetext>Zack&apos;s suggested fix never made it to the trunk; it should.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1716</bug_id>
          
          <creation_ts>2013-05-29 12:59:00 -0600</creation_ts>
          <short_desc>remove cprnc.pl and cprnc.ncl; use standard cprnc instead</short_desc>
          <delta_ts>2016-05-16 14:02:28 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>muszala</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5196</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2013-05-29 12:59:52 -0600</bug_when>
    <thetext>My understanding is that cprnc.ncl and its cprnc.pl wrapper exist only because the standard fortran-based cprnc wasn&apos;t able to compare files without a time dimension. As of cprnc_130529, this is fixed. So I propose removing these CLM-specific cprnc scripts, and switching testing to use the standard cprnc instead.

Advantages:

(1) no longer need to maintain these scripts

(2) I recently found a problem with the cprnc.ncl script - it doesn&apos;t flag files as different if they differ in where there are missing values (see bug 1714). The fortran-based cprnc handles this correctly

(3) The fortran-based cprnc gives you more information about differences than you can get from cprnc.ncl.

(4) Post-processing scripts that look at cprnc output (e.g., summarize_cprnc_diffs) don&apos;t work on cprnc.ncl output; so if we switch to using the fortran-based program, these post-processing scripts can be used.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1683</bug_id>
          
          <creation_ts>2013-05-07 15:48:00 -0600</creation_ts>
          <short_desc>mkmapdata should use shared mapping tools</short_desc>
          <delta_ts>2016-05-09 14:45:49 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>CLM5</target_milestone>
          <dependson>1938</dependson>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>anthony.p.craig</cc>
    
    <cc>erik</cc>
    
    <cc>mlevy</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5105</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2013-05-07 15:48:42 -0600</bug_when>
    <thetext>Mike Levy suggested that CLM&apos;s mkmapdata tool should use the shared mapping tools, and in particular tools/mapping/gen_mapping_files/gen_ESMF_mapping_file/create_ESMF_map.sh -- rather than directly calling the ESMF tool. The main reason for this is that the shared tool can provide an insulating layer, requiring less maintenance of the CLM tool if the version or interface of the ESMF tool changes in the future.

We wanted to get this into the cesm1.2 release, but time limitations prevented doing so. 

Here are some notes on what needs to be done to accomplish this:

First, some notes from Mike Levy:

I&apos;ve created

https://svn-ccsm-models.cgd.ucar.edu/tools/mapping/trunk_tags/mapping_130410

with all of the changes we talked about (and more). To generate the file

map_${grid}_${lmask}_to_${res}_nomask_aave_da_$CDATE.nc

You&apos;ll want to run

$CESMROOT/tools/mapping/gen_mapping_files/gen_ESMF_mapping_file/create_ESMF_map.sh -fsrc [file corresponding to ${grid}] -nsrc ${grid}_${lmask} -fdst [file corresponding to ${res}] -ndst ${res}_nomask -map aave --clm_name

You can add the following (see the README file in gen_ESMF_mapping_file for more options):
* If the source file is a regional map, use -tsrc regional
* If the destination file is a regional map, use -tdst regional
* If you want to run the serial ESMF implementation, use -serial
* If you need the 64bit offset, use -big
* If you want to pass any other flags to ESMF, use --pass2esmf $FLAGS

This should work on yellowstone, caldera, and geyser. It may even work on jaguar, but as I said I&apos;ve never tried.



Now, my notes (some of this repeats what Mike said):

- need to pass -clm_name (this forces the tool to use the CLM naming convention, which differs somewhat from the naming convention used elsewhere for mapping files)

- need to pass src &amp; dest names, NOT weight file name. Note that these names should include the mask so that the output name looks right

- For the case where we point to the beta snapshot, we will still need to set ESMFBIN_PATH, to override what&apos;s set in Mike&apos;s script. This refers to this code:

   if [ &quot;$lrgfil&quot; = &quot;--netcdf4&quot; ] || [ ${SRC_TYPE[nfile]} = &quot;UGRID&quot; ] || [ $DST_TYPE = &quot;UGRID&quot; ]; then
       case $hostname in
	   ys* | caldera* | geyser* )
	       if [ $mpitype = &quot;mpiuni&quot; ]; then
		   MY_ESMF_REGRID=/glade/p/work/svasquez/ESMF620bs18-mpiuni/bin/ESMF_RegridWeightGen
	       else
		   MY_ESMF_REGRID=/glade/p/work/svasquez/ESMF620bs18/bin/ESMF_RegridWeightGen
	       fi
	       ;;
	   *)
	       echo &quot;No support for --netcdf4 or UGRID on machines other than yellowstone/caldera/geyser&quot;
	       exit 5
	       ;;
       esac
   fi


--- TESTING ---

- test generation of a global and single-point mapping file in a single submission
	- make sure mapping files are created, with the same name as before

- test generation of a global and single-point mapping file for Sean Swenson&apos;s file -- i.e., the topostats 1km file, which triggers the logic given above (pointing to the beta snapshot in the svasquez directory)
	- make sure mapping files are created, with the same name as before



--- DEALING WITH THE LOGIC POINTING TO THE BETA SNAPSHOT CODE ---

Once the 6.2.0 release is made for the ESMF tool, we can remove the explicit setting of ESMFBIN_PATH in the CLM mkmapdata.sh -- i.e., we can remove the above logic, as long as the shared mapping tools point to the new 6.2.0 release. At that point, all of stuff related to &apos;hostname&apos;  in mkmapdata.sh can go away, I think.

Since we&apos;re no longer trying to get this done for the cesm1.2 release, it&apos;s probably worth waiting until the shared mapping tool can be updated to 6.2.0 before making any of the changes suggested in this bug report -- since at that point, mkmapdata.sh can become simpler, no longer requiring any knowledge of the host or any paths to the esmf tool.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5757</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2013-12-17 11:17:03 -0700</bug_when>
    <thetext>Un-assigning myself from this... I was only assigned to this because it came up in the course of my work a few months ago, but it&apos;s not currently relevant for me.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5912</commentid>
    <comment_count>2</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2014-02-28 11:41:34 -0700</bug_when>
    <thetext>The ESMF6.3.0 release is out, and hence we could do this once the ESMF6.3.0 is built on the yellowstone system (which I&apos;ve asked CISL to do). We can then use

--pass2esmf &quot;--netcdf4&quot;

to turn netcdf4 on. And 

--pass2esmf &quot;--src_meshname UGRID --dst_meshname UGRID&quot;

to use the UGRID in place of SCRIP. The ESMF6.3.0 release includes the ability to do --netcdf4 and use UGRID meshname.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1679</bug_id>
          
          <creation_ts>2013-05-01 15:24:00 -0600</creation_ts>
          <short_desc>problems with new CNFireMod</short_desc>
          <delta_ts>2017-02-03 10:14:48 -0700</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>bugzillaMuszala</cc>
    
    <cc>dlawren</cc>
    
    <cc>muszala</cc>
    
    <cc>mvertens</cc>
    
    <cc>rfisher</cc>
    
    <cc>slevis</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5089</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2013-05-01 15:24:28 -0600</bug_when>
    <thetext>This started with a search through the CNFireMod code for potentially-incorrect uses of weights, now that I have introduced &apos;active&apos; flags. But in looking for this, I noticed a number of questionable things in this code, so decided to review the entire module. Here are some problems I found.

Some of these are cosmetic (e.g., variable names); others are not bugs per se, but make the code fragile to future changes; and others look like bugs (and if they aren&apos;t bugs, then they need some explanation about why they&apos;re correct even though they look incorrect).

(1) Many variables are declared as &quot;! local pointers to implicit in scalars&quot;, when in fact they are implicit out or in/out


(2) There are a number of cryptic variable names, some with no description. For example:

   real(r8) :: lh       !
   real(r8) :: fs       !
   real(r8) :: ig       !





(3) There are a number of places where the code checks whether the current pft is crop or natural veg. This is done like this:

           ! For crop veg types
           if( ivt(p) &gt; nc4_grass )then

           ! For natural vegetation (non-crop)
           if( ivt(p) &gt;= ndllf_evr_tmp_tree .and. ivt(p) &lt;= nc4_grass )then

This is very fragile code, which will break if anyone adds new natural PFTs to the beginning or end of the list. A possible replacement for crop is - I think - to use npcropmin &amp; npcropmax (defined in pftvarcon.F90) - though I&apos;m not sure whether that does the right thing when running without the specific crop types? 


(4) Similarly, checks of the type of pft:

                       if( ivt(p) .ge. nbrdlf_evr_shrub )then      !for shurb and grass
...
                       else   ! for trees


This assumes that people adding PFTs in the future will add them in the &quot;right&quot; place, where &quot;right&quot; is determined by the logic embedded here. This should probably be handled by adding constants to the pft physiology file.

The idea of someone wanting to add PFTs is not purely theoretical: Andy Jones just told me today that he is adding some PFTs for some of his work. So I am leery of code that makes this difficult or error-prone.




(5) There are some seemingly ad-hoc conditionals, some of which seem incorrect. In particular, there seem to be terms added to conditionals that don&apos;t need to (or shouldn&apos;t) be there. For example:

(a)
           ! For crop PFT&apos;s
           if( ivt(p) &gt; nc4_grass .and. wtcol(p) &gt; 0._r8 .and. leafc_col(c) &gt; 0._r8 )then
              fuelc_crop(c)=fuelc_crop(c) + (leafc(p) + leafc_storage(p) + &amp;
                            leafc_xfer(p))*wtcol(p)/cropf_col(c)     + &amp;
                            totlitc(c)*leafc(p)/leafc_col(c)*wtcol(p)/cropf_col(c)
           end if

Why should this only be done if leafc_col(c) &gt; 0? Note that the first parenthesized term can be non-zero even if leafc_col(c) == 0, because leafc_storage or leafc_xfer could be &gt; 0. 

Also:

(b)
              if( .not. shr_infnan_isnan(btran2(p)) .and. btran2(p) .le. 1._r8 )then

Why is this check needed? Since this code is in a loop over filter_soilc points, it shouldn&apos;t include points that have NaN values; and I can&apos;t see how btran2 could be greater than 1 -- and if it ever were greater than 1, I would question whether it&apos;s really correct to exclude points that have values greater than 1: is it really correct to treat points with values of 1.0000000001 (maybe due to rounding error??) fundamentally differently from points with values of 1.0?


(6) More intermediate variables (and/or comments) are needed to make it more clear what this code is doing, so people other than the author can modify it in the future. For example, in the example in #5a, I have no idea what this term is trying to accomplish:

                            totlitc(c)*leafc(p)/leafc_col(c)*wtcol(p)/cropf_col(c)

As another example, this equation is very hard to read:

        baf_peatf(c) = boreal_peatfire_c*exp(-SHR_CONST_PI*(max(wf2(c),0._r8)/0.3_r8))* &amp;
        max(0._r8,min(1._r8,(tsoi17(c)-SHR_CONST_TKFRZ)/10._r8))*peatf_lf(c)* &amp;
        (1._r8-fsat(c))



(7) There are many places where long expressions do two things at once: (1) compute some pft-level variable with a complex expression, and (2) average from pft to column -- all in a single line of code. The example in #5a, above, illustrates this.

The code would be clearer and easier to modify if these expressions were split into two pieces: (1) first compute pft-level variable for all quantities, and then (2) average to column, preferably via a call to p2c. 


(6) The use of cwtgcell in this code is suspicious to me:

                 if( ivt(p) == nbrdlf_evr_trp_tree .and. wtcol(p) .gt. 0._r8 )then
                    trotr1_col(c)=trotr1_col(c)+wtcol(p)*cwtgcell(c)
                 end if
                 if( ivt(p) == nbrdlf_dcd_trp_tree .and. wtcol(p) .gt. 0._r8 )then
                    trotr2_col(c)=trotr2_col(c)+wtcol(p)*cwtgcell(c)
                 end if
                 if( ivt(p) == nbrdlf_evr_trp_tree .or. ivt(p) == nbrdlf_dcd_trp_tree )then
                    if(lfpftd(p).gt.0._r8)then
                       dtrotr_col(c)=dtrotr_col(c)+lfpftd(p)*cwtgcell(c)
                    end if
                 end if

There appears to be no other science code (i.e., non-infrastructure code) that depends on weights on the grid cell. I believe that all code is intended to compute per-area quantities, so a column&apos;s weight on the grid cell should be irrelevant in computing a column-level quantity. 

If this code is truly correct, it needs more explanation.


(7) Why does the normalization differ for these two averages from pft to col:

              rootc_col(c) = rootc_col(c) + (frootc(p) + frootc_storage(p) + &amp;
                             frootc_xfer(p) + deadcrootc(p) +                &amp;
                             deadcrootc_storage(p) + deadcrootc_xfer(p) +    &amp;
                             livecrootc(p)+livecrootc_storage(p) +           &amp;
                             livecrootc_xfer(p))*wtcol(p)

              fsr_col(c) = fsr_col(c) + fsr_pft(ivt(p))*wtcol(p)/(1.0_r8-cropf_col(c))

i.e., why does the second normalize by (1-cropf_col), but the first does not?


(8) There are lots of magic numbers. For example:

        fire_m   = exp(-SHR_CONST_PI *(m/0.69_r8)**2)*(1.0_r8 - max(0._r8, &amp;
                   min(1._r8,(forc_rh(g)-30._r8)/(70._r8-30._r8))))*  &amp;
                   min(1._r8,exp(SHR_CONST_PI*(forc_t(g)-SHR_CONST_TKFRZ)/10._r8))
        lh       = 0.0035_r8*6.8_r8*hdmlf**(0.43_r8)/30._r8/24._r8
        fs       = 1._r8-(0.01_r8+0.98_r8*exp(-0.025_r8*hdmlf))
        ig       = (lh+forc_lnfm(g)*0.25_r8)*(1._r8-fs)*(1._r8-cropf_col(c)) 



(9) In this code and some following code, normalizations are sometimes done by (1 - cropf_col), and sometimes by lfwt:

                       if( ivt(p) .ge. nbrdlf_evr_shrub )then      !for shurb and grass
                          lgdp_col(c)  = lgdp_col(c) + (0.1_r8 + 0.9_r8*    &amp;
                                         exp(-1._r8*SHR_CONST_PI* &amp;
                                         (gdp_lf(c)/8._r8)**0.5_r8))*wtcol(p) &amp;
                                         /(1.0_r8 - cropf_col(c))
                          lgdp1_col(c) = lgdp1_col(c) + (0.2_r8 + 0.8_r8*   &amp;
                                         exp(-1._r8*SHR_CONST_PI* &amp;
                                         (gdp_lf(c)/7._r8)))*wtcol(p)/lfwt(c)
                          lpop_col(c)  = lpop_col(c) + (0.2_r8 + 0.8_r8*    &amp;
                                         exp(-1._r8*SHR_CONST_PI* &amp;
                                         (hdmlf/450._r8)**0.5_r8))*wtcol(p)/lfwt(c)

Is lfwt = (1 - cropf_col)?? If so, these normalizations should be made consistent. If not, why do they differ, and why are some normalizations done by one factor and others by another?


(10) The computations of lgdp_col, lgdp1_col and lpop_col are hard to decipher, and could use some explanatory comments and/or code cleanup (e.g., use of intermediate variables) to make it more clear what&apos;s going on here.


(11) The following code needs some explanation:

  if (fpftdyn /= &apos; &apos;) then    !true when landuse data is used
     do fc = 1,num_soilc
        c = filter_soilc(fc)
        if( dtrotr_col(c) .gt. 0._r8 )then
           if( kmo == 1 .and. kda == 1 .and. mcsec == 0)then
              lfc(c) = 0._r8
           end if
           if( kmo == 1 .and. kda == 1 .and. mcsec == dt)then
              lfc(c) = dtrotr_col(c)*dayspyr*secspday/dt
           end if
        else
           lfc(c)=0._r8
        end if
     end do
  end if

It looks like this is trying to re-initialize lfc at the beginning of each year. However, I&apos;m concerned about whether this will behave correctly if drotr_col(c) == 0 on the first and/or second timesteps of the year. In this case the variables won&apos;t be initialized for that year. Maybe that&apos;s okay - it&apos;s just not clear to me if that&apos;s what&apos;s intended.


(12) It is odd to me that deforestation fires cannot happen on Jan 1 at midnight:

        !
        ! if landuse change data is used, calculate deforestation fires and 
        ! add it in the total of burned area fraction
        !
        if (fpftdyn /= &apos; &apos;) then    !true when landuse change data is used
           if( trotr1_col(c)+trotr2_col(c) &gt; 0.6_r8 )then
              if(( kmo == 1 .and. kda == 1 .and. mcsec == 0) .or. &amp;
                   dtrotr_col(c) &lt;=0._r8 )then
                 fbac1(c)        = 0._r8
                 farea_burned(c) = baf_crop(c)+baf_peatf(c)

but perhaps there is some good reason for this


(13) Subroutine CNFireFluxes hard-codes a lot of information about the structure of the CN pools. I believe the same is done elsewhere in the CN code. This makes it very hard for anyone to add or remove a carbon or nitrogen pool, because they have to understand and modify code spread all over the model. I&apos;m not sure what the solution is, but I feel like the current implementation is not sustainable, so this is worth some thought.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5090</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2013-05-01 21:36:16 -0600</bug_when>
    <thetext>Hey Bill

Yep, for what it&apos;s worth -- I agree with you. Some of this I tried to address with Fang months ago, but I think the language barrier got in the way enough that she wasn&apos;t willing or able to make some of these changes. With more time, a lot of the suggestions in here are things I would&apos;ve done on my own as well. As it was, I did what I considered the bare-bones necessary changes. So I changed the use of magic numbers for vegetation indices to the indices from pftvarcon, changed obvious magic numbers to constants, fixed indentation, added some comments, broke up long lines, and introduced at least a few important constants. There were some values that Fang was addressing as &quot;the value that was X in the paper&quot; which is a horrible way to define what you are doing.

In terms of 3 and 4 I figured the current was at least acceptable because it&apos;s rare to add vegetation types, and I&apos;m sure other parts of the code are fragile in this way as well.

We should be able to fix &quot;1&quot;. For &quot;2&quot; we should be able to get Fang&apos;s input on. I did try to get this from Fang before, but we probably need to explicitly ask for particular variables. &quot;5&quot; is another to ask of Fang directly. The use of shr_infnan_isnan is very awkward, but wasn&apos;t something I figured I had time to mess with. &quot;6&quot;, &quot;7&quot; and &quot;10&quot; are things I&apos;m hoping Sam could help us with. &quot;9&quot; I&apos;m hoping both Fang and Sam can clarify.

On &quot;11&quot; I wondered if some of these parts of the code, shouldn&apos;t become a part of or subroutine in &quot;pftdynMod&quot;. Whether this was right or not wasn&apos;t clear to me either, but Fang did her development with transient PFT simulations, so I&apos;m assuming this part of the code was appropriately shook out.

&quot;8&quot; is something I wanted Fang to address and asked her to, but I don&apos;t think she understood what we asked. Again with more time, I would&apos;ve done more of this on my own. Perhaps, Sam and Fang can help us to define what some of the magic numbers are, so that we can use constants and parameters for them. I did at least make the constants double precision, which will make it easier for them to be constants or parameters. But, we need to know enough about what&apos;s going on that we can define names for them.

I suspect the reason for &quot;12&quot; has to do with the fact that land-use change happens on Jan/1st on midnight. And possibly that already provides enough of a change that you can&apos;t do deforestation on top of that. But, this means the real problem with the statement is the implicit linking of this line with how often pftdynMod is invoked. That&apos;s an example of where maybe some of this should be moved to pftdynMod, and maybe there should be methods of pftdynMod that can be provided to make sure other modules  

&quot;13&quot; of course will take more group effort.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5091</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2013-05-02 06:22:13 -0600</bug_when>
    <thetext>Erik: Thanks a lot for your detailed reply. I had a feeling you had already done a lot of cleanup of this code, and to be clear, this wasn&apos;t at all meant as a criticism of your gatekeeper work (I don&apos;t think you took it that way, but just in case...): I don&apos;t think the burden for all of this cleanup should fall on the software engineering gatekeeper. Perhaps we need some more discussion of process, though.

I also realized that I had two #6&apos;s and two #7&apos;s -- whoops. That&apos;s a shame, because the second #6 and #7 are some of the more suspicious pieces of code to me, so I don&apos;t want them to get lost. 

For the sake of future discussion, let&apos;s use this numbering:


(6) More intermediate variables (and/or comments) are needed to make it more clear what this code is doing, so people other than the author can modify it in the future. For example, in the example in #5a, I have no idea what this term is trying to accomplish:
                           
totlitc(c)*leafc(p)/leafc_col(c)*wtcol(p)/cropf_col(c)

As another example, this equation is very hard to read:

        baf_peatf(c) = boreal_peatfire_c*exp(-SHR_CONST_PI*(max(wf2(c),0._r8)/0.3_r8))* &amp;
        max(0._r8,min(1._r8,(tsoi17(c)-SHR_CONST_TKFRZ)/10._r8))*peatf_lf(c)* &amp;
        (1._r8-fsat(c))



(7) There are many places where long expressions do two things at once: (1) compute some pft-level variable with a complex expression, and (2) average from pft to column -- all in a single line of code. The example in #5a, above, illustrates this.

The code would be clearer and easier to modify if these expressions were split into two pieces: (1) first compute pft-level variable for all quantities, and then (2) average to column, preferably via a call to p2c. 


--

(14) The use of cwtgcell in this code is suspicious to me:

                 if( ivt(p) == nbrdlf_evr_trp_tree .and. wtcol(p) .gt. 0._r8)then
                    trotr1_col(c)=trotr1_col(c)+wtcol(p)*cwtgcell(c)
                 end if
                 if( ivt(p) == nbrdlf_dcd_trp_tree .and. wtcol(p) .gt. 0._r8)then
                    trotr2_col(c)=trotr2_col(c)+wtcol(p)*cwtgcell(c)
                 end if
                 if( ivt(p) == nbrdlf_evr_trp_tree .or. ivt(p) == nbrdlf_dcd_trp_tree )then
                    if(lfpftd(p).gt.0._r8)then
                       dtrotr_col(c)=dtrotr_col(c)+lfpftd(p)*cwtgcell(c)
                    end if
                 end if

There appears to be no other science code (i.e., non-infrastructure code) that depends on weights on the grid cell. I believe that all code is intended to compute per-area quantities, so a column&apos;s weight on the grid cell should be irrelevant in computing a column-level quantity. 

If this code is truly correct, it needs more explanation.


(15) Why does the normalization differ for these two averages from pft to col:

              rootc_col(c) = rootc_col(c) + (frootc(p) + frootc_storage(p) + &amp;
                             frootc_xfer(p) + deadcrootc(p) +                &amp;
                             deadcrootc_storage(p) + deadcrootc_xfer(p) +    &amp;
                             livecrootc(p)+livecrootc_storage(p) +           &amp;
                             livecrootc_xfer(p))*wtcol(p)

              fsr_col(c) = fsr_col(c) + fsr_pft(ivt(p))*wtcol(p)/(1.0_r8-cropf_col(c))

i.e., why does the second normalize by (1-cropf_col), but the first does not?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6615</commentid>
    <comment_count>3</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2014-12-15 12:16:25 -0700</bug_when>
    <thetext>To further justify the importance of (14): When I ran a set of simulations with roundoff-level differences in the percent of each landunit on the grid cell, the only piece of source code that led to divergent evolution of the two were these lines in CNFireMod. When I deleted this dependence on col%wtgcell, the two simulations had identical fields at the patch and column-level, and only roundoff-level differences at the grid cell level (as expected). That is to say, this piece of code in (14) seems to differ from everything else in the model, in that it introduces a dependence on the subgrid weights that should not be there.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6616</commentid>
    <comment_count>4</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2014-12-19 15:22:13 -0700</bug_when>
    <thetext>Also note that there are currently two versions of btran in the code, one of which is specific to fire. If possible, we&apos;d like to change this so that the fire code uses the standard btran.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6617</commentid>
    <comment_count>5</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2014-12-19 15:27:42 -0700</bug_when>
    <thetext>Ideally, we should also cross-check the code against the paper &amp; tech note describing this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6618</commentid>
    <comment_count>6</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2014-12-19 15:35:12 -0700</bug_when>
    <thetext>Dave would like to do two things initially:

(1) Resolve the use of two separate btran values

(2) Fix the column weight on the gridcell problem (#14 from my list) [Bill]

We will then ask Sam to look at some of the other stuff in here.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7689</commentid>
    <comment_count>7</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-09-18 07:32:49 -0600</bug_when>
    <thetext>In clm4_5_12_r195, I have removed the use of col%wtgcell in the calculation of trotr1 and trotr2 - but not yet in the calculation of dtrotr. So this is a partial fix of problem (14) in this bug report.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7781</commentid>
    <comment_count>8</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-12-22 10:51:09 -0700</bug_when>
    <thetext>I started down the path of addressing:

(12) It is odd to me that deforestation fires cannot happen on Jan 1 at midnight

But gave up: The check for the last time step of the year (searching for kmo) happens for a number of things (e.g., initializing burndate, fbac1, farea_burned)... and I&apos;m not sure what exactly needs to be changed and what needs to be kept as is. So I&apos;m not going to address the issue with deforestation fires not happening on the last time step of the year, because I don&apos;t understand how this might interact with other parts of the code - and what I might break by addressing this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7854</commentid>
    <comment_count>9</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2017-02-03 10:14:48 -0700</bug_when>
    <thetext>I have fixed the remainder of problem (14) in clm4_5_14_r223 (use of cwtgcell)</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1668</bug_id>
          
          <creation_ts>2013-04-19 12:10:00 -0600</creation_ts>
          <short_desc>remove duplicate call to SoilBiogeochemVerticalProfile</short_desc>
          <delta_ts>2016-07-15 13:11:17 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>cdkoven</cc>
    
    <cc>erik</cc>
    
    <cc>muszala</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5049</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2013-04-19 12:10:46 -0600</bug_when>
    <thetext>Currently, decomp_vertprofiles is called from two places: (1) clm_driver.F90, (2) CNDecompAlloc, which is called from CNEcosystemDyn. From talking to Charlie, it sounds like this is a mistake; it should probably just be called from the driver.

Removing the duplicate call from CNDecompAlloc causes answer changes for transient cases, which would take some examination to confirm that this hasn&apos;t broken anything. Since we are under time pressure so close to the release freeze, we have decided not to remove this duplicate call for now. However, when someone has time to sign off on the answer changes, this should be re-examined.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5291</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2013-06-14 11:55:55 -0600</bug_when>
    <thetext>In a branch that I&apos;m working on (where the main purpose is to make column-level filters only operate over active points), I have changed decomp_vertprofiles to operate over all istsoil &amp; istcrop pfts &amp; columns -- not just those that are active. I was hopeful that this would allow me to remove this duplicate call. However, when I tried removing the call from CNDecompAlloc (keeping in place the call in the driver) I get carbon balance errors in many (though not all) tests. 

For example:

RUN   ERS_E.f19_g16.I1850CRUCLM45CN.yellowstone_intel.GC.200453 
RUN   ERS_D.hcru_hcru.I_2000_CRUFRC_CLM45_CN.yellowstone_pgi.GC.200503</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5292</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2013-06-14 16:03:29 -0600</bug_when>
    <thetext>I confirmed that this test also fails on the trunk (clm4_5_11):

ERS_E.f19_g16.I1850CRUCLM45CN.yellowstone_intel

if you get rid of the call to decomp_vertprofiles from CNDecompAlloc. Again, I get a C balance error a short way into the run.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5306</commentid>
    <comment_count>3</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2013-06-27 12:28:40 -0600</bug_when>
    <thetext>Ideally, we would also like the call to decomp_vertprofiles from the driver to be moved later in the driver sequence -- at least sometime after subgrid weights are updated due to transient land use. Currently this routine needs to operate over inactive as well as active points because of its unusually early placement in the driver sequence, and we would like to remove the need for this if possible. (The problem with its current placement is: If it just operated over active points, like most other routines, then computations wouldn&apos;t be done for PFTs that are currently 0-weight, but are about to become non-0-weight later this time step.)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6613</commentid>
    <comment_count>4</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2014-12-12 16:42:12 -0700</bug_when>
    <thetext>see also bug 2107</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6750</commentid>
    <comment_count>5</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2015-02-24 12:39:37 -0700</bug_when>
    <thetext>decomp_vertprofiles has been renamed to SoilBiogeochemVerticalProfile</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7603</commentid>
    <comment_count>6</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-07-15 13:04:15 -0600</bug_when>
    <thetext>I&apos;m not sure what, if anything, should be done about this: I don&apos;t see any clearly superior solutions.

Copying an email I just sent to Charlie:

This is still called in two places:

./biogeochem/CNDriverMod.F90:318:    call SoilBiogeochemVerticalProfile(bounds, num_soilc, filter_soilc, num_soilp, filter_soilp, &amp;
./main/clm_driver.F90:210:          call SoilBiogeochemVerticalProfile(bounds_clump                                       , &amp;

The main (only?) issue with moving this appears to be the use in dyn_cnbal_patch, which is called before CNDriver. Incidentally: While I have reworked a lot of stuff related to dynamic LU, I don&apos;t think I have changed anything related to the uses of the vertical profile stuff in dyn_cnbal_patch: their use and general timing in the driver sequencing remain as they have been over the last few years (or more).

I have given this some more (actually, too much) thought yesterday. My basic conclusion is that I can see a few possible ways forward, but don&apos;t see any easy solution. So my inclination at this point is to leave things as is, unless you or I can come up with a clear, winning solution that doesn&apos;t take too much work to put in place.

You don&apos;t need to read through all the details below, but I&apos;m including them in case you want more details:


The options are essentially:

(1) Leave things as is, with two calls to SoilBiogeochemVerticalProfile, including a call to that and to alt_calc early in the driver sequence

Pros:
- Easy
- Safe (no risk of introducing balance errors with possible changes)

Cons:
- The current anomalous position of these in the driver sequence is a bit confusing: These routines are called much earlier than most science routines in the driver sequence
- The fact that this is called twice is also anomalous and a bit confusing
- The fact that the clm_driver calls use the &quot;inactive_and_active&quot; filters is also anomalous, and makes analysis of the system a bit harder
- Performance: the extra call to SoilBiogeochemVerticalProfile is responsible for ~ 1% of total CLM run time (from a very rough timing... probably not very accurate)

(1a) Keep things basically as is, but change the filters in the clm_driver call to just the active filters

I think this may work. This would eliminate or reduce some of the cons, but I&apos;d want to do extra analysis / thought to make sure this would work.


(2) Keep the call in clm_driver, eliminate the call in CNDriver

I don&apos;t see why this would cause problems, but apparently it caused C balance errors when I tried it a while ago.

However, it might cause problems (unrelated to the previous C balance errors, I think) that there is some patch-to-column averaging in SoilBiogeochemVerticalProfile. I think that, for this solution to be robust, we&apos;d need to separate that patch-to-column averaging into a separate routine, and do that piece later, after the subgrid area updates.

We&apos;d still have some of the above cons – namely, the anomalous placement in the driver sequence and the operation over inactive_and_active filters. We could eliminate the latter problem (also improving performance), but then would need to re-introduce a second call that just operates over newly-active points.


(3) Keep the call in CNDriver, eliminate the call in clm_driver

For this to work, we&apos;d need to have a new call to SoilBiogeochemVerticalProfile sometime (late) in initialization, so that these profiles were available to dyn_cnbal_patch in the first time step. That adds some extra complexity that isn&apos;t ideal.

This would change answers for transient cases with dyn_roots = .true., and I think would change answers for all transient cases due to the relative placement of alt_calc and SoilBiogeochemVerticalProfile. This means that a bit more analysis would be needed to make sure this is done correctly.

Other than that, this would remove the cons listed above.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7604</commentid>
    <comment_count>7</comment_count>
    <who name="charlie">cdkoven</who>
    <bug_when>2016-07-15 13:11:17 -0600</bug_when>
    <thetext>Bill,

I guess option 3 seems the most preferable long-term solution to me, but I&apos;m not sure that it is sufficiently high priority to do this before the code freeze.

Thanks for thinking about this,
Charlie</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1662</bug_id>
          
          <creation_ts>2013-04-13 05:16:00 -0600</creation_ts>
          <short_desc>360x720 mapping directory name disagrees with resolution name</short_desc>
          <delta_ts>2016-05-09 14:35:18 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>bugzillaMuszala</cc>
    
    <cc>erik</cc>
    
    <cc>mvertens</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5036</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2013-04-13 05:16:34 -0600</bug_when>
    <thetext>Recently, the 360x720 resolution was renamed to 360x720cru. However, the directory in inputdata/lnd/clm2/mappingdata/maps is still named 360x720. This (a) could cause confusion, and more importantly (b) messes up the tools we have to post-process files created by mkmapdata (automatically creating xml entries and moving files into the correct location). 

I&apos;m not sure what the correct solution is:

(1) Live with it? It seems like we&apos;ll always be tripping up on this, having to correct the automated mkmapdata post-processing scripts.

(2) Fix the mkmapdata post-processing tools so they give special handling to this grid?

(3) Rename the mapping directory in inputdata? But that will break any older tags.

(4) Rename the mapping directory in inputdata, and make a sym link in yellowstone&apos;s inputdata (360x720 -&gt; 360x720cru) so that old tags will at least continue to work there. This is probably my preference.

Note that a renaming of the inputdata directory will require (a) changing paths in the namelist defaults files, and (b) require running some CESM tests and tools tests at 360x720cru resolution, to make sure all necessary paths have been changed correctly. These tests should be done BEFORE making the sym link suggested in (4).

Because this might be a pain, I think it can wait until after the release.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5037</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2013-04-13 09:08:57 -0600</bug_when>
    <thetext>Hi Bill

I propose another solution entirely, that isn&apos;t too hard.

Create a new directory called 360x720cru, and put a copy of the mapping files in there. In svn you can do this with &quot;svn copy&quot; so the repo. doesn&apos;t increase in size. On disk we&apos;ll have both copies around, but that&apos;s OK. This means there is no special handling for this grid, and we just have dual copies of the directory on disk. We need the old version around because of previous versions of the model, and the new for ones going forward.

So

inputdata/lnd/clm2/mappingdata/maps/360x720 -- will continue to exist for old tags

inputdata/lnd/clm2/mappingdata/maps/360x720cru -- will exist for new tags going forward.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5038</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2013-04-13 13:53:02 -0600</bug_when>
    <thetext>I agree with Erik&apos;s solution. 

However, in the interest in getting my tools tag made this weekend -- and in the interest of not having this work take over my weekend -- I am not going to make this change as part of this tag. I&apos;m worried that, what seems simple on the surface will actually take some time to get right. To test it properly, I think we should first rename (NOT copy) the inputdata directory and make all necessary changes in the xml files, then run the full test suite to make sure everything necessary has been changed in the xml files, then finally do the copy for the sake of old tags.

My feeling is that this isn&apos;t critical to fix immediately, because everything works as is right now. It will only become a problem when we are adding new standard mapping files.

Thus I propose that this be deferred until after the release freeze.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5039</commentid>
    <comment_count>3</comment_count>
    <who name="Mariana Vertenstein">mvertens</who>
    <bug_when>2013-04-13 20:15:28 -0600</bug_when>
    <thetext>Bill - I agree with your proposal. The key point is to make the release freeze. I had run over this issue with Erik before I checked this in - and it seemed okay. We can sort this all out later - as long as it is working now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5756</commentid>
    <comment_count>4</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2013-12-17 11:16:21 -0700</bug_when>
    <thetext>Un-assigning myself from this... I was only assigned to this because it came up in the course of my work a few months ago, but it&apos;s not currently relevant for me.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1661</bug_id>
          
          <creation_ts>2013-04-12 06:02:00 -0600</creation_ts>
          <short_desc>mksurfdata_map raw data grids should just be listed in hgrid, not res</short_desc>
          <delta_ts>2016-05-09 14:34:17 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P5</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5032</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2013-04-12 06:02:12 -0600</bug_when>
    <thetext>Currently, it looks like grids for mksurfdata_map raw data files are listed in two places in namelist_definition_clm4_5.xml: the valid values for &apos;res&apos; and the valid values for &apos;hgrid&apos;. The fact that they&apos;re listed in the valid values for &apos;res&apos; can be an annoyance when making mapping files with mkmapdata/regridbatch, because this tool then tries to make mapping files TO these raw data resolutions (which is unnecessary). 

This annoyance is becoming magnified with my addition of a 1km raw data file, for which mapping files take a long time to generate. 

I think these raw data grids should just be listed in hgrid, not res. But I haven&apos;t looked closely at this, so I&apos;m not positive about it. I think this will require changing some things in queryDefaultNamelist.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1652</bug_id>
          
          <creation_ts>2013-04-08 16:27:00 -0600</creation_ts>
          <short_desc>Re-implement build-namelist unit tester for CLM</short_desc>
          <delta_ts>2016-05-09 14:28:19 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.1.z Release</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P5</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>bugzillaMuszala</cc>
    
    <cc>mvertens</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>5000</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2013-04-08 16:27:28 -0600</bug_when>
    <thetext>The unit tester for CLM is quite awkward, bulky, and hard to maintain. The principle of having a unit test is a good one though, so I&apos;d like to see us continue to have one. But, it would be good to throw this version away and re-implement it completely. I&apos;ve thought this for a long time, but it isn&apos;t something we can spend time on.

I think a better way to implement it would be for it to have test lists similar to our other successful test frameworks. Then a file (probably XML) that lists the master list of tests, and the expected results. So it could specify if it was an expected fail condition or not. It should also probably understand and be able to set all the different options to the build-namelist.

I think something could be setup to read the XML file, that would be pretty lightweight. So the main effort would be in the XML file itself.

I don&apos;t know when we might be able to spend time on this, but I&apos;ll have a bug report so we don&apos;t forget about it.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1642</bug_id>
          
          <creation_ts>2013-03-14 15:22:00 -0600</creation_ts>
          <short_desc>lake depth raw dataset uses the wrong mask</short_desc>
          <delta_ts>2016-05-09 14:27:41 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>rfisher</cc>
    
    <cc>subin</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>4964</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2013-03-14 15:22:31 -0600</bug_when>
    <thetext>Currently, we have a single 3x3min rawdata file that contains both percent lake and lake depth. This file has two masks: one that is a standard landmask, and one that gives a mask of where we have real lake depth data (&quot;LAKEDATAMASK&quot;). Currently, we are using the same mapping files for both of these fields, which (I assume) use the LANDMASK for a mask. This is a problem because it means that the fill value (10m) currently gets averaged with the real data when doing the regridding.

I believe that the right thing to do would be to create a new set of mapping files that uses LAKEDATAMASK as a mask. Once we do that, we might want to split the raw data file into two separate files, so we maintain the notion of a single mask per raw data file. However, apparently Zack Subin has said that this rigorous handling of the mask isn&apos;t totally necessary at this point.

Incidentally: I consider this to be a good example of what a file&apos;s mask variable should provide: a mask telling you where there are valid data.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1633</bug_id>
          
          <creation_ts>2013-02-27 11:37:00 -0700</creation_ts>
          <short_desc>lots of duplicated code in mksurfdata_map</short_desc>
          <delta_ts>2016-05-09 14:25:42 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.1.z Release</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P5</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>erik</cc>
    
    <cc>mvertens</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>4922</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2013-02-27 11:37:02 -0700</bug_when>
    <thetext>There is a lot of duplicated code in mksurfdata_map. There is duplication between files (fields that are regridded in a simple way have modules that duplicate nearly all code from other modules), as well as within certain files (e.g., mkfileMod). 

This tool is due for a refactoring to remove some of this duplication.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>4926</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2013-02-28 08:58:39 -0700</bug_when>
    <thetext>I had been thinking about making something like a mkgenericMod, so we don&apos;t have to create a new module (with lots of duplicated code) for each new field. (And this could potentially have an array of derived types in its argument list so that it could create multiple fields at once if there are multiple fields on the same raw data file.)

But upon further reflection, I&apos;m not sure this makes sense: this would make it easy to map a generic field that doesn&apos;t require any special handling, but then it would be less clear later what would need to be done if a field needs special handling (e.g., changing all missing values to a certain other value).

So instead, I think it makes sense to maintain the design of having a separate module for each raw data file. But I&apos;ll try to pull out some of this duplicated code (e.g., the error checking code) into a shared module.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>4943</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2013-03-04 16:14:09 -0700</bug_when>
    <thetext>In my branch for changes to clm4.5 mksurfdata_map, which should come to the trunk in a week or so, I have improved things somewhat, but there&apos;s still a lot to do.

The main thing I have done is to pull out the shared error-checking code and diagnostics that are printed to the .log file into shared subroutines. Also, for the new variables I&apos;m adding, I&apos;m reorganizing the routines in a way that makes more sense when there are multiple variables in a single raw data file.

However, I have NOT retrofitted old routines with calls to my new shared routines.

In addition, I have NOT made a common routine to do diagnostic output for an integer-valued field.

In addition, I have NOT done anything about the fact that adding a new variable requires changes in a number of different places throughout the code (and the namelist generation utilities).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5304</commentid>
    <comment_count>3</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2013-06-27 11:30:29 -0600</bug_when>
    <thetext>See also the similar bug 1281</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1631</bug_id>
          
          <creation_ts>2013-02-22 20:13:00 -0700</creation_ts>
          <short_desc>For history fields, change &apos;active&apos; terminology</short_desc>
          <delta_ts>2016-05-09 14:24:41 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>CESM1.1.z Release</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>4914</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2013-02-22 20:13:32 -0700</bug_when>
    <thetext>I am adding &apos;active&apos; flags saying: &apos;should computations be done here?&apos; This leads to overloading of the term &apos;active&apos; in histFileMod, which can lead to confusion. Erik suggests that we should eventually rename &apos;active&apos; as it applies to history fields, perhaps to something like default_on.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7497</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-05-09 14:24:41 -0600</bug_when>
    <thetext>We&apos;ll address this when putting in tiered output</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1483</bug_id>
          
          <creation_ts>2012-03-22 16:20:00 -0600</creation_ts>
          <short_desc>add meta-types for landunit types</short_desc>
          <delta_ts>2016-05-05 15:00:16 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P4</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>4479</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2012-03-22 16:20:18 -0600</bug_when>
    <thetext>There are lots of checks in the code that look like this:

if (ltype(l) == istsoil .or. ltype(l) == istcrop)

or:

if (ltype(l)==istice .or. ltype(l)==istice_mec) then

or:

elseif ( itypelun(l) == istdlak .or. itypelun(l) == istslak ) then


I would propose adding some logical variables like:

is_vegetated(l) (true for soil &amp; crop landunits)

is_ice(l) (true for ice &amp; ice_mec landunits)

is_lake(l) (true for deep &amp; shallow lake)


This would have these advantages:

- more easily extensible: e.g., could add a new vegetated landunit without having to change conditionals that occur throughout the code

- safer: e.g., I just found an instance where a conditional checked ltype(l)==istice, forgetting to also check the possibility of istice_mec</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1461</bug_id>
          
          <creation_ts>2012-02-03 11:36:00 -0700</creation_ts>
          <short_desc>[CLM-only] anoxia/wtsat case fails on bluefire..</short_desc>
          <delta_ts>2016-05-05 14:56:35 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>IBM SP</rep_platform>
          <op_sys>AIX</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>cdkoven</cc>
    
    <cc>dlawren</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>4407</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2012-02-03 11:36:16 -0700</bug_when>
    <thetext>The following case fails running on bluefire due to a floating point exception. This is on the clm45sci branch what will be clm45sci01_clm4_0_39 or also 
lbnlmerge-vertsoi-lake-ch4-24.2_clm4_0_39.

059 smHd3 TSM.sh 17p_cnmesc_do clm_std^nl_anoxia_wtsat 18500101:1800 10x15 USGS@1850 -10 cold ...FAIL! rc= 10


  Signal received: SIGTRAP - Trace trap
    Signal generated for floating-point exception:
      FP invalid operation

  Instruction that generated the exception:
    fmul fr01,fr01,fr02
    Source Operand values:
      fr01 =   1.34193632121635e+26
      fr02 =   5.00000000000000e+35

  Traceback:
    Offset 0x00002720 in procedure __ch4mod_NMOD_ch4_prod, near line 973 in file /glade/proj3/cseg/people/erik/clm_lbnlmerge/models/lnd/clm/src/biogeochem/ch4Mod.F90

  Signal received: SIGTRAP - Trace trap
    Offset 0x000060f4 in procedure __ch4mod_NMOD_ch4    Signal generated for floating-point exception:
      FP invalid operation

The same test fails on lynx_pgi as well..

021 smHd3 TSM.sh 17p_cnmesc_do clm_std^nl_anoxia_wtsat 18500101:1800 10x15 USGS@1850 -10 cold ...FAIL! rc= 10</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7489</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-05-05 14:56:35 -0600</bug_when>
    <thetext>It looks like we&apos;re not running any tests with anoxia_wtsat. We should investigate this.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1457</bug_id>
          
          <creation_ts>2012-01-29 20:29:00 -0700</creation_ts>
          <short_desc>minor bug (I think) in creation of soil color in mksurfdata_map</short_desc>
          <delta_ts>2016-05-05 14:51:32 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>mvertens</cc>
    
    <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>4389</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2012-01-29 20:29:57 -0700</bug_when>
    <thetext>I think there is a bug in mksoilcol in module mksoilMod in mksurfdata_map... I haven&apos;t done any testing to confirm this, but the logic looks wrong to me:

The relevant code is copied below.

It looks like the intention is that, in the first do loop, wst(0,no) should be 0 if there is ever a non-zero color in this output cell. However, it seems there is an unintentional order dependence here: Consider the following two cases, showing the colors in input grid cells corresponding to a single output grid cell; assume for simplicity that all weights are 0.25:

(1) 0, 0, 0, 1

(2) 1, 0, 0, 0

In case (1), wst(0,no) will be correctly set to 0.0 when the 1 value is read. This will result in soil_color_o = 1.

In case (2), wst(0,no) will be set to 0.0 at first, but upon reading the three 0 values, wst(0,no) will become 0.75. This will result in soil_color_o = 0, which will later be changed to either 4 or 15.

So, if I&apos;m correct in my interpretation of this algorithm, soil_color_o sometimes depends on the order in which values appear in the source grid cells!



     do n = 1,tgridmap%ns
        ni = tgridmap%src_indx(n)
        no = tgridmap%dst_indx(n)
        wt = tgridmap%wovr(n)
        k  = soil_color_i(ni) * tdomain%mask(ni)
        wst(k,no) = wst(k,no) + wt
        if (k&gt;0 .and. wst(k,no)&gt;0.) then
           color(no) = 1
           wst(0,no) = 0.0
        end if
     enddo

     soil_color_o(:) = 0
     do no = 1,ns_o

        ! Rank non-zero weights by color type. wsti(1) is the most extensive
        ! color type. 

        if (color(no) == 1) then
           call mkrank (nsoicol, wst(0:nsoicol,no), miss, wsti, num)
           soil_color_o(no) = wsti(1)
        end if

        ! If land but no color, set color to 15 (in older dataset generic 
        ! soil color 4)
        
        if (nsoicol == 8) then
           if (soil_color_o(no)==0) soil_color_o(no) = 4
        else if (nsoicol == 20) then
           if (soil_color_o(no)==0) soil_color_o(no) = 15
        end if</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1456</bug_id>
          
          <creation_ts>2012-01-26 09:17:00 -0700</creation_ts>
          <short_desc>[CLM-only] Remove dependence on fatmgrid from clm tools...</short_desc>
          <delta_ts>2016-05-05 14:42:12 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>dlawren</cc>
    
    <cc>mvertens</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>4386</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2012-01-26 09:17:52 -0700</bug_when>
    <thetext>We are trying to remove fatmgrid. And it&apos;s removed from the model and it&apos;s OK. But, several CLM tools depend on it, so in the short run it&apos;s better to put it back in the XML database, and remove it from the tools later. so fatmgrid remains deprecated, but I&apos;m going to keep it around for a bit longer.

The following tools depend on it...

mkmapgrids
mksurfdata_map
aerd/ndep regrid.ncl
ndeplintInterp.ncl

mkmapgrids/mkmapgrids.csh:set query=&quot;$query -justvalue -csmdata $CSMDATA -var fatmgrid &quot;
mksurfdata_map/mksurfdata.pl:         $griddata = `$scrdir/../../bld/queryDefaultNamelist.pl $queryfilopts $usrnam -var fatmgrid`;
ncl_scripts/aerdepregrid.ncl:  gridinfile  = systemfunc( querynml+&quot; -res &quot;+resin+&quot; -var fatmgrid&quot; );
ncl_scripts/aerdepregrid.ncl:     gridfile    = systemfunc( querynml+&quot; -res &quot;+res  +&quot; -var fatmgrid&quot; );
ncl_scripts/ndeplintInterp.ncl:   filetype  = &quot;fatmgrid&quot;;
ncl_scripts/ndeplintInterp.ncl:   area = dble2flt( ncg-&gt;$vname$ ) * 1000000.0 ;  Area in m^2 from fatmgrid file which has it in kg^2
ncl_scripts/ndepregrid.ncl:  gridinfile  = systemfunc( querynml+&quot; -res &quot;+resin+&quot; -var fatmgrid&quot; );
ncl_scripts/ndepregrid.ncl:     gridfile    = systemfunc( querynml+&quot; -res &quot;+res  +&quot; -var fatmgrid&quot; );


These can all be changed to use mapping, surf, or domain files for the same information.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>4387</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2012-01-26 09:20:05 -0700</bug_when>
    <thetext>Also note there aren&apos;t fatmgrid files available for non lat-lon grids. So none of the HOMME grids have them for example.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7488</commentid>
    <comment_count>2</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-05-05 14:42:12 -0600</bug_when>
    <thetext>Looks like there are a few remaining references to fatmgrid that should be removed - but it doesn&apos;t look like it&apos;s being used.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1454</bug_id>
          
          <creation_ts>2012-01-21 19:38:00 -0700</creation_ts>
          <short_desc>Some clm test namelists have empty field lists for 1-d history output</short_desc>
          <delta_ts>2016-05-05 14:37:57 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P4</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>CLM5</target_milestone>
          <dependson>1455</dependson>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>rfisher</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>4375</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2012-01-21 19:38:36 -0700</bug_when>
    <thetext>Some of the namelists in test/system/nl_files have hist_dov2xy for a history file, but do not add any fields to this file, so there aren&apos;t actually any 1-d comparisons done. 

For example, nl_crop and nl_cn_conly. These namelists could be changed according to the following diffs; note that these field lists are basically the same as what&apos;s currently used in nl_urb, which correctly includes 1-d output:

Index: nl_crop
===================================================================
--- nl_crop     (revision 31723)
+++ nl_crop     (working copy)
@@ -9,6 +9,24 @@
  hist_fincl1    = &apos;GDD0&apos;, &apos;GDD8&apos;, &apos;GDD10&apos;, 
                   &apos;GDD020&apos;, &apos;GDD820&apos;, &apos;GDD1020&apos;,
                   &apos;GDDPLANT&apos;, &apos;GDDTSOI&apos;, &apos;A5TMIN&apos;, &apos;A10TMIN&apos;
+ hist_fincl2    = &apos;TG&apos;,&apos;TBOT&apos;,&apos;FIRE&apos;,&apos;FIRA&apos;,&apos;FLDS&apos;,&apos;FSDS&apos;,
+                  &apos;FSR&apos;,&apos;FSA&apos;,&apos;FGEV&apos;,&apos;FSH&apos;,&apos;FGR&apos;,&apos;TSOI&apos;,
+                  &apos;ERRSOI&apos;,&apos;BUILDHEAT&apos;,&apos;SABV&apos;,&apos;SABG&apos;,
+                  &apos;FSDSVD&apos;,&apos;FSDSND&apos;,&apos;FSDSVI&apos;,&apos;FSDSNI&apos;,
+                  &apos;FSRVD&apos;,&apos;FSRND&apos;,&apos;FSRVI&apos;,&apos;FSRNI&apos;,
+                  &apos;TSA&apos;,&apos;FCTR&apos;,&apos;FCEV&apos;,&apos;QBOT&apos;,&apos;RH2M&apos;,&apos;H2OSOI&apos;,
+                  &apos;H2OSNO&apos;,&apos;SOILLIQ&apos;,&apos;SOILICE&apos;, 
+                  &apos;TSA_U&apos;, &apos;TSA_R&apos;,
+                  &apos;TREFMNAV_U&apos;, &apos;TREFMNAV_R&apos;,
+                  &apos;TREFMXAV_U&apos;, &apos;TREFMXAV_R&apos;,
+                  &apos;TG_U&apos;, &apos;TG_R&apos;,
+                  &apos;RH2M_U&apos;, &apos;RH2M_R&apos;,
+                  &apos;QRUNOFF_U&apos;, &apos;QRUNOFF_R&apos;,
+                  &apos;SoilAlpha_U&apos;,
+                  &apos;Qanth&apos;, &apos;SWup&apos;, &apos;LWup&apos;, &apos;URBAN_AC&apos;, &apos;URBAN_HEAT&apos;,
+                  &apos;GDD0&apos;, &apos;GDD8&apos;, &apos;GDD10&apos;, 
+                  &apos;GDD020&apos;, &apos;GDD820&apos;, &apos;GDD1020&apos;,
+                  &apos;GDDPLANT&apos;, &apos;GDDTSOI&apos;, &apos;A5TMIN&apos;, &apos;A10TMIN&apos;
  /
  ! Adding the following variable causes the model to abort in debug mode
  ! with multiplying by a NaN, bugzilla bug 1325. EBK Apr/28/2011
Index: nl_cn_conly
===================================================================
--- nl_cn_conly (revision 31723)
+++ nl_cn_conly (working copy)
@@ -8,4 +8,19 @@
  hist_dov2xy    = .true.,.false.
  hist_ndens     = 1,1
  hist_fincl1    = &apos;TRAFFICFLUX&apos;, &apos;SNOWLIQ:A&apos;,&apos;SNOWICE:A&apos;
+ hist_fincl2    = &apos;TG&apos;,&apos;TBOT&apos;,&apos;FIRE&apos;,&apos;FIRA&apos;,&apos;FLDS&apos;,&apos;FSDS&apos;,
+                  &apos;FSR&apos;,&apos;FSA&apos;,&apos;FGEV&apos;,&apos;FSH&apos;,&apos;FGR&apos;,&apos;TSOI&apos;,
+                  &apos;ERRSOI&apos;,&apos;BUILDHEAT&apos;,&apos;SABV&apos;,&apos;SABG&apos;,
+                  &apos;FSDSVD&apos;,&apos;FSDSND&apos;,&apos;FSDSVI&apos;,&apos;FSDSNI&apos;,
+                  &apos;FSRVD&apos;,&apos;FSRND&apos;,&apos;FSRVI&apos;,&apos;FSRNI&apos;,
+                  &apos;TSA&apos;,&apos;FCTR&apos;,&apos;FCEV&apos;,&apos;QBOT&apos;,&apos;RH2M&apos;,&apos;H2OSOI&apos;,
+                  &apos;H2OSNO&apos;,&apos;SOILLIQ&apos;,&apos;SOILICE&apos;, 
+                  &apos;TSA_U&apos;, &apos;TSA_R&apos;,
+                  &apos;TREFMNAV_U&apos;, &apos;TREFMNAV_R&apos;,
+                  &apos;TREFMXAV_U&apos;, &apos;TREFMXAV_R&apos;,
+                  &apos;TG_U&apos;, &apos;TG_R&apos;,
+                  &apos;RH2M_U&apos;, &apos;RH2M_R&apos;,
+                  &apos;QRUNOFF_U&apos;, &apos;QRUNOFF_R&apos;,
+                  &apos;SoilAlpha_U&apos;,
+                  &apos;Qanth&apos;, &apos;SWup&apos;, &apos;LWup&apos;, &apos;URBAN_AC&apos;, &apos;URBAN_HEAT&apos;
  /</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>4378</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2012-01-21 19:54:30 -0700</bug_when>
    <thetext>I have not put these changes in place, because when I tried to do so, I got the unexpected error noted in bug 1455.

I think that, for these changes to be put in place, either bug 1455 will have to be fixed, or else the history frequency of these auxiliary files will have to be changed (e.g., to daily???).</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1451</bug_id>
          
          <creation_ts>2012-01-20 10:22:00 -0700</creation_ts>
          <short_desc>Handling of deg/rad and -180-180 vs. 0-360 in CLM input files..</short_desc>
          <delta_ts>2016-05-05 14:36:44 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P4</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>anthony.p.craig</cc>
    
    <cc>dlawren</cc>
    
    <cc>higginsm</cc>
    
    <cc>mvertens</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>4360</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2012-01-20 10:22:36 -0700</bug_when>
    <thetext>Matt found problems with handling of input files in CLM when in radians instead of degrees, and also for files on -180-180 versus 0-360. Previously I made sure all input files in CLM where 0-360 and in degree&apos;s as there were problems otherwise. There&apos;s also quite a few files here to think about. surface datasets, domain files, mapping files (both for model and for mksurdata_map), nitrogen-deposition and aerosol deposition files. I&apos;m not sure if the entire modelling system can handle it if different parts of these files are on different grids or not. I believe all raw datasets for mksurfdata_map are on -180-180. If we create domain files on 0-360 does the mapping still work right? And if we create surface datasets on -180-180, do the aerosol and Nitrogen deposition files still work right?

CLM can certainly check that the input units are degrees and die if not. Or really converting between the two isn&apos;t a real issue. I&apos;m NOT sure about the -180-180 conversion though...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>4595</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2012-07-09 15:10:19 -0600</bug_when>
    <thetext>In clm4_0_44, Tony added a change that fixes a specific manifestation of this problem for the grid domain that was needed for WRF files. It only handles one case, but does allow more of this than was allowed before (which was zero).</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1426</bug_id>
          
          <creation_ts>2011-10-20 10:49:00 -0600</creation_ts>
          <short_desc>Paths wrong in CLM&apos;s build-namelist after create_clone</short_desc>
          <delta_ts>2016-05-05 14:30:27 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P4</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>erik</cc>
    
    <cc>jedwards</cc>
    
    <cc>mvertens</cc>
    
    <cc>rfisher</cc>
    
    <cc>santos</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>4289</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2011-10-20 10:49:00 -0600</bug_when>
    <thetext>After running create_clone followed by configure -case, the paths used by CLM&apos;s build-namelist tool point to the cloned case; they should point to the new case directory.

For example, I cloned a case named test_diags_1014_clm4_0_37, to make a new case test_diags_1017. Here are the paths as documented in clm.buildnml.csh:


#! lnd_in:: Comment:
#! This namelist was created using the following command-line:
#!     /glade/proj3/cseg/people/sacks/cesm_code/clm_landice_diagnostics2/models/lnd/clm/bld/build-namelist -config /glade/proj3/cseg/people/sacks/cesm_tests/test_diags_1014_clm4_0_37/Buildconf/clmconf/config_cache.xml -res 1.9x2.5 
-mask gx1v6 -ignore_ic_year -use_case 2000_glacierMEC_control -infile cesm_namelist -clm_start_type default -rtm_res R05 -rtm_tstep 10800 -co2_ppmv 367.0 -datm_presaero clim_2000 -glc_grid gland20 -namelist &amp;clm_inparm  / -csmdata 
$DIN_LOC_ROOT -inputdata /glade/proj3/cseg/people/sacks/cesm_tests/test_diags_1014_clm4_0_37/Buildconf/clm.input_data_list
#! For help on options use: /glade/proj3/cseg/people/sacks/cesm_code/clm_landice_diagnostics2/models/lnd/clm/bld/build-namelist -help



I don&apos;t understand the implications of this, but Erik says it&apos;s bad.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6960</commentid>
    <comment_count>1</comment_count>
    <who name="Sean Santos">santos</who>
    <bug_when>2015-07-29 15:32:49 -0600</bug_when>
    <thetext>I suspect that this has been fixed, but if not, it&apos;s a CLM rather than a CIME script issue, I think.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1401</bug_id>
          
          <creation_ts>2011-08-24 14:02:00 -0600</creation_ts>
          <short_desc>[CLM-only] Restart files do NOT have _FillValue/missing_value attributes on fields</short_desc>
          <delta_ts>2016-05-05 14:28:22 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P4</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>dlawren</cc>
    
    <cc>oleson</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
    
    <cc>thoar</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>4202</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-08-24 14:02:01 -0600</bug_when>
    <thetext>Tim Hoar noticed that the restart files don&apos;t have _FillValue/missing_value attributes on fields as they should. The history files do, but restart files do NOT. Also we noticed that T_SOISNO has some values set to 0.0 while others are set to 1.e+36. Both of which are really missing values, but the code shouldn&apos;t set them to two different values.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>4203</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-08-24 14:12:36 -0600</bug_when>
    <thetext>mkarbinit sets t_soisno to spval and then defines the non-snow layers to something for everything besides lake.

Hydrology2Mod then has the following...

    ! Set empty snow layers to zero

    do j = -nlevsno+1,0
       do fc = 1, num_snowc
          c = filter_snowc(fc)
          if (j &lt;= snl(c) .and. snl(c) &gt; -nlevsno) then
             h2osoi_ice(c,j) = 0._r8
             h2osoi_liq(c,j) = 0._r8
             t_soisno(c,j) = 0._r8
             dz(c,j) = 0._r8
             z(c,j) = 0._r8
             zi(c,j-1) = 0._r8
          end if
       end do
    end do

But, for t_soisno(c,j) it should set it to spval rather than zero.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>4204</commentid>
    <comment_count>2</comment_count>
    <who name="Tim Hoar">thoar</who>
    <bug_when>2011-08-24 14:28:23 -0600</bug_when>
    <thetext>There may be more to it ...  I&apos;m looking at values for H2OSOI_LIQ and sometimes
the top 5 layers are zero, sometimes spval ... H2OSOI_ICE has the same behavior:

   0,   // H2OSOI_LIQ(1,1602)
    0,   // H2OSOI_LIQ(2,1602)
    0,   // H2OSOI_LIQ(3,1602)
    0,   // H2OSOI_LIQ(4,1602)
    0,   // H2OSOI_LIQ(5,1602)
    1,   // H2OSOI_LIQ(6,1602)
    0,   // H2OSOI_LIQ(7,1602)
    0,   // H2OSOI_LIQ(8,1602)
    0,   // H2OSOI_LIQ(9,1602)
    0,   // H2OSOI_LIQ(10,1602)
    0,   // H2OSOI_LIQ(11,1602)
    0,   // H2OSOI_LIQ(12,1602)
    0,   // H2OSOI_LIQ(13,1602)
    0,   // H2OSOI_LIQ(14,1602)
    0,   // H2OSOI_LIQ(15,1602)
    0,   // H2OSOI_LIQ(16,1602)
    0,   // H2OSOI_LIQ(17,1602)
    0,   // H2OSOI_LIQ(18,1602)
    0,   // H2OSOI_LIQ(19,1602)
    0,  // H2OSOI_LIQ(20,1602)
    1e+36,   // H2OSOI_LIQ(1,1603)
    1e+36,   // H2OSOI_LIQ(2,1603)
    1e+36,   // H2OSOI_LIQ(3,1603)
    1e+36,   // H2OSOI_LIQ(4,1603)
    1e+36,   // H2OSOI_LIQ(5,1603)
    0,   // H2OSOI_LIQ(6,1603)
    0,   // H2OSOI_LIQ(7,1603)
    0,   // H2OSOI_LIQ(8,1603)
    0,   // H2OSOI_LIQ(9,1603)
    0,   // H2OSOI_LIQ(10,1603)
    0,   // H2OSOI_LIQ(11,1603)
    0,   // H2OSOI_LIQ(12,1603)
    0,   // H2OSOI_LIQ(13,1603)
    0,   // H2OSOI_LIQ(14,1603)
    0,   // H2OSOI_LIQ(15,1603)
    0,   // H2OSOI_LIQ(16,1603)
    0,   // H2OSOI_LIQ(17,1603)
    0,   // H2OSOI_LIQ(18,1603)
    0,   // H2OSOI_LIQ(19,1603)
    0,  // H2OSOI_LIQ(20,1603)
    1e+36,   // H2OSOI_LIQ(1,1604)
    1e+36,   // H2OSOI_LIQ(2,1604)
    1e+36,   // H2OSOI_LIQ(3,1604)
    1e+36,   // H2OSOI_LIQ(4,1604)
    1e+36,   // H2OSOI_LIQ(5,1604)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>4205</commentid>
    <comment_count>3</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-08-24 14:47:41 -0600</bug_when>
    <thetext>(In reply to comment #2)
&gt; There may be more to it ...  I&apos;m looking at values for H2OSOI_LIQ and sometimes
&gt; the top 5 layers are zero, sometimes spval ... H2OSOI_ICE has the same
&gt; behavior:
&gt; 

Actually, that&apos;s a good point. T_SOISNO physically can&apos;t be zero, so it should be set to spval, but the others can be zero so I thought they should be left alone. But, really the zero is being used to mark them as missing values NOT to a literal value of zero. The other values are also initialized to spval, and then set to something in mkarbinit. So here (in Hydrology2) they should all be set to spval and _FillValue should equal spval on the file.

I also found several places where 1.e36 was hardcoded in rather than using spval...

biogeochem/DryDepVelocity.F90:          crs = 1.e36_r8
biogeochem/DryDepVelocity.F90:                   rgsx(ispec) = 1.e36_r8
biogeochem/DryDepVelocity.F90:                rclx(ispec)=1.e36_r8
biogeochem/DryDepVelocity.F90:                rsmx(ispec)=1.e36_r8
biogeochem/DryDepVelocity.F90:                rlux(ispec)=1.e36_r8
main/clm_varcon.F90:  real(r8), public, parameter ::  spval = 1.e36_r8  ! special value for real data
main/domainMod.F90:    domain%frac     = -1.0e36
main/domainMod.F90:    domain%ntop     = -1.0e36
main/downscaleMod.F90:       !??? MV: Note that frac_l is not set yet - so it is -1.0e36 - so first if will never be
main/mkarbinitMod.F90:     dz(c,-nlevsno+1: 0) = 1.e36_r8
main/mkarbinitMod.F90:     z (c,-nlevsno+1: 0) = 1.e36_r8
main/mkarbinitMod.F90:     zi(c,-nlevsno  :-1) = 1.e36_r8</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>4206</commentid>
    <comment_count>4</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-08-25 13:34:38 -0600</bug_when>
    <thetext>Tim also notes some values where snow isn&apos;t where T_SOISNO is set to a negative value. Presumably, this is because it&apos;s being set to zero, and then there is an operation over it that should be checking SNLSNO that isn&apos;t...

Keith is going to try to find out where this is happening.

&gt; On Aug 25, 2011, at 11:06 AM, Keith Oleson wrote:
&gt;
&gt;&gt; I checked SNLSNO in this file and it is zero for columns 6999-7004, so
&gt;&gt; these values aren&apos;t being used. But I&apos;m not sure why they would be
&gt;&gt; anything other than zero or spval.
&gt;&gt;
&gt;&gt; Keith
&gt;&gt;
&gt;&gt; On 8/25/2011 10:41 AM, Erik Kluzek wrote:
&gt;&gt;&gt; Keith, Dave and Sam
&gt;&gt;&gt;
&gt;&gt;&gt; Tim is finding negative values for T_SOISNO on his 1-degree restart file.
&gt;&gt;&gt; It doesn&apos;t look like it&apos;s something masked out. I&apos;m not sure what to
&gt;&gt;&gt; think
&gt;&gt;&gt; about this as obviously this is unphysical. It also seems to be for a
&gt;&gt;&gt; vegetated land-unit so it has no excuse. I&apos;m guessing this might be
&gt;&gt;&gt; something going for snow that was previously masked out and maybe it
&gt;&gt;&gt; corrects the next time step?
&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; ---------------------------- Original Message
&gt;&gt;&gt; ----------------------------
&gt;&gt;&gt; Subject: Re: CLM t_soisno values in restart files ... not possible
&gt;&gt;&gt; From: &quot;Tim Hoar&quot;&lt;thoar@ucar.edu &lt;mailto:thoar@ucar.edu&gt;&gt;
&gt;&gt;&gt; Date: Wed, August 24, 2011 4:42 pm
&gt;&gt;&gt; To: &quot;Erik Kluzek&quot;&lt;erik@ucar.edu &lt;mailto:erik@ucar.edu&gt;&gt;
&gt;&gt;&gt; --------------------------------------------------------------------------
&gt;&gt;&gt;
&gt;&gt;&gt; /glade/scratch/yfzhang/clmcases/enstest_0818/run/enstest_0818.clm2_0006.r.2000-01-06-00000.nc
&gt;&gt;&gt;
&gt;&gt;&gt; 1, // cols1d_ityplun(6999)
&gt;&gt;&gt; 1, // cols1d_ityplun(7000)
&gt;&gt;&gt; 1, // cols1d_ityplun(7001)
&gt;&gt;&gt; 1, // cols1d_ityplun(7002)
&gt;&gt;&gt; 1, // cols1d_ityplun(7003)
&gt;&gt;&gt; 1, // cols1d_ityplun(7004)
&gt;&gt;&gt;
&gt;&gt;&gt; I believe this is a 1x1 degree case:
&gt;&gt;&gt;
&gt;&gt;&gt; :Initial_conditions_dataset =
&gt;&gt;&gt; &quot;clm_I1850.clm2.r.1853-01-01-00000.nc&quot; ;
&gt;&gt;&gt;
&gt;&gt;&gt; Fei is starting with &quot;1850&quot;-like conditions and we were going to run a
&gt;&gt;&gt; climatological case.
&gt;&gt;&gt;
&gt;&gt;&gt; Thanks - sorry to be a bother -- Tim
&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; On Aug 24, 2011, at 4:00 PM, Erik Kluzek wrote:
&gt;&gt;&gt;
&gt;&gt;&gt;&gt; Tim
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; Can you check what land unit type columns 7000 and 7001 are? Also what
&gt;&gt;&gt;&gt; resolution is this for?
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; On Wed, August 24, 2011 3:45 pm, Tim Hoar wrote:
&gt;&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt;&gt; -0.0218330867655131, // T_SOISNO(3,7000)
&gt;&gt;&gt;&gt;&gt; -0.0220687418285371, // T_SOISNO(4,7000)
&gt;&gt;&gt;&gt;&gt; -0.0457113421978009, // T_SOISNO(5,7000)
&gt;&gt;&gt;&gt;&gt; 264.179362603644, // T_SOISNO(6,7000)
&gt;&gt;&gt;&gt;&gt; 264.909522035041, // T_SOISNO(7,7000)
&gt;&gt;&gt;&gt;&gt; 265.970675455338, // T_SOISNO(8,7000)
&gt;&gt;&gt;&gt;&gt; 267.367414331807, // T_SOISNO(9,7000)
&gt;&gt;&gt;&gt;&gt; 269.072014205821, // T_SOISNO(10,7000)
&gt;&gt;&gt;&gt;&gt; 270.748952573642, // T_SOISNO(11,7000)
&gt;&gt;&gt;&gt;&gt; 272.27801859387, // T_SOISNO(12,7000)
&gt;&gt;&gt;&gt;&gt; 273.521353894311, // T_SOISNO(13,7000)
&gt;&gt;&gt;&gt;&gt; 274.905387882293, // T_SOISNO(14,7000)
&gt;&gt;&gt;&gt;&gt; 276.33954894197, // T_SOISNO(15,7000)
&gt;&gt;&gt;&gt;&gt; 277.15213189024, // T_SOISNO(16,7000)
&gt;&gt;&gt;&gt;&gt; 277.457490832681, // T_SOISNO(17,7000)
&gt;&gt;&gt;&gt;&gt; 276.999992954815, // T_SOISNO(18,7000)
&gt;&gt;&gt;&gt;&gt; 276.661468195319, // T_SOISNO(19,7000)
&gt;&gt;&gt;&gt;&gt; 276.65198613183, // T_SOISNO(20,7000)
&gt;&gt;&gt;&gt;&gt; 0, // T_SOISNO(1,7001)
&gt;&gt;&gt;&gt;&gt; 0, // T_SOISNO(2,7001)
&gt;&gt;&gt;&gt;&gt; 0, // T_SOISNO(3,7001)
&gt;&gt;&gt;&gt;&gt; -0.0694586765806962, // T_SOISNO(4,7001)
&gt;&gt;&gt;&gt;&gt; -0.123480472298186, // T_SOISNO(5,7001)
&gt;&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt;&gt; The units are degrees kelvin ... negative values are not good.
&gt;&gt;&gt;&gt;&gt;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>4208</commentid>
    <comment_count>5</comment_count>
    <who name="Keith Oleson">oleson</who>
    <bug_when>2011-08-25 16:44:35 -0600</bug_when>
    <thetext>I was able to replicate YongFei&apos;s case bfb except that I did not get negative values for T_SOISNO in the restart files.  YongFei now reports that her negative values are probably due to the assimilation procedure.

Regardless, I think that the variables mentioned by Erik below could probably be set to spval instead of zero.  I did a quick test where I set them to spval in Hydrology2 and got bfb answers.  This is very limited testing of course.  Zeros can still appear in the restart file however if the initial file used for the simulation has zeros and the snow layers don&apos;t change state during the simulation.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>4260</commentid>
    <comment_count>6</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-09-21 12:12:20 -0600</bug_when>
    <thetext>I tried setting fill_value=nan for several fields on the restart file that are initialized to nan. This worked except it blew up in DEBUG mode. So I took it back out. So either fields that will be on the restart file need to be initialized to spval, or I need to convert them from nan to spval when writing and from spval to nan when reading. Consistently initializing fields to nan and only changing them to spval for I/O would be a good thing.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>4269</commentid>
    <comment_count>7</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-09-27 12:04:32 -0600</bug_when>
    <thetext>Fields that Tim would like us to especially pay attention to...

Erik, Dave;

As soon as these variables have a _FillValue (?and a missing_value?) attribute, I&apos;m happy to check the range of values to see if there are (perhaps) unanticipated uses of other fill values. I&apos;ll be working on Matlab-based diagnostic scripts, so I will be doing this in parallel to Erik&apos;s effort. 

To all on the &apos;cc&apos; list;

the CLM restart files are easier to ingest into DART if they have a _FillValue specified. If you think you want particular variables to be part of the DART state vector - speak up now. [Andy, Bill - a&apos; priori knowledge of the valid_range might be enough. I don&apos;t think we&apos;re going to get CLM to add  _FillValue and (perhaps) valid_range attributes to the 5kajillion carbon species.]

Here is my list of 11 CLM variables that could use netcdf attributes of &apos;_FillValue&apos;.
Yongfei/Bill/Andy/Ave -- please voice your opinions/add to the high-priority list below:

        double frac_sno(column) ;
                frac_sno:long_name = &quot;fraction of ground covered by snow (0 to 1)&quot; ;
                frac_sno:units =  ;
        double DZSNO(column, levsno) ;
                DZSNO:long_name = &quot;snow layer thickness&quot; ;
                DZSNO:units = &quot;m&quot; ;
        double ZSNO(column, levsno) ;
                ZSNO:long_name = &quot;snow layer depth&quot; ;
                ZSNO:units = &quot;m&quot; ;
        double ZISNO(column, levsno) ;
                ZISNO:long_name = &quot;snow interface depth&quot; ;
                ZISNO:units = &quot;m&quot; ;

        double T_SOISNO(column, levtot) ;
                T_SOISNO:long_name = &quot;soil-snow temperature&quot; ;
                T_SOISNO:units = &quot;K&quot; ;
        double T_LAKE(column, levlak) ;
                T_LAKE:long_name = &quot;lake temperature&quot; ;
                T_LAKE:units = &quot;K&quot; ;

        double H2OSNO(column) ;
                H2OSNO:long_name = &quot;snow water&quot; ;
                H2OSNO:units = &quot;kg/m2&quot; ;
        double H2OSOI_LIQ(column, levtot) ;
                H2OSOI_LIQ:long_name = &quot;liquid water&quot; ;
                H2OSOI_LIQ:units = &quot;kg/m2&quot; ;
        double H2OSOI_ICE(column, levtot) ;
                H2OSOI_ICE:long_name = &quot;ice lens&quot; ;
                H2OSOI_ICE:units = &quot;kg/m2&quot; ;
        double T_GRND(column) ;
                T_GRND:long_name = &quot;ground temperature&quot; ;
                T_GRND:units = &quot;K&quot; ;

        double T_REF2M(pft) ;
                T_REF2M:long_name = &quot;2m height surface air temperature&quot; ;
                T_REF2M:units = &quot;K&quot; ;



Tim Hoar, Associate Scientist
National Center for Atmospheric Research
thoar@ucar.edu
303 497 1708</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>4270</commentid>
    <comment_count>8</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-09-27 12:05:28 -0600</bug_when>
    <thetext>This was marked as fixed and shouldn&apos;t have been...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>4271</commentid>
    <comment_count>9</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-09-27 14:59:16 -0600</bug_when>
    <thetext>Of the fields in the list only: T_SOISNO, H2OSOI_LIQ/ICE are set to spval everything else is set to nan.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>4273</commentid>
    <comment_count>10</comment_count>
    <who name="Tim Hoar">thoar</who>
    <bug_when>2011-09-28 10:55:00 -0600</bug_when>
    <thetext>(In reply to comment #9)
&gt; Of the fields in the list only: T_SOISNO, H2OSOI_LIQ/ICE are set to spval
&gt; everything else is set to nan.

OK then ... I need to be able to replace nan with my DART missing code, ... do what I need to do ...
and then replace the DART missing code with nan to keep things coordinated. How do I read/replace nan  values?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>4379</commentid>
    <comment_count>11</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2012-01-23 10:01:40 -0700</bug_when>
    <thetext>I&apos;m starting to work on this in clm4_0_38. I checked in code to handle it and it works on bluefire, but fails with intel. So I&apos;m going to back it out until I can get a solution that works on all platforms.

I am leaving in an option to ncdio_pio 

cnvrtnan2fill

that will convert any spval read to nan, and convert any nan on write to spval so that FillValue functions correctly.

Here&apos;s the code changes to get back to the previous version. Without the changes below, the convrtnan2fill option is never used.

[yong:lnd/clm/src] erik% svn diff
Index: main/accumulMod.F90
===================================================================
--- main/accumulMod.F90	(revision 33981)
+++ main/accumulMod.F90	(working copy)
@@ -27,7 +27,6 @@
   use abortutils  , only: endrun
   use clm_varctl  , only: iulog
   use nanMod      , only: bigint
-  use shr_infnan_mod, only: shr_infnan_isnan
 !
 ! !PUBLIC TYPES:
   implicit none
@@ -425,7 +424,7 @@
 ! !IROUTINE: update_accum_field_sl
 !
 ! !INTERFACE:
-  subroutine update_accum_field_sl (name, field, nstep, filternan)
+  subroutine update_accum_field_sl (name, field, nstep)
 !
 ! !DESCRIPTION:
 ! Accumulate single level field over specified time interval.
@@ -436,7 +435,6 @@
     character(len=*), intent(in) :: name     !field name
     real(r8), pointer, dimension(:) :: field !field values for current time step
     integer , intent(in) :: nstep            !time step index
-    logical , intent(in), optional :: filternan ! filter out any NaN&apos;s in the input field
 !
 ! !REVISION HISTORY:
 ! Created by Sam Levis
@@ -449,8 +447,6 @@
     integer :: i,k,nf              !indices
     integer :: accper              !temporary accumulation period
     integer :: beg,end             !subgrid beginning,ending indices
-    integer :: filter(sizeof(field)) !filter of 
-    integer :: nfilter             ! number of points to filter
 !------------------------------------------------------------------------
 
     ! find field index. return if &quot;name&quot; is not on list
@@ -475,23 +471,6 @@
        call endrun
     endif
 
-    ! Get filter
-    if ( filternan ) then
-       nfilter = 0
-       do i = beg, end
-          if ( .not. shr_infnan_isnan( field(i) ) )then
-             nfilter         = nfilter + 1
-             filter(nfilter) = i
-          end if
-       end do
-    else
-       nfilter = 0
-       do i = beg, end
-         nfilter         = nfilter + 1
-         filter(nfilter) = i
-       end do
-    end if
-
     ! accumulate field
 
     if (accum(nf)%acctype /= &apos;timeavg&apos; .AND. &amp;
@@ -515,11 +494,11 @@
        !normalize at end of accumulation period
 
        if ((mod(nstep,accum(nf)%period) == 1) .and. (nstep /= 0)) then
-          accum(nf)%val(filter(:nfilter),1) = 0._r8
+          accum(nf)%val(beg:end,1) = 0._r8
        end if
-       accum(nf)%val(filter(:nfilter),1) =  accum(nf)%val(filter(:nfilter),1) + field(filter(:nfilter))
+       accum(nf)%val(beg:end,1) =  accum(nf)%val(beg:end,1) + field(beg:end)
        if (mod(nstep,accum(nf)%period) == 0) then
-          accum(nf)%val(filter(:nfilter),1) = accum(nf)%val(filter(:nfilter),1) / accum(nf)%period
+          accum(nf)%val(beg:end,1) = accum(nf)%val(beg:end,1) / accum(nf)%period
        endif
 
     else if (accum(nf)%acctype == &apos;runmean&apos;) then
@@ -527,19 +506,18 @@
        !running mean - reset accumulation period until greater than nstep
 
        accper = min (nstep,accum(nf)%period)
-       accum(nf)%val(filter(:nfilter),1) = ((accper-1)*accum(nf)%val(filter(:nfilter),1) + field(filter(:nfilter))) / accper
+       accum(nf)%val(beg:end,1) = ((accper-1)*accum(nf)%val(beg:end,1) + field(beg:end)) / accper
 
     else if (accum(nf)%acctype == &apos;runaccum&apos;) then
 
        !running accumulation field reset at trigger -99999
 
-       do i = 1, nfilter
-          k = filter(i)
+       do k = beg,end
           if (nint(field(k)) == -99999) then
              accum(nf)%val(k,1) = 0._r8
           end if
        end do
-       accum(nf)%val(filter(:nfilter),1) = min(max(accum(nf)%val(filter(:nfilter),1) + field(filter(:nfilter)), 0._r8), 99999._r8)
+       accum(nf)%val(beg:end,1) = min(max(accum(nf)%val(beg:end,1) + field(beg:end), 0._r8), 99999._r8)
 
     end if
 
Index: main/accFldsMod.F90
===================================================================
--- main/accFldsMod.F90	(revision 33981)
+++ main/accFldsMod.F90	(working copy)
@@ -578,9 +578,9 @@
     do p = begp,endp
        rbufslp(p) = fsun(p)
     end do
-    call update_accum_field  (&apos;FSUN24&apos;, rbufslp, nstep,  filternan=.true.)
-    call extract_accum_field (&apos;FSUN24&apos;, fsun24, nstep )
-    call update_accum_field  (&apos;FSUN240&apos;, rbufslp, nstep, filternan=.true.)
+    call update_accum_field  (&apos;FSUN24&apos;, rbufslp, nstep)
+    call extract_accum_field (&apos;FSUN24&apos;, fsun24, nstep)
+    call update_accum_field  (&apos;FSUN240&apos;, rbufslp, nstep)
     call extract_accum_field (&apos;FSUN240&apos;, fsun240, nstep)
 
     ! Accumulate and extract elai_p (heald 04/06)
Index: biogeophys/BiogeophysRestMod.F90
===================================================================
--- biogeophys/BiogeophysRestMod.F90	(revision 33981)
+++ biogeophys/BiogeophysRestMod.F90	(working copy)
@@ -59,6 +59,7 @@
     use initSurfAlbMod  , only : do_initsurfalb
     use clm_time_manager, only : is_first_step
     use SNICARMod       , only : snw_rds_min
+    use shr_infnan_mod  , only : shr_infnan_isnan
     use mkarbinitMod    , only : perturbIC
     use clm_time_manager, only : is_restart
 !
@@ -345,12 +346,12 @@
 
     if (flag == &apos;define&apos;) then
        call ncd_defvar(ncid=ncid, varname=&apos;frac_sno&apos;, xtype=ncd_double,  &amp;
-            dim1name=&apos;column&apos;, fill_value=spval, &amp;
+            dim1name=&apos;column&apos;,&amp;
             long_name=&apos;fraction of ground covered by snow (0 to 1)&apos;,units=&apos;unitless&apos;)
     else if (flag == &apos;read&apos; .or. flag == &apos;write&apos;) then
        call ncd_io(varname=&apos;frac_sno&apos;, data=cptr%cps%frac_sno, &amp;
             dim1name=namec, &amp;
-            ncid=ncid, flag=flag, readvar=readvar, cnvrtnan2fill=.true.) 
+            ncid=ncid, flag=flag, readvar=readvar) 
        if (flag == &apos;read&apos; .and. .not. readvar) then
           if (is_restart()) call endrun()
        end if
@@ -361,14 +362,14 @@
     if (flag == &apos;define&apos;) then
        call ncd_defvar(ncid=ncid, varname=&apos;DZSNO&apos;, xtype=ncd_double,  &amp;
             dim1name=&apos;column&apos;, dim2name=&apos;levsno&apos;, switchdim=.true., &amp;
-            long_name=&apos;snow layer thickness&apos;, units=&apos;m&apos;, fill_value=spval)
+            long_name=&apos;snow layer thickness&apos;, units=&apos;m&apos;)
     else if (flag == &apos;read&apos; .or. flag == &apos;write&apos;) then
        allocate(temp2d(begc:endc,-nlevsno+1:0))
        if (flag == &apos;write&apos;) then 
           temp2d(begc:endc,-nlevsno+1:0) = cptr%cps%dz(begc:endc,-nlevsno+1:0)
        end if
        call ncd_io(varname=&apos;DZSNO&apos;, data=temp2d, &amp;
-            dim1name=namec, switchdim=.true., cnvrtnan2fill=.true., &amp;
+            dim1name=namec, switchdim=.true., &amp;
             lowerb2=-nlevsno+1, upperb2=0, ncid=ncid, flag=flag, readvar=readvar)
        if (flag == &apos;read&apos; .and. .not. readvar) then
           if (is_restart()) call endrun()
@@ -384,14 +385,14 @@
     if (flag == &apos;define&apos;) then
        call ncd_defvar(ncid=ncid, varname=&apos;ZSNO&apos;, xtype=ncd_double,  &amp;
             dim1name=&apos;column&apos;, dim2name=&apos;levsno&apos;, switchdim=.true., &amp;
-            long_name=&apos;snow layer depth&apos;, units=&apos;m&apos;, fill_value=spval)
+            long_name=&apos;snow layer depth&apos;, units=&apos;m&apos;)
     else if (flag == &apos;read&apos; .or. flag == &apos;write&apos;) then
        allocate(temp2d(begc:endc,-nlevsno+1:0))
        if (flag == &apos;write&apos;) then 
           temp2d(begc:endc,-nlevsno+1:0) = cptr%cps%z(begc:endc,-nlevsno+1:0)
        end if
        call ncd_io(varname=&apos;ZSNO&apos;, data=temp2d, &amp;
-            dim1name=namec, switchdim=.true., cnvrtnan2fill=.true., &amp;
+            dim1name=namec, switchdim=.true., &amp;
             lowerb2=-nlevsno+1, upperb2=0, ncid=ncid, flag=flag, readvar=readvar)
        if (flag == &apos;read&apos; .and. .not. readvar) then
           if (is_restart()) call endrun()
@@ -407,14 +408,14 @@
     if (flag == &apos;define&apos;) then
        call ncd_defvar(ncid=ncid, varname=&apos;ZISNO&apos;, xtype=ncd_double,  &amp;
             dim1name=&apos;column&apos;, dim2name=&apos;levsno&apos;, switchdim=.true., &amp;
-            long_name=&apos;snow interface depth&apos;, units=&apos;m&apos;, fill_value=spval)
+            long_name=&apos;snow interface depth&apos;, units=&apos;m&apos;)
     else if (flag == &apos;read&apos; .or. flag == &apos;write&apos;) then
        allocate(temp2d(begc:endc,-nlevsno:-1))
        if (flag == &apos;write&apos;) then 
           temp2d(begc:endc,-nlevsno:-1) = cptr%cps%zi(begc:endc,-nlevsno:-1)
        end if
        call ncd_io(varname=&apos;ZISNO&apos;, data=temp2d, &amp;
-            dim1name=namec, switchdim=.true., cnvrtnan2fill=.true., &amp;
+            dim1name=namec, switchdim=.true., &amp;
             lowerb2=-nlevsno, upperb2=-1, ncid=ncid, flag=flag, readvar=readvar)
        if (flag == &apos;read&apos; .and. .not. readvar) then
           if (is_restart()) call endrun()
@@ -928,13 +929,13 @@
     if (flag == &apos;define&apos;) then
        call ncd_defvar(ncid=ncid, varname=&apos;H2OSOI_LIQ&apos;, xtype=ncd_double,  &amp;
             dim1name=&apos;column&apos;, dim2name=&apos;levtot&apos;, switchdim=.true., &amp;
-            long_name=&apos;liquid water&apos;, units=&apos;kg/m2&apos;, fill_value=spval)
+            long_name=&apos;liquid water&apos;, units=&apos;kg/m2&apos;)
     else if (flag == &apos;read&apos; .or. flag == &apos;write&apos;) then
        call ncd_io(varname=&apos;H2OSOI_LIQ&apos;, data=cptr%cws%h2osoi_liq, &amp;
-           dim1name=namec, switchdim=.true., ncid=ncid, flag=flag, readvar=readvar)
-      if (flag==&apos;read&apos; .and. .not. readvar) then
-         if (is_restart()) call endrun()
-      end if
+            dim1name=namec, switchdim=.true., ncid=ncid, flag=flag, readvar=readvar)
+       if (flag==&apos;read&apos; .and. .not. readvar) then
+          if (is_restart()) call endrun()
+       end if
     end if
 
     ! column water state variable - h2osoi_ice
@@ -942,8 +943,7 @@
     if (flag == &apos;define&apos;) then
        call ncd_defvar(ncid=ncid, varname=&apos;H2OSOI_ICE&apos;, xtype=ncd_double,   &amp;
             dim1name=&apos;column&apos;, dim2name=&apos;levtot&apos;, switchdim=.true., &amp;
-            long_name=&apos;ice lens&apos;, units=&apos;kg/m2&apos;, fill_value=spval)
-
+            long_name=&apos;ice lens&apos;, units=&apos;kg/m2&apos;)
     else if (flag == &apos;read&apos; .or. flag == &apos;write&apos;) then
        call ncd_io(varname=&apos;H2OSOI_ICE&apos;, data=cptr%cws%h2osoi_ice, &amp;
             dim1name=namec, switchdim=.true., ncid=ncid, flag=flag, readvar=readvar)
@@ -956,7 +956,7 @@
 
     if (flag == &apos;define&apos;) then
        call ncd_defvar(ncid=ncid, varname=&apos;T_GRND&apos;, xtype=ncd_double,  &amp;
-            dim1name=&apos;column&apos;, fill_value=spval, &amp;
+            dim1name=&apos;column&apos;, &amp;
             long_name=&apos;ground temperature&apos;, units=&apos;K&apos;)
     else if (flag == &apos;read&apos; .or. flag == &apos;write&apos;) then
        call ncd_io(varname=&apos;T_GRND&apos;, data=cptr%ces%t_grnd, &amp;
@@ -1242,7 +1242,7 @@
     if (flag == &apos;define&apos;) then
        call ncd_defvar(ncid=ncid, varname=&apos;T_SOISNO&apos;, xtype=ncd_double,   &amp;
             dim1name=&apos;column&apos;, dim2name=&apos;levtot&apos;, switchdim=.true., &amp;
-            long_name=&apos;soil-snow temperature&apos;, units=&apos;K&apos;, fill_value=spval)
+            long_name=&apos;soil-snow temperature&apos;, units=&apos;K&apos;)
     else if (flag == &apos;read&apos; .or. flag == &apos;write&apos;) then
        call ncd_io(varname=&apos;T_SOISNO&apos;, data=cptr%ces%t_soisno, &amp;
             dim1name=namec, switchdim=.true., ncid=ncid, flag=flag, readvar=readvar)
@@ -1256,7 +1256,7 @@
     if (flag == &apos;define&apos;) then
        call ncd_defvar(ncid=ncid, varname=&apos;T_LAKE&apos;, xtype=ncd_double,  &amp;
             dim1name=&apos;column&apos;, dim2name=&apos;levlak&apos;, switchdim=.true., &amp;
-            long_name=&apos;lake temperature&apos;, units=&apos;K&apos;, fill_value=spval)
+            long_name=&apos;lake temperature&apos;, units=&apos;K&apos;)
     else if (flag == &apos;read&apos; .or. flag == &apos;write&apos;) then
        call ncd_io(varname=&apos;T_LAKE&apos;, data=cptr%ces%t_lake, &amp;
             dim1name=namec, switchdim=.true., ncid=ncid, flag=flag, readvar=readvar)
@@ -1372,15 +1372,21 @@
 
     if (flag == &apos;define&apos;) then
        call ncd_defvar(ncid=ncid, varname=&apos;fsun&apos;, xtype=ncd_double,  &amp;
-            dim1name=&apos;pft&apos;, fill_value=spval, &amp;
+            dim1name=&apos;pft&apos;, &amp;
             long_name=&apos;sunlit fraction of canopy&apos;, units=&apos;&apos;)
     else if (flag == &apos;read&apos; .or. flag == &apos;write&apos;) then
        call ncd_io(varname=&apos;fsun&apos;, data=pptr%pps%fsun, &amp;
             dim1name=namep, &amp;
-            ncid=ncid, flag=flag, readvar=readvar, cnvrtnan2fill=.true. )
+            ncid=ncid, flag=flag, readvar=readvar)
        if (flag==&apos;read&apos; )then
           if ( .not. readvar) then
              if (is_restart()) call endrun()
+          else
+             do p = begp, endp
+                if ( shr_infnan_isnan( pptr%pps%fsun(p) ) )then
+                   pptr%pps%fsun(p) = spval
+                end if
+             end do
           end if
        end if
     end if
@@ -1505,7 +1511,7 @@
     varname = &apos;T_REF2M&apos;
     if (flag == &apos;define&apos;) then
        call ncd_defvar(ncid=ncid, varname=varname, xtype=ncd_double,  &amp;
-            dim1name=&apos;pft&apos;, fill_value=spval, &amp;
+            dim1name=&apos;pft&apos;, &amp;
             long_name=&apos;2m height surface air temperature&apos;, units=&apos;K&apos;)
     else if (flag == &apos;read&apos; .or. flag == &apos;write&apos;) then
        call ncd_io(varname=varname, data=pptr%pes%t_ref2m, &amp;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>4380</commentid>
    <comment_count>12</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2012-01-23 10:16:03 -0700</bug_when>
    <thetext>Here&apos;s the error on mirage...

  
(seq_mct_drv) : Model initialization complete 
  
forrtl: severe (174): SIGSEGV, segmentation fault occurred
Image              PC                Routine            Line        Source             
clm                00000000009B3391  accumulmod_mp_upd         479  accumulMod.F90
clm                00000000009A5F4A  accfldsmod_mp_upd         473  accFldsMod.F90
clm                000000000053FBE0  clm_driver_mp_clm         756  clm_driver.F90
clm                00000000004F1EDF  lnd_comp_mct_mp_l         698  lnd_comp_mct.F90
clm                0000000000422B00  ccsm_comp_mod_mp_        2521  ccsm_comp_mod.F90
clm                000000000042F078  MAIN__                     91  ccsm_driver.F90
clm                0000000000403A82  Unknown               Unknown  Unknown
libc.so.6          0000003DB781D994  Unknown               Unknown  Unknown
clm                00000000004039A9  Unknown               Unknown  Unknown


This is the update of TREVAV, in assessing accum(nf)%acctype...


    if (accum(nf)%acctype /= &apos;timeavg&apos; .AND. &amp;
        accum(nf)%acctype /= &apos;runmean&apos; .AND. &amp;
        accum(nf)%acctype /= &apos;runaccum&apos;) then
       write(iulog,*) &apos;UPDATE_ACCUM_FIELD_SL error: incorrect accumulation type&apos;
       write(iulog,*) &apos; was specified for field &apos;,name
       write(iulog,*)&apos; accumulation type specified is &apos;,accum(nf)%acctype
       write(iulog,*)&apos; only [timeavg, runmean, runaccum] are currently acceptable&apos;
       call endrun()
    end if</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1398</bug_id>
          
          <creation_ts>2011-08-22 21:31:00 -0600</creation_ts>
          <short_desc>[CLM-only] clm and mksurfdata_map needs to check map files for consistency</short_desc>
          <delta_ts>2016-05-05 14:26:44 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          <blocked>1468</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>bugzillaMuszala</cc>
    
    <cc>mvertens</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>4198</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-08-22 21:31:26 -0600</bug_when>
    <thetext>In running the test suite on the non2dgrid branch, I found a fine-mesh test that failed because it was using a RTM mapping file at the atm grid rather than the lnd grid as it should have. It dies with a subscript overflow.


021 smEH1 TSM.sh 4p_vodsrsc_dh clm_std^nl_urb 20021231:3600 1.9x2.5^0.9x1.25 gx1v6 48 arb_ic ....FAIL! rc= 10


 3:    Fortran language trap: subscript out of bounds
   3:
   3:  Traceback:
   5:    Fortran language trap: subscript out of bounds
   5:
   5:  Traceback:
   3:    Offset 0x000020b8 in procedure __m_attrvectcomms_NMOD_gm_scatter_, near line 1050 in file /fis/cgd/home/erik/cl
m_non2dgrid/models/utils/mct/mct/m_AttrVectComms.F90
   5:    Offset 0x000020b8 in procedure __m_attrvectcomms_NMOD_gm_scatter_, near line 1050 in file /fis/cgd/home/erik/cl
m_non2dgrid/models/utils/mct/mct/m_AttrVectComms.F90
   3:    Offset 0x00003d7c in procedure __m_attrvectcomms_NMOD_gsm_scatter_, near line 1452 in file /fis/cgd/home/erik/c
lm_non2dgrid/models/utils/mct/mct/m_AttrVectComms.F90
   5:    Offset 0x00003d7c in procedure __m_attrvectcomms_NMOD_gsm_scatter_, near line 1452 in file /fis/cgd/home/erik/c
lm_non2dgrid/models/utils/mct/mct/m_AttrVectComms.F90
   3:    Offset 0x00000438 in procedure __m_sparsematrixcomms_NMOD_scatterbyrowgsmap_, near line 338 in file /fis/cgd/ho
me/erik/clm_non2dgrid/models/utils/mct/mct/m_SparseMatrixComms.F90
   5:    Offset 0x00000438 in procedure __m_sparsematrixcomms_NMOD_scatterbyrowgsmap_, near line 338 in file /fis/cgd/ho
me/erik/clm_non2dgrid/models/utils/mct/mct/m_SparseMatrixComms.F90
   3:    Offset 0x00000be4 in procedure __m_sparsematrixplus_NMOD_initfromroot_, near line 344 in file /fis/cgd/home/eri
k/clm_non2dgrid/models/utils/mct/mct/m_SparseMatrixPlus.F90
   5:    Offset 0x00000be4 in procedure __m_sparsematrixplus_NMOD_initfromroot_, near line 344 in file /fis/cgd/home/eri
k/clm_non2dgrid/models/utils/mct/mct/m_SparseMatrixPlus.F90
   3:    Offset 0x00013b80 in procedure __rtmmod_NMOD_rtmini, near line 968 in file /fis/cgd/home/erik/clm_non2dgrid/mod
els/lnd/clm/src/riverroute/RtmMod.F90
   5:    Offset 0x00013b80 in procedure __rtmmod_NMOD_rtmini, near line 968 in file /fis/cgd/home/erik/clm_non2dgrid/mod


The bad thing is that the Open-MP only case actually runs, without an obvious error...

001 smEH3 TSM.sh 4p_vodsrsc_do clm_std^nl_urb 20021231:3600 1.9x2.5^0.9x1.25 gx1v6 48 arb_ic ....PASS


So the point is that we need to have some consistency checking for the mapping files in CLM. The same kind of consistency checking should be put into mksurfdata_map as well.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>4199</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-08-23 10:48:50 -0600</bug_when>
    <thetext>OK so running with the proper lnd_res file works...

001 smEH1 TSM.sh 4p_vodsrsc_dh clm_std^nl_urb 20021231:3600 1.9x2.5^0.9x1.25 gx1v6 48 arb_ic ....PASS</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1397</bug_id>
          
          <creation_ts>2011-08-22 13:49:00 -0600</creation_ts>
          <short_desc>c2l_scale_type not specified for many history fields</short_desc>
          <delta_ts>2016-05-05 14:24:19 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P4</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Bill Sacks">sacks</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>oleson</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>4196</commentid>
    <comment_count>0</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2011-08-22 13:49:04 -0600</bug_when>
    <thetext>Many history fields do not have a c2l_scale_type parameter (in histFldsMod), but it seems they should. For example, there is a set of water flux variables, starting with QFLX_RAIN_GRND and ending with QFLX_DEW_SNOW, most of which do not have a c2l_scale_type. From talking with Keith Oleson, it seems that at least some and maybe all of these should have c2l_scale_type=&apos;urbanf&apos;, by analogy with similar fluxes that do have a c2l_scale_type specified.

From talking with Keith Oleson: it sounds like most fluxes should have c2l_scale_type=&apos;urbanf&apos;, but this isn&apos;t necessarily always true. So this will require more investigation to determine the appropriate scale type for each history field. 

Most (all?) of the fields that do not have a c2l_scale_type are ones that were added after the urban model came in - for example, fields that were added when the CN code came in. So my guess is that whoever added these fields didn&apos;t realize that a c2l_scale_type was required.

After these fields are fixed, perhaps scale_type_c2l should be made a required argument to hist_addfld1d and hist_addfld2d to prevent this problem from arising again in the future.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1388</bug_id>
          
          <creation_ts>2011-08-09 12:12:00 -0600</creation_ts>
          <short_desc>[CLM-only] Rework mksurfdata.pl to have a build-namelist like the main CLM build-namelist</short_desc>
          <delta_ts>2016-05-05 14:21:20 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>bugzillaMuszala</cc>
    
    <cc>mvertens</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>4162</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-08-09 12:12:11 -0600</bug_when>
    <thetext>The complexity of the mksurfdata_map tool is so complex it needs a robust build-namelist tool to manage it. It should be reworked so that mksurfdata.pl uses the tool externally (instead of queryNamelist.pl). The namelist generation would be better and could be used outside of mksurfdata.pl.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>4291</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-10-26 10:09:43 -0600</bug_when>
    <thetext>Add mariana to this bug.

Also need to have the ability to create a set of mapping files and immediately be able to run mksurfdata.pl using them. This might mean having a script to update the XML files with the mapping files, or something. Not quite sure.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>4293</commentid>
    <comment_count>2</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-10-26 10:38:42 -0600</bug_when>
    <thetext>Talking to Mariana we thought we need an option for unusual grids. Where you want to just explore a grid as quickly as possible without having to put files into the XML database. In this case mksurfdata.pl could have an option to run mkmapdata.sh leave the files in place and simply point to them when creating the namelist. The naming convention then needs to be updated to be consistent between the two.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>4295</commentid>
    <comment_count>3</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-10-28 11:43:59 -0600</bug_when>
    <thetext>Mariana would like the following optional tool creation process...


Erik -  I would like to implement a tool chain in clm - that does the following 

    0) given a model domain atm SCRIP grid file (unit mask) and a model domain ocn SCRIP grid file
    1) creates the necessary mapping files on the fly for generating the surface dataset using (0)
    2) creates the surface dataset using (1)
    3) creates the map file for ocn-&gt;atm (including a unit mapping if needed)
    4) creates the ocn and land domain files using (1)    

The above should not require adding any changes to the clm xml files.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1381</bug_id>
          
          <creation_ts>2011-07-27 14:46:00 -0600</creation_ts>
          <short_desc>[CLM-only] Can&apos;t change monthly average files to NOT be one per month</short_desc>
          <delta_ts>2016-09-15 13:06:35 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>REOPENED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>anthony.p.craig</cc>
    
    <cc>dlawren</cc>
    
    <cc>oleson</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
    
    <cc>swensosc</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>4145</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-07-27 14:46:16 -0600</bug_when>
    <thetext>Hanna and Sean found that if you do the following...

hist_mfilt = 12
hist_nhtfrq = 0

instead of getting 12 monthly time-samples on a yearly file -- you get a file per month. It would be nice to get what you ask for in this case. I also have examples of doing this sort of thing in the User&apos;s Guide so people will be led astray by the examples.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>4146</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-07-28 10:43:07 -0600</bug_when>
    <thetext>Looks like the issue is this piece of code in histFileMod.F90...

[yong:clm/src/main] erik% svn diff histFileMod.F90 
Index: histFileMod.F90
===================================================================
--- histFileMod.F90	(revision 29486)
+++ histFileMod.F90	(working copy)
@@ -522,7 +522,6 @@
        tape(t)%begtime = day + sec/secspday
        tape(t)%dov2xy = hist_dov2xy(t)
        tape(t)%nhtfrq = hist_nhtfrq(t)
-       if (hist_nhtfrq(t) == 0) hist_mfilt(t) = 1
        tape(t)%mfilt = hist_mfilt(t)
        if (hist_ndens(t) == 1) then
           tape(t)%ncprec = ncd_double


Although if you do the above, the filenames for monthly frequencies will still have year-month, even if they are a years worth of files or something. I suppose there&apos;s no way around that though...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>4147</commentid>
    <comment_count>2</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-07-28 11:44:55 -0600</bug_when>
    <thetext>At issue is the CESM filename conventions which say a file of

YYYY-MM.nc

is a monthly average.

http://www.cesm.ucar.edu/models/cesm1.0/filename_conventions_cesm.html

So possibly the monthly filenames should be in the above form ONLY if mfilt=1, AND nhtfrq=0.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>4184</commentid>
    <comment_count>3</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-08-18 13:41:28 -0600</bug_when>
    <thetext>Fixed in clm4_0_34</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>4793</commentid>
    <comment_count>4</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2012-11-16 13:46:58 -0700</bug_when>
    <thetext>This is still a problem because of the following line in controlMod.F90

          if (hist_nhtfrq(i) == 0) then
             hist_mfilt(i) = 1

that is done AFTER the namelist is read. The above would be fine if it was done BEFORE the namelist was read.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7688</commentid>
    <comment_count>5</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2016-09-15 13:06:35 -0600</bug_when>
    <thetext>This issue is both in the cesm1.2.2 release and in the latest development version clm4_5_12_r194.

Here&apos;s the fix we decided on at this morning&apos;s CLM-CMT meeting.

We also wanted to make sure that the special names given to monthly filenames is ONLY for files that contain a single month (and it already has that).

Index: controlMod.F90
===================================================================
--- controlMod.F90	(revision 80463)
+++ controlMod.F90	(working copy)
@@ -312,9 +312,7 @@
        ! History and restart files
 
        do i = 1, max_tapes
-          if (hist_nhtfrq(i) == 0) then
-             hist_mfilt(i) = 1
-          else if (hist_nhtfrq(i) &lt; 0) then
+          if (hist_nhtfrq(i) &lt; 0) then
              hist_nhtfrq(i) = nint(-hist_nhtfrq(i)*SHR_CONST_CDAY/(24._r8*dtime))
           endif
        end do
Index: histFileMod.F90
===================================================================
--- histFileMod.F90	(revision 80463)
+++ histFileMod.F90	(working copy)
@@ -59,7 +59,7 @@
   integer, public :: &amp;
        hist_ndens(max_tapes) = 2         ! namelist: output density of netcdf history files
   integer, public :: &amp;
-       hist_mfilt(max_tapes) = 30        ! namelist: number of time samples per tape
+       hist_mfilt(max_tapes) = (/ 1, (30, ni=2, max_tapes/)        ! namelist: number of time samples per tape
   logical, public :: &amp;
        hist_dov2xy(max_tapes) = (/.true.,(.true.,ni=2,max_tapes)/) ! namelist: true=&gt; do grid averaging
   integer, public :: &amp;</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1375</bug_id>
          
          <creation_ts>2011-07-08 20:12:00 -0600</creation_ts>
          <short_desc>PTCLM needs ability to set organic, topo, and VOC emission factors</short_desc>
          <delta_ts>2016-05-05 14:19:55 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P5</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>4122</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-07-08 20:12:33 -0600</bug_when>
    <thetext>With the non-2D grid branch comes the complexity of needing mapping datasets for each input dataset. In order to side-step this for single-point mode and PTCLM, we need to add the ability to set the organic soil carbon amount, the topographic height and the VOC emission factors.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7460</commentid>
    <comment_count>1</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-04-25 14:53:23 -0600</bug_when>
    <thetext>Without this capability, you use what comes from the gridded data, there just isn&apos;t a way to override it easily</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1362</bug_id>
          
          <creation_ts>2011-06-14 15:48:00 -0600</creation_ts>
          <short_desc>[CLM-only] Set dynamic land-use change dataset for PTCLM for US-UMB</short_desc>
          <delta_ts>2016-04-25 14:50:15 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P4</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>CLM5</target_milestone>
          <dependson>1368</dependson>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>4081</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-06-14 15:48:58 -0600</bug_when>
    <thetext>So that I&apos;m testing PTCLM with transient land-use change datasets, I need to set one up for the US-UMB site (or gin up a test site for this). If I read the AmerFlux data on US-UMB correctly they had two harvest times in 1998 and 1999. I think the forest type stays the same, but they cut some trees down during these two dates. So the PFT dynamic file could be used to describe this.

LIT_PROD	gC/m2(ground)/y		145	175/1999	06/24/1999
LIT_PROD	gC/m2(ground)/y		149.4	175/1999	06/24/1999
LIT_PROD	gC/m2(ground)/y		149.9	175/1999	06/24/1999
LIT_PROD	gC/m2(ground)/y		151.6	175/1999	06/24/1999
LIT_PROD	gC/m2(ground)/y		151.9	175/1999	06/24/1999
LIT_PROD	gC/m2(ground)/y		143.3	201/1998	07/20/1998
LIT_PROD	gC/m2(ground)/y		153.4	201/1998	07/20/1998
LIT_PROD	gC/m2(ground)/y		158.9	201/1998	07/20/1998
LIT_PROD	gC/m2(ground)/y		180.6	201/1998	07/20/1998</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1361</bug_id>
          
          <creation_ts>2011-06-13 14:56:00 -0600</creation_ts>
          <short_desc>[CLM-only] Problem with transient compsets for PTCLM</short_desc>
          <delta_ts>2016-04-25 14:49:21 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>4080</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-06-13 14:56:59 -0600</bug_when>
    <thetext>When PTCLM is setup for a transient compset that has a _dynpftdata.txt file that goes with it, it gives the wrong syntax for calling the NCL conversion program for it.

To get this to work make the following changes...

Index: PTCLM.py
===================================================================
--- PTCLM.py	(revision 28836)
+++ PTCLM.py	(working copy)
@@ -717,9 +717,10 @@
                if plev&gt;0: print &quot;Transition PFT file exists, so using it for changes in PFT&quot;
                # Convert the file from transition years format to mksurfdata pftdyn format
                cnv = ptclm_dir + \
-                     &quot;/PTCLM_sitedata/cnvrt_trnsyrs2_pftdyntxtfile.pl &quot;+sim_year_range
+                     &quot;/PTCLM_sitedata/cnvrt_trnsyrs2_pftdyntxtfile.pl &quot; + \
+                     pftdyn_site_filename+&quot; &quot;+sim_year_range
                pftdynoutfile = mycase+&quot;/pftdyn_&quot;+mycasename+&quot;.txt&quot;
-               system( cnv+pftdyn_site_filename+&quot; &gt; &quot;+pftdynoutfile )
+               system( cnv+&quot; &gt; &quot;+pftdynoutfile )
                dynpftopts = &quot; -dynpft &quot;+pftdynoutfile
             else:
                if plev&gt;0: print &quot;Transition PFT file did NOT exist, so proceeding with constant PFT&quot;</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1310</bug_id>
          
          <creation_ts>2011-03-31 10:24:00 -0600</creation_ts>
          <short_desc>Restart files are different for CLM when run over different number of tasks</short_desc>
          <delta_ts>2017-03-21 10:27:00 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>dlawren</cc>
    
    <cc>jedwards</cc>
    
    <cc>jshollen</cc>
    
    <cc>mvertens</cc>
    
    <cc>oleson</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>3863</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-03-31 10:24:06 -0600</bug_when>
    <thetext>This is from Bill Sacks...

With Mariana&apos;s help, I believe I have uncovered a minor bug in the urban model; this came up while testing the new CLM multi-instance code that I have been working on. This appears as a difference in the lnd restart files depending on the number of processors. It&apos;s possible that this is unimportant, but I thought I&apos;d let you know anyway.

In particular, the two variables albgrd and albgri differ in some urban landunits in the CLM restart files. I have confirmed this with the latest clm tag (clm4_0_26), doing a 5-day run with resolution f19_g16, and comparing results using 64 vs. 16 tasks for the land model. You can see the output of cprnc in /ptmp/sacks/archive/clm4_0_26.init.quarterPEs/rest/0001-01-06-00000/cprnc.out


I believe that what is going on is the following: 

(1) In UrbanMod.F90: UrbanAlbedo: A count is made of the number of urban landunits with coszen &gt; 0 (num_solar); note that this count is just of the number of landunits that this processor is responsible for; thus, this is where the # PE-dependence comes in, I think.

(2) Later in that subroutine, a bunch of calculations are done if num_solar &gt; 0 -- i.e., if this PE is responsible for at least one urban landunit with coszen &gt; 0. Note that many of these calculations are done for all landunits, even ones for which coszen = 0. This introduces the possibility for different results depending on the decomposition.

(3) The particular difference that I am seeing is in albgrd &amp; albgri. These are initialized to 0 at the start of the subroutine, and so remain 0 on any PE for which num_solar = 0. However, for PEs with num_solar &gt; 0, landunits that have coszen = 0 end up getting albgrd = albgri = 1. This is because the calculation of albgrd &amp; albgri depends on the values of the sref_* variables, which are initialized to 1 (and stay at 1 for any landunit for which coszen = 0).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>3864</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-03-31 10:24:42 -0600</bug_when>
    <thetext>Also indices seem to change...

Another bug in the CLM restart files came up in my discussion with Mariana, and she asked that I pass this along to you. It seems that the indices, like pfts1d_li, etc., in the clm restart files depend on the decomposition, and are possibly incorrect.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>3867</commentid>
    <comment_count>2</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-04-01 10:44:04 -0600</bug_when>
    <thetext>I got a confirmation of this problem for a test I ran on the crop branch where I see the following differences...

034 erL83 TER.sh _nrsc_do clm_std^nl_urb 20020115:3600 5x5_amazon navy -5+-5 arb_ic .............FAIL! rc= 13

Everything&apos;s bit-for-bit up to...

CLM_compare.sh: comparing clmrun.clm2.h1.2002-01-20-00000.nc
                with      /ptmp/erik/test-driver.888958/TSM._nrsc_do.clm_std^nl_urb.20020115:3600.5x5_amazon.navy.-10.arb_ic/clmrun.clm2.h1.2002
-01-20-00000.nc
CLM_compare.sh: files are NOT b4b

 RMS land1d_g         7
 RMS cols1d_g         7
 RMS cols1d_l         8
 RMS pfts1d_g         7
 RMS pfts1d_l         8
 RMS pfts1d_c        12

and the same pattern to the last h1 file on 2002-01-25.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>3869</commentid>
    <comment_count>3</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-04-01 10:50:22 -0600</bug_when>
    <thetext>In talking about this with Mariana, she thought we should probably comment out
the writing of the indices -- as they are just wrong. I think they&apos;ve been
wrong for a long while as well. She couldn&apos;t use them in interpinic in her
recent work and I remember having the same problem working on it a long time
ago as well.

She also wondered if the albedo difference would be a problem if you used a
restart file with a different start date (so that you might have points where
the sun is in a different position).

She did agree that we don&apos;t want to compare restart files in practice -- we
want to maintain the integrity of the history files. But, she does want to
pursue this issue a bit further to make sure we understand it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>3870</commentid>
    <comment_count>4</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-04-01 11:17:02 -0600</bug_when>
    <thetext>I&apos;m seeing the same problem for the following tests on the crop branch on bluefire...

002 erA91 TER.sh _sc_dh clm_std^nl_urb 20030101:3600 4x5 gx3v7 -3+-3 arb_ic .....................FAIL! rc= 13
051 erH52 TER.sh 17p_cnsc_dm clm_std^nl_urb 20020115:1800 10x15 USGS@2000 10+38 cold ............FAIL! rc= 13
072 erJ61 TER.sh 4p_casasc_dh clm_std^nl_urb 20021230:1800 1.9x2.5 gx1v6 10+38 cold .............FAIL! rc= 13

the differences are all in the indices again. This must be something that shows up in a very recent version of clm. This problem would&apos;ve showed up previously otherwise.

The documentation in the ChangeLog shows these tests passing even back to clm4_0_22. I&apos;m not sure what to think here. I&apos;ll rerun one of these for clm4_0_26 and clm4_0_25 and see what I get...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>3871</commentid>
    <comment_count>5</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-04-01 11:40:54 -0600</bug_when>
    <thetext>OK, so the erL83 test PASSes on clm4_0_24 and clm4_0_25 -- but fails on clm4_0_26.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>3872</commentid>
    <comment_count>6</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-04-01 12:51:12 -0600</bug_when>
    <thetext>The code differences between 25 and 26 were trivial, and didn&apos;t explain the problem. It turns out what does -- is the version of cprnc used. In 26 the newer version is used and apparently it compares the indices -- but the earlier one didn&apos;t. When I run the same test for older version of clm (clm4_0_25 and even clm4_0_14) -- I get fails on the tests when using the newer cprnc (updating CLM_compare.sh and test_driver.sh).

So this is a long-standing problem that just shows up due to the newer version of cprnc. When I was figuring out the issues with the newer cprnc in the clm4_0_26 tag, I must not have rerun the tests that passed before.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>3874</commentid>
    <comment_count>7</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-04-01 13:55:27 -0600</bug_when>
    <thetext>OK, so I talked about this with Keith and Sam. First of all in principle the indices are important and 1D vector mode is important. However, Mariana worked with Sam and showed him indices that were wrong and verified he wasn&apos;t using them. interpinic also doesn&apos;t use them as they are incorrect. You can derive them from other indices that do exist.

I also verified that with the new cprnc, I get my test to PASS when I don&apos;t write out the fields: land1d_gi, cols1d_li, cols1d_gi, pfts1d_gi, pfts1d_li, and pfts1d_ci in histFileMod.F90 and subgridRestMod.F90. So for now that&apos;s what I&apos;ll do. But, at some point we may want to fix this in the future. I&apos;ll continue to do work on it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>3929</commentid>
    <comment_count>8</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-05-02 14:35:42 -0600</bug_when>
    <thetext>In clm4_0_27 -- I comment out writing out the fields that are wrong. But, we should figure out why they are wrong.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5445</commentid>
    <comment_count>9</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2013-08-31 06:35:23 -0600</bug_when>
    <thetext>I noticed that

        int pfts1d_ci(pft) ;

is still in the restart file; should this be removed like the other indices were?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5446</commentid>
    <comment_count>10</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2013-08-31 06:44:25 -0600</bug_when>
    <thetext>Regarding this: Also indices seem to change... (land1d_g, cols1d_g, etc.):

I was thinking about this issue with respect to the 1-d vector reordering that was done recently in the clm4.5 code (in clm4_5_21, I believe). I believe (but may be wrong) that the indices in memory do not correspond to indices on the file. I&apos;m not sure this explains why these depended on the decomposition before, but I think they will almost certainly depend on the decomposition now.

The issue, I think, is that the arrangement in memory (during a run) does depend on the decomposition - both on the number of processors and on the number of threads (or more precisely, the number of clumps per processor). Mariana went to some pains to make the arrangement of points on the restart file independent of decomposition. However, I think that land1d_g, cols1d_g, etc. refer to the indices in MEMORY, not the indices on the file.

If these variables are desired on the restart file - and 1-d history files (with dov2xy = .false.), a possible workaround would be to also write variables like the following: land1d_l, cols1d_c, etc. These would give the index of each point in memory. Note that we do NOT expect cols1d_c(1) to be 1 - again, because the arrangement on the file differs from the arrangement in memory. Furthermore, these variables - like the other indices - would differ depending on the decomposition. But at least it would let you do analyses using these variables.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5448</commentid>
    <comment_count>11</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2013-08-31 11:08:02 -0600</bug_when>
    <thetext>Something we gave up with the move from CLM stand-alone testing to CESM testing was the change of number of processors on restart. We assume that the model is able to do this and startup for any number of processors, regardless of how many processors the restart file was written with.

I think this issue underscores the importance of this issue and of adding testing for that ability into CESM testing (at least for components like CLM where this is expected).

It would be good to hear if the current model gives the same answers if you restart with a different number of processors.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5449</commentid>
    <comment_count>12</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2013-08-31 15:37:42 -0600</bug_when>
    <thetext>Regarding Erik&apos;s last comment: I think we should be okay if we have a PEM (and once threading is fixed, a PET) test that starts up from initial conditions. I haven&apos;t checked if the current tests do so.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7908</commentid>
    <comment_count>13</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2017-03-21 10:27:00 -0600</bug_when>
    <thetext>Sean Swenson has this to say...

hi, erik,
  I think the solution to this problem in histfileMod:

       ! --- EBK Do NOT write out indices that are incorrect 4/1/2011 --- Bug 1310

can be fixed using the code from subgridRestMod:

    do p=bounds%begp,bounds%endp
       iparr(p) = GetGlobalIndex(decomp_index=patch%column(p), clmlevel=namec)
    enddo
    call restartvar(ncid=ncid, flag=flag, varname=&apos;pfts1d_column_index&apos;, xtype=ncd_int,   &amp;
         dim1name=&apos;pft&apos;,                                                                  &amp;
         long_name=&apos;column index of corresponding pft&apos;,                                   &amp;
         interpinic_flag=&apos;skip&apos;, readvar=readvar, data=iparr)


  it seems to work for me offline when I use the pfts1d_column_index from the restart file instead of the pfts1d_ci from the history file.  I haven&apos;t actually implemented code in histfileMod.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1281</bug_id>
          
          <creation_ts>2011-02-05 10:48:00 -0700</creation_ts>
          <short_desc>[CLM-only] Improve modularity of mksurfdata...</short_desc>
          <delta_ts>2016-05-05 14:15:08 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P4</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>mvertens</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>3776</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-02-05 10:48:38 -0700</bug_when>
    <thetext>mksurfdata is structured to have some centralized modules to handle everything and then specific modules to handle the specifics of particular data that&apos;s brought in. Some of the data/code should be moved into the specific modules so that it can be restricted within that module. This means moving some of the information/code in: mksrfdat.F90, mkfileMod.F90, and mkvarctl.F90 into the specific modules like: mkharvestMod.F90, mkpftMod.F90 etc. The namelist data still needs to be public, but would only be used in mksrfdat.F90.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>3777</commentid>
    <comment_count>1</comment_count>
    <who name="Mariana Vertenstein">mvertens</who>
    <bug_when>2011-02-05 12:39:16 -0700</bug_when>
    <thetext>I am already doing this in my new mksurfdata branch code (which I still have to commit). I definitely think this should be done on my new branch rather than
on the trunk - since a restructuring should only be done once. Lets talk about this on Monday.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>3778</commentid>
    <comment_count>2</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-02-07 00:14:09 -0700</bug_when>
    <thetext>Hey Mariana

Yes, I don&apos;t want to do this on the trunk now. But, I did have to make some changes for Keith on the trunk and I noticed this as an issue. I did make a little progress here on the files I was working on. But, it would be nice if could happen on your branch.

And yes we can talk more Monday...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>3784</commentid>
    <comment_count>3</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-02-09 13:34:14 -0700</bug_when>
    <thetext>Some work on this in clm4_0_24</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>5305</commentid>
    <comment_count>4</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2013-06-27 11:30:44 -0600</bug_when>
    <thetext>See also the similar bug 1633</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1264</bug_id>
          
          <creation_ts>2011-01-04 16:14:00 -0700</creation_ts>
          <short_desc>[CLM-only] Incorrect documentation on the qflx_evap_tot variable in the code</short_desc>
          <delta_ts>2016-04-25 14:35:22 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>REOPENED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>trivial</bug_severity>
          <target_milestone>CLM5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>gbisht</cc>
    
    <cc>oleson</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>3716</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-01-04 16:14:23 -0700</bug_when>
    <thetext>Hello Erik,

While trying to understanding the CLM code for some of my work, I came across a comment in the CLM, which I believe is incorrect. The incorrect comment is present in clm4_0_16 tag. Forrest Hoffmann suggested, I should contact you regarding it.

For the data structure &apos;pft_wflux_type&apos;, the variable qflx_evap_tot(:) has a comment that
qflx_evap_tot = qflx_evap_soi + qflx_evap_veg + qflx_tran_veg;

though it is only
qflx_evap_tot = qflx_evap_soi + qflx_evap_veg (in biogeophys/Biogeophysics2Mod.F90 line 394)

The incorrect comment appears in a couple of files. Since this is a comment only, it isn&apos;t that a big issue; but the correction would help in documenting what the variable qflx_evap_tot actually stores.

cheers,
Gautam.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>3717</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-01-04 16:15:43 -0700</bug_when>
    <thetext>The same problem is in:

BalanceCheckMod
BioPhysics1Mod
BioPhysicsLakeMod

as well.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>3718</commentid>
    <comment_count>2</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-01-04 16:24:09 -0700</bug_when>
    <thetext>Also in UrbanMod and BareGroundFluxesMod.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>3719</commentid>
    <comment_count>3</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-01-04 17:42:44 -0700</bug_when>
    <thetext>Comment from Keith...

Yes, looks like the comment(s) is wrong.
The comment in clm_atmlnd.F90 is also wrong:
    real(r8), pointer :: qflx_evap_tot(:)!qflx_evap(_soi + _veg) +
qflx_tran_veg
The long_name(s) for QFLX_EVAP_TOT in histFldsMod.F90 is wrong as well.


qflx_evap_veg is the sum of evaporation of canopy intercepted water
(qflx_evap_can) and transpiration (qflx_tran_veg).

So, could change it to:

qflx_evap_tot = qflx_evap_soi + qflx_evap_can + qflx_tran_veg

or:

qflx_evap_tot = qflx_evap_soi + qflx_evap_veg

I would prefer the first definition.

Keith</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>3727</commentid>
    <comment_count>4</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-01-07 16:48:23 -0700</bug_when>
    <thetext>OK, so here are the changes in the documentation for qflx_evap_tot to go in...

[yong:lnd/clm/src] erik% svn diff
Index: main/clm_atmlnd.F90
===================================================================
--- main/clm_atmlnd.F90	(revision 26281)
+++ main/clm_atmlnd.F90	(working copy)
@@ -74,7 +74,7 @@
      real(r8), pointer :: eflx_lh_tot(:)  !total latent HF (W/m**2)  [+ to atm]
      real(r8), pointer :: eflx_sh_tot(:)  !total sensible HF (W/m**2) [+ to atm]
      real(r8), pointer :: eflx_lwrad_out(:) !IR (longwave) radiation (W/m**2)
-     real(r8), pointer :: qflx_evap_tot(:)!qflx_evap(_soi + _veg) + qflx_tran_veg
+     real(r8), pointer :: qflx_evap_tot(:)!qflx_evap_soi + qflx_evap_can + qflx_tran_veg
      real(r8), pointer :: fsa(:)          !solar rad absorbed (total) (W/m**2)
      real(r8), pointer :: nee(:)          !net CO2 flux (kg CO2/m**2/s) [+ to atm]
      real(r8), pointer :: ram1(:)         !aerodynamical resistance (s/m)
Index: main/clmtype.F90
===================================================================
--- main/clmtype.F90	(revision 26281)
+++ main/clmtype.F90	(working copy)
@@ -669,7 +669,7 @@
    real(r8), pointer :: qflx_tran_veg(:)  !vegetation transpiration (mm H2O/s) (+ = to atm)
    real(r8), pointer :: qflx_evap_can(:)  !evaporation from leaves and stems 
    real(r8), pointer :: qflx_evap_soi(:)  !soil evaporation (mm H2O/s) (+ = to atm)
-   real(r8), pointer :: qflx_evap_tot(:)  !qflx_evap_soi + qflx_evap_veg + qflx_tran_veg
+   real(r8), pointer :: qflx_evap_tot(:)  !qflx_evap_soi + qflx_evap_can + qflx_tran_veg
    real(r8), pointer :: qflx_evap_grnd(:) !ground surface evaporation rate (mm H2O/s) [+]
    real(r8), pointer :: qflx_dew_grnd(:)  !ground surface dew formation (mm H2O /s) [+]
    real(r8), pointer :: qflx_sub_snow(:)  !sublimation rate from snow pack (mm H2O /s) [+]
Index: main/histFldsMod.F90
===================================================================
--- main/histFldsMod.F90	(revision 26281)
+++ main/histFldsMod.F90	(working copy)
@@ -4416,7 +4416,7 @@
          ptr_pft=clm3%g%l%c%p%pwf%qflx_evap_veg, default=&apos;inactive&apos;)
 
     call hist_addfld1d (fname=&apos;QFLX_EVAP_TOT&apos;, units=&apos;mm H2O/s&apos;, &amp;
-         avgflag=&apos;A&apos;, long_name=&apos;qflx_evap_soi + qflx_evap_veg + qflx_tran_veg&apos;, &amp;
+         avgflag=&apos;A&apos;, long_name=&apos;qflx_evap_soi + qflx_evap_can + qflx_tran_veg&apos;, &amp;
          ptr_pft=clm3%g%l%c%p%pwf%qflx_evap_tot, default=&apos;inactive&apos;, c2l_scale_type=&apos;urbanf&apos;)
 
     call hist_addfld1d (fname=&apos;QFLX_DEW_GRND&apos;, units=&apos;mm H2O/s&apos;, &amp;
Index: biogeophys/BalanceCheckMod.F90
===================================================================
--- biogeophys/BalanceCheckMod.F90	(revision 26281)
+++ biogeophys/BalanceCheckMod.F90	(working copy)
@@ -218,7 +218,7 @@
     real(r8), pointer :: eflx_dynbal(:)     ! energy conversion flux due to dynamic land cover change(W/m**2) [+ to atm]
     real(r8), pointer :: eflx_lh_tot(:)     ! total latent heat flux (W/m8*2)  [+ to atm]
     real(r8), pointer :: eflx_soil_grnd(:)  ! soil heat flux (W/m**2) [+ = into soil]
-    real(r8), pointer :: qflx_evap_tot(:)   ! qflx_evap_soi + qflx_evap_veg + qflx_tran_veg
+    real(r8), pointer :: qflx_evap_tot(:)   ! qflx_evap_soi + qflx_evap_can + qflx_tran_veg
     real(r8), pointer :: qflx_irrig(:)      ! irrigation flux (mm H2O /s)
     real(r8), pointer :: qflx_surf(:)       ! surface runoff (mm H2O /s)
     real(r8), pointer :: qflx_qrgwl(:)      ! qflx_surf at glaciers, wetlands, lakes
Index: biogeophys/Biogeophysics1Mod.F90
===================================================================
--- biogeophys/Biogeophysics1Mod.F90	(revision 26281)
+++ biogeophys/Biogeophysics1Mod.F90	(working copy)
@@ -174,7 +174,7 @@
     real(r8), pointer :: eflx_lh_tot_u(:) !urban total latent heat flux (W/m**2)  [+ to atm]
     real(r8), pointer :: eflx_lh_tot_r(:) !rural total latent heat flux (W/m**2)  [+ to atm]
     real(r8), pointer :: eflx_sh_veg(:)   !sensible heat flux from leaves (W/m**2) [+ to atm]
-    real(r8), pointer :: qflx_evap_tot(:) !qflx_evap_soi + qflx_evap_veg + qflx_tran_veg
+    real(r8), pointer :: qflx_evap_tot(:) !qflx_evap_soi + qflx_evap_can + qflx_tran_veg
     real(r8), pointer :: qflx_evap_veg(:) !vegetation evaporation (mm H2O/s) (+ = to atm)
     real(r8), pointer :: qflx_tran_veg(:) !vegetation transpiration (mm H2O/s) (+ = to atm)
     real(r8), pointer :: cgrnd(:)         !deriv. of soil energy flux wrt to soil temp [w/m2/k]
Index: biogeophys/Biogeophysics2Mod.F90
===================================================================
--- biogeophys/Biogeophysics2Mod.F90	(revision 26281)
+++ biogeophys/Biogeophysics2Mod.F90	(working copy)
@@ -158,7 +158,7 @@
     real(r8), pointer :: eflx_sh_tot(:)     ! total sensible heat flux (W/m**2) [+ to atm]
     real(r8), pointer :: eflx_sh_tot_u(:)   ! urban total sensible heat flux (W/m**2) [+ to atm]
     real(r8), pointer :: eflx_sh_tot_r(:)   ! rural total sensible heat flux (W/m**2) [+ to atm]
-    real(r8), pointer :: qflx_evap_tot(:)   ! qflx_evap_soi + qflx_evap_veg + qflx_tran_veg
+    real(r8), pointer :: qflx_evap_tot(:)   ! qflx_evap_soi + qflx_evap_can + qflx_tran_veg
     real(r8), pointer :: eflx_lh_tot(:)     ! total latent heat flux (W/m**2)  [+ to atm]
     real(r8), pointer :: eflx_lh_tot_u(:)   ! urban total latent heat flux (W/m**2)  [+ to atm]
     real(r8), pointer :: eflx_lh_tot_r(:)   ! rural total latent heat flux (W/m**2)  [+ to atm]
Index: biogeophys/Hydrology2Mod.F90
===================================================================
--- biogeophys/Hydrology2Mod.F90	(revision 26281)
+++ biogeophys/Hydrology2Mod.F90	(working copy)
@@ -114,7 +114,7 @@
     real(r8), pointer :: forc_rain(:)     ! rain rate [mm/s]
     real(r8), pointer :: forc_snow(:)     ! snow rate [mm/s]
     real(r8), pointer :: begwb(:)         ! water mass begining of the time step
-    real(r8), pointer :: qflx_evap_tot(:) ! qflx_evap_soi + qflx_evap_veg + qflx_tran_veg
+    real(r8), pointer :: qflx_evap_tot(:) ! qflx_evap_soi + qflx_evap_can + qflx_tran_veg
     real(r8), pointer :: bsw2(:,:)        ! Clapp and Hornberger &quot;b&quot; for CN code
     real(r8), pointer :: psisat(:,:)      ! soil water potential at saturation for CN code (MPa)
     real(r8), pointer :: vwcsat(:,:)      ! volumetric water content at saturation for CN code (m3/m3)
Index: biogeophys/BiogeophysicsLakeMod.F90
===================================================================
--- biogeophys/BiogeophysicsLakeMod.F90	(revision 26281)
+++ biogeophys/BiogeophysicsLakeMod.F90	(working copy)
@@ -138,7 +138,7 @@
 !
     real(r8), pointer :: qflx_prec_grnd(:)  ! water onto ground including canopy runoff [kg/(m2 s)]
     real(r8), pointer :: qflx_evap_soi(:)   ! soil evaporation (mm H2O/s) (+ = to atm)
-    real(r8), pointer :: qflx_evap_tot(:)   ! qflx_evap_soi + qflx_evap_veg + qflx_tran_veg
+    real(r8), pointer :: qflx_evap_tot(:)   ! qflx_evap_soi + qflx_evap_can + qflx_tran_veg
     real(r8), pointer :: qflx_snwcp_liq(:)  ! excess rainfall due to snow capping (mm H2O /s) [+]`
     real(r8), pointer :: qflx_snwcp_ice(:)  ! excess snowfall due to snow capping (mm H2O /s) [+]`
     real(r8), pointer :: eflx_sh_grnd(:)    ! sensible heat flux from ground (W/m**2) [+ to atm]
Index: biogeophys/UrbanMod.F90
===================================================================
--- biogeophys/UrbanMod.F90	(revision 26281)
+++ biogeophys/UrbanMod.F90	(working copy)
@@ -2620,7 +2620,7 @@
     real(r8), pointer :: qflx_evap_soi(:) ! soil evaporation (mm H2O/s) (+ = to atm)
     real(r8), pointer :: qflx_tran_veg(:) ! vegetation transpiration (mm H2O/s) (+ = to atm)
     real(r8), pointer :: qflx_evap_veg(:) ! vegetation evaporation (mm H2O/s) (+ = to atm)
-    real(r8), pointer :: qflx_evap_tot(:) ! qflx_evap_soi + qflx_evap_veg + qflx_tran_veg
+    real(r8), pointer :: qflx_evap_tot(:) ! qflx_evap_soi + qflx_evap_can + qflx_tran_veg
     real(r8), pointer :: t_ref2m(:)       ! 2 m height surface air temperature (K)
     real(r8), pointer :: q_ref2m(:)       ! 2 m height surface specific humidity (kg/kg)
     real(r8), pointer :: t_ref2m_u(:)     ! Urban 2 m height surface air temperature (K)
Index: biogeophys/HydrologyLakeMod.F90
===================================================================
--- biogeophys/HydrologyLakeMod.F90	(revision 26281)
+++ biogeophys/HydrologyLakeMod.F90	(working copy)
@@ -71,7 +71,7 @@
     real(r8), pointer :: t_grnd(:)        !ground temperature (Kelvin)
     real(r8), pointer :: qmelt(:)         !snow melt [mm/s]
     real(r8), pointer :: qflx_evap_soi(:) !soil evaporation (mm H2O/s) (+ = to atm)
-    real(r8), pointer :: qflx_evap_tot(:) !qflx_evap_soi + qflx_evap_veg + qflx_tran_veg
+    real(r8), pointer :: qflx_evap_tot(:) !qflx_evap_soi + qflx_evap_can + qflx_tran_veg
 !
 ! local pointers to implicit inout arrays
 !
Index: biogeophys/BareGroundFluxesMod.F90
===================================================================
--- biogeophys/BareGroundFluxesMod.F90	(revision 26281)
+++ biogeophys/BareGroundFluxesMod.F90	(working copy)
@@ -126,7 +126,7 @@
     real(r8), pointer :: eflx_sh_grnd(:)  ! sensible heat flux from ground (W/m**2) [+ to atm]
     real(r8), pointer :: eflx_sh_tot(:)   ! total sensible heat flux (W/m**2) [+ to atm]
     real(r8), pointer :: qflx_evap_soi(:) ! soil evaporation (mm H2O/s) (+ = to atm)
-    real(r8), pointer :: qflx_evap_tot(:) ! qflx_evap_soi + qflx_evap_veg + qflx_tran_veg
+    real(r8), pointer :: qflx_evap_tot(:) ! qflx_evap_soi + qflx_evap_can + qflx_tran_veg
     real(r8), pointer :: t_ref2m(:)       ! 2 m height surface air temperature (Kelvin)
     real(r8), pointer :: q_ref2m(:)       ! 2 m height surface specific humidity (kg/kg)
     real(r8), pointer :: t_ref2m_r(:)     ! Rural 2 m height surface air temperature (Kelvin)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>3735</commentid>
    <comment_count>5</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-01-11 11:52:39 -0700</bug_when>
    <thetext>Fixed in clm4_0_20</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>6874</commentid>
    <comment_count>6</comment_count>
    <who name="Gautam Bisht">gbisht</who>
    <bug_when>2015-06-26 00:25:34 -0600</bug_when>
    <thetext>Erik,

It appears that there still remains one instance of the incorrect comment in clm4_5_1_r111 at line no. 127 of components/clm/src/biogeophys/SoilFluxesMod.F90. It seems that this incorrect comment was introduced in clm4_5_1_r081 when models/lnd/clm/src/biogeophys/SoilFluxesMod.F90 was added to repository.

-Gautam.</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1205</bug_id>
          
          <creation_ts>2010-08-24 11:09:00 -0600</creation_ts>
          <short_desc>(CLM-only) Don&apos;t set h2osoi_vol for lake or urban</short_desc>
          <delta_ts>2016-05-05 14:14:23 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P5</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>Future</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Erik Kluzek">erik</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>dlawren</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
    
    <cc>subin</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>3462</commentid>
    <comment_count>0</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2010-08-24 11:09:10 -0600</bug_when>
    <thetext>BiogeophysRest has the following...

       do c = begc,endc
          l = clandunit(c)
          if ( ltype(l) == istdlak .or. ltype(l) == istslak )then
             nlevs = nlevlak
          else if ( ltype(l) == isturb )then
             nlevs = nlevurb
          else
             nlevs = nlevgrnd
          end if
          ! NOTE: THIS IS A MEMORY INEFFICIENT COPY
          do j = 1,nlevs
             cptr%cws%h2osoi_vol(c,j) = cptr%cws%h2osoi_liq(c,j)/(cptr%cps%dz(c,j)*denh2o) &amp;
                                      + cptr%cws%h2osoi_ice(c,j)/(cptr%cps%dz(c,j)*denice)
          end do
       end do

It really should always run over nlevgrnd, and NOT do this step if it&apos;s a lake or urban land unit. We&apos;ll need to initialize h2osoi_vol to spval to do this, so that it will work for history output. But, I think that everything now has appropriate filtering so that it isn&apos;t needed by anything else later on.

Here&apos;s email from Zack Subin on this...

Hi Erik,

Yes, I think that h2osoi_vol shouldn&apos;t be set at all for the (current
unimproved) lakes; I&apos;m not sure about urban.

--Zack

On Mon, 23 Aug 2010 17:59 -0600, &quot;Erik Kluzek&quot; &lt;erik@ucar.edu&gt; wrote:
Hey Zack

Yes, if you ran with nlevlak&gt;nlevgrnd you would have subscript overflow,
and mess up memory. Whether that would screw up your results depends on
exactly what part of memory gets corrupted, and if it&apos;s critical or not.

I think the issue is that for urban and lake, dz and h2osoi_liq/ice are
only set to something reasonable up to nlevurb or nlevlak, but are set to
NaN after that, so if floating-point-trapping is on, it will die with an
error.

So possibly what should be done is that maybe these shouldn&apos;t be set at
all for urban and lake in BiogeoRestMod?

On Aug 5, 2010, at 9:21 PM, Zack Subin wrote:

Hi,

The code below doesn&apos;t make any sense to me.  For the current lake
model, h2osoi_vol is meaningless (so it&apos;s at best redundant), but
moreover should have dimensions 1:nlevgrnd, not 1:nlevlak.  This doesn&apos;t
mess up the history because h2osoi_vol is reset to spval in
HydrologyLake.  However, if someone ran with nlevlak &gt; nlevsoi, then
this could cause a seg fault or memory corruption, yes?  Not sure why
that hasn&apos;t happened to me when running with 25 lake layers (or it
didn&apos;t change another variable egregiously enough for me to notice it if
it did...), and I must not have used restarts with debugging on.

--Zack

     do c = begc,endc
        l = clandunit(c)
        if ( ltype(l) == istdlak .or. ltype(l) == istslak )then
           nlevs = nlevlak
        else if ( ltype(l) == isturb )then
           nlevs = nlevurb
        else
           nlevs = nlevgrnd
        end if
        ! NOTE: THIS IS A MEMORY INEFFICIENT COPY
        do j = 1,nlevs
           cptr%cws%h2osoi_vol(c,j) =
           cptr%cws%h2osoi_liq(c,j)/(cptr%cps%dz(c,j)*denh2o) &amp;
                                    +
                                    cptr%cws%h2osoi_ice(c,j)/(cptr%cps%dz(c,j)*denice)
        end do
     end do
___________________________________________________
Zack Subin
PhD Student, UC Berkeley Energy &amp; Resources Group /
Lawrence Berkeley Lab Earth Sciences Division

subin@berkeley.edu | subin@post.harvard.edu
zack.subin@fastmail.fm | zmsubin@lbl.gov


Erik Kluzek, (CGD at NCAR)
National Center for Atmospheric Research
Boulder CO, (off) (303)497-1326 (fax) (303)497-1348
------------------ Home page ------------------------
         http://www.cgd.ucar.edu/~erik
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!




___________________________________________________
Zack Subin
PhD Student, UC Berkeley Energy &amp; Resources Group /
Lawrence Berkeley Lab Earth Sciences Division

subin@berkeley.edu | subin@post.harvard.edu
zack.subin@fastmail.fm | zmsubin@lbl.gov</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>3485</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2010-08-31 14:21:50 -0600</bug_when>
    <thetext>So I tried making this change, but I ended up with an exact restart problem. The restart problem makes me think that an incorrect usage of h2osoi_vol is being done for possibly urban points.

Here&apos;s the code change I put in...

&gt; diff -c BiogeophysRestMod.F90 BiogeophysRestMod.F90.new
*** BiogeophysRestMod.F90       Tue Aug 31 13:52:10 2010
--- BiogeophysRestMod.F90.new   Tue Aug 31 13:50:36 2010
***************
*** 1551,1577 ****
      if (flag == &apos;read&apos; ) then
         do c = begc,endc
            l = clandunit(c)
!           if ( ltype(l) == istdlak .or. ltype(l) == istslak )then
!              nlevs = nlevlak
!           else if ( ltype(l) == isturb )then
!              nlevs = nlevurb
!           else
!              nlevs = nlevgrnd
            end if
-           ! NOTE: THIS IS A MEMORY INEFFICIENT COPY
-           do j = 1,nlevs
-              cptr%cws%h2osoi_vol(c,j) = cptr%cws%h2osoi_liq(c,j)/(cptr%cps%dz(c,j)*denh2o) &amp;
-                                       + cptr%cws%h2osoi_ice(c,j)/(cptr%cps%dz(c,j)*denice)
-           end do
         end do
-

         ! ------------------------------------------------------------
         ! If initial run -- ensure that water is properly bounded
--- 1551,1564 ----
      if (flag == &apos;read&apos; ) then
         do c = begc,endc
            l = clandunit(c)
!           if ( ltype(l) /= istdlak .and. ltype(l) /= istslak .and. ltype(l) /= isturb )then
!              ! NOTE: THIS IS A MEMORY INEFFICIENT COPY
!              do j = 1,nlevgrnd
!                 cptr%cws%h2osoi_vol(c,j) = cptr%cws%h2osoi_liq(c,j)/(cptr%cps%dz(c,j)*denh2o) &amp;
!                                          + cptr%cws%h2osoi_ice(c,j)/(cptr%cps%dz(c,j)*denice)
!              end do
            end if
         end do

         ! ------------------------------------------------------------
         ! If initial run -- ensure that water is properly bounded
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>3486</commentid>
    <comment_count>2</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2010-08-31 14:27:47 -0600</bug_when>
    <thetext>Here&apos;s a list of restart tests that both PASS and fail with the change in it...

grep FAIL td.795346.status | grep TER
007 erHS3 TER.sh _nrcnsc_do clm_usrdat 20030101:NONE:1800 13x12pt_f19_alaskaUSA gx1v6 -3+-3 arb_ic FAIL! rc= 13
011 erCA4 TER.sh _nrsc_ds clm_std^nl_urb 20021001:NONE:3600 1x1_camdenNJ navy -45+-45 arb_ic ....FAIL! rc= 13
015 erNB4 TER.sh _nrmexsc_ds clm_urb1pt^nl_urb 19931201:NONE:3600 1x1_mexicocityMEX navy 57+100 arb_FAIL! rc= 13
025 erAK4 TER.sh _sc_ds clm_std^nl_ptsmode 20030101:NONE:1800 1.9x2.5 gx1v6 -5+-5 cold ..........FAIL! rc= 7
034 erF93 TER.sh 17p_vodsrsc_do clm_std^nl_urb 20021230:NONE:1800 4x5 gx3v7 10+38 cold ..........FAIL! rc= 13
038 erL83 TER.sh _nrsc_do clm_std^nl_urb 20020115:NONE:3600 5x5_amazon navy -5+-5 arb_ic ........FAIL! rc= 13
&gt; !124
grep PASS td.411417.status | grep TER
051 erV61 TER.sh _mec10sc_dh clm_glcmec 19980115:NONE:1800 1.9x2.5 gx1v6 10+38 arb_ic ...........PASS
&gt; grep FAIL td.411417.status | grep TER
002 erA91 TER.sh _sc_dh clm_std^nl_urb 20030101:NONE:3600 4x5 gx3v7 -3+-3 arb_ic ................FAIL! rc= 13
006 erD91 TER.sh _persc_dh clm_per^nl_urb 20021231:NONE:1200 4x5 gx3v7 72+72 cold ...............FAIL! rc= 5
009 erE91 TER.sh 4p_vodsrsc_dh clm_std^nl_urb 20021230:NONE:1800 4x5 gx3v7 10+38 arb_ic .........FAIL! rc= 13
014 erF92 TER.sh 17p_vodsrsc_dm clm_std^nl_urb 20021230:NONE:1800 4x5 gx3v7 10+38 cold ..........FAIL! rc= 13
018 erEH1 TER.sh 4p_vodsrsc_dh clm_std^nl_urb 20021231:NONE:3600 1.9x2.5^0.9x1.25 gx1v6 10+38 arb_icFAIL! rc= 13
022 erHN1 TER.sh 17p_cnsc_dh clm_transient_rcp8.5 20051220:NONE:1800 1.9x2.5 gx1v6@1850-2100 -3+-7 cFAIL! rc= 5
026 erHO2 TER.sh 17p_cnsc_dm clm_drydep 20000704:NONE:1800 10x15 USGS@2000 -3+-7 cold ...........FAIL! rc= 13
030 erG41 TER.sh 17p_sc_dh clm_pftdyn 10001230:NONE:1800 10x15 USGS@1000-1002 72+72 arb_ic ......FAIL! rc= 5
035 erH41 TER.sh 17p_cnsc_dh clm_std^nl_noicertm_sclharv 20021230:NONE:1800 10x15 USGS@2000 10+38 coFAIL! rc= 13
039 erC45 TER.sh 17p_sc_m clm_pftdyn 18501230:NONE:3600 10x15 USGS@1850-2000 -3+-7 arb_ic .......FAIL! rc= 13
043 erC61 TER.sh _scnv_dh clm_std^nl_urb 20020101:NONE:1800 1.9x2.5 gx1v6 10+38 startup .........FAIL! rc= 13
047 erH52 TER.sh 17p_cnsc_dm clm_std^nl_urb 20020115:NONE:1800 10x15 USGS@2000 10+38 cold .......FAIL! rc= 13
056 erLI1 TER.sh _sc_dh clm_std 20020101:NONE:1800 94x192 T62 -5+-5 arb_ic ......................FAIL! rc= 5
060 erL58 TER.sh _sc_dh clm_std^nl_crcrop 20020115:NONE:1800 10x15 USGS 72+72 arb_ic ............FAIL! rc= 13
064 erJ61 TER.sh 4p_casasc_dh clm_std^nl_urb 20021230:NONE:1800 1.9x2.5 gx1v6 10+38 cold ........FAIL! rc= 13
&gt; grep PASS td.795346.status | grep TER
002 erA74 TER.sh _nrsc_ds clm_std^nl_urb 20030101:NONE:1800 1x1_brazil navy -5+-5 arb_ic ........PASS
019 erJ74 TER.sh 4p_nrcasasc_ds clm_std^nl_urb 10001230:NONE:3600 1x1_tropicAtl test -10+-10 arb_ic PASS
029 erAK8 TER.sh _sc_ds clm_std^nl_ptsmode_ocn 20030101:NONE:1800 1.9x2.5 gx1v6 -5+-5 cold ......PASS
042 erK74 TER.sh 17p_cndvsc_s clm_std 19971231:NONE:1800 1x1_brazil navy -334+-336 arb_ic .......PASS
046 erV63 TER.sh _mec10sc_do clm_glcmec 19980115:NONE:1800 1.9x2.5 gx1v6 10+38 arb_ic ...........PASS
050 erHQ4 TER.sh _nrcnsc_ds clm_drydep 20000214:NONE:1800 1x1_brazil navy@2000 -3+-7 cold .......PASS
</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>3501</commentid>
    <comment_count>3</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2010-09-09 15:10:07 -0600</bug_when>
    <thetext>I tried adding the &quot;-lastmonth&quot; option to the build_streams call in datm.cpl7.template and it now works correctly. The template change is as follows...

***************
*** 992,998 ****

  EOF

! set bs0opts = &quot;$bsopts -b $year_start -e $year_end -lastmonth&quot;

  cat &gt;&gt; $CASEBUILD/datm.buildnml.csh &lt;&lt; EOF
  cat &gt;! $STREAM1TXT &lt;&lt; EOF1
--- 992,998 ----

  EOF

! set bs0opts = &quot;$bsopts -b $year_start -e $year_end &quot;

  cat &gt;&gt; $CASEBUILD/datm.buildnml.csh &lt;&lt; EOF
  cat &gt;! $STREAM1TXT &lt;&lt; EOF1

(To test running over a single year, I also had to set the year_start=year_end=2).</thetext>
  </long_desc>
      
      

    </bug>
    <bug>
          <bug_id>1127</bug_id>
          
          <creation_ts>2010-03-18 11:33:00 -0600</creation_ts>
          <short_desc>init_interp does not work for CNDV or ED, or any future internally-generated land-cover dynamics</short_desc>
          <delta_ts>2016-11-04 13:50:25 -0600</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>CCSM/CESM CLM</product>
          <component>CLM 5.0</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>Future</target_milestone>
          <dependson>1303</dependson>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Sam Levis">slevis</reporter>
          <assigned_to name="Erik Kluzek">erik</assigned_to>
          <cc>andre</cc>
    
    <cc>dlawren</cc>
    
    <cc>erik</cc>
    
    <cc>rfisher</cc>
    
    <cc>sacks</cc>
          <cf_fixedinversion></cf_fixedinversion>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>3260</commentid>
    <comment_count>0</comment_count>
    <who name="Sam Levis">slevis</who>
    <bug_when>2010-03-18 11:33:09 -0600</bug_when>
    <thetext>Interpinic has not worked for the old dgvm since probably before clm3.5. Interpinic has not been tested, yet, for CNDV. Therefore, we assume that it does not work.

With the clm4 we will supply spun up initial conditions for CNDV for year 2000, 2 degree simulations. Users will need to complete their own spin ups for other CNDV simulations.

We need to convey the above info in the clm4 user&apos;s guide.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>3813</commentid>
    <comment_count>1</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2011-03-02 13:01:29 -0700</bug_when>
    <thetext>After discussing this with Sam, we think the issue with interpinic is that it will need to map the pft weights. Whereas the way interpinic works now is to only map that for which the pft weights are non-zero and leave the pft weights as they are. What will need to happen is that the pft weights will need to be mapped as well as the other variables.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>4563</commentid>
    <comment_count>2</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2012-06-25 11:01:45 -0600</bug_when>
    <thetext>Bill responds with..


I wonder if some of this argues for using netcdf4-formatted files, at least for certain files (e.g., the cpl hist files that may be used to drive later runs). I ran a test that showed that using netcdf4 avoids the end-of-month cost in datm – presumably there is a different storage order when using netcdf4/hdf format. However, the cost of reading the data variables increased when using netcdf4 format – though the total datm cost was still lower than before. (I saw similar behavior when converting time to a non-unlimited dimension -- your suggestion (4) -- although netcdf4 gave better overall timing than netcdf3 without the unlimited dimension.) (Also note that there are a number of tuneable parameters in netcdf4 format that can be played with to improve performance.) This all means that there would have to be changes made to the output routines (or post-processing done on the output files) -- but I don&apos;t think anything would have to be changed in the input routines.

If memory serves, the example you are describing has monthly precip data, daily radiation data, and 3-hourly state data (eg wind &amp; temperature) -- if that&apos;s the case then three streams are required because there are three different time-axis / time-coordinates.  Assuming the time-axis was unlimited (in the netcdf sense), these three streams couldn&apos;t be in one netcdf file because there can be only one unlimited dimension per file.

There may be some differences in the time axis in the standard CLM forcing, along the lines of what you mention. Part of the complication, though, arises from the fact that in our case we&apos;re using cpl hist data, using a MOAR run (using datm_mode=CPLHIST, or something like that). So in our case, all the fields are on the same file, with the same temporal resolution. I think there is still a need for different streams, though, because of the different time interpolation methods. But maybe there&apos;s some other way to deal with that?

Regarding your possible solutions: 

(1) put the data on a disk with better bandwidth to the running executable


(1) definitely makes sense, if cisl can provide guidance in this respect.

(3) have the netcdf lib read the unlimited dim time coords more efficiently (if this is possible), and maybe


I like (3) in theory, but based on my very limited understanding of large-block file systems, I&apos;m not sure that will be possible (maybe someone else knows differently, though?).

(2) have the shr_stream module not read the entire time axis when it opens the file, but rather read the time coords as needed, and maybe


I agree that (2) isn&apos;t ideal, but it may be the way to get the best performance.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>4564</commentid>
    <comment_count>3</comment_count>
    <who name="Erik Kluzek">erik</who>
    <bug_when>2012-06-25 11:02:46 -0600</bug_when>
    <thetext>(In reply to comment #2)
&gt; Bill responds with..
&gt; 
&gt; 
&gt; I wonder if some of this argues for using netcdf4-formatted files, at least for
&gt; certain files (e.g., the cpl hist files that may be used to drive later runs).
&gt; I ran a test that showed that using netcdf4 avoids the end-of-month cost in
&gt; datm – presumably there is a different storage order when using netcdf4/hdf
&gt; format. However, the cost of reading the data variables increased when using
&gt; netcdf4 format – though the total datm cost was still lower than before. (I saw
&gt; similar behavior when converting time to a non-unlimited dimension -- your
&gt; suggestion (4) -- although netcdf4 gave better overall timing than netcdf3
&gt; without the unlimited dimension.) (Also note that there are a number of
&gt; tuneable parameters in netcdf4 format that can be played with to improve
&gt; performance.) This all means that there would have to be changes made to the
&gt; output routines (or post-processing done on the output files) -- but I don&apos;t
&gt; think anything would have to be changed in the input routines.
&gt; 
&gt; If memory serves, the example you are describing has monthly precip data, daily
&gt; radiation data, and 3-hourly state data (eg wind &amp; temperature) -- if that&apos;s
&gt; the case then three streams are required because there are three different
&gt; time-axis / time-coordinates.  Assuming the time-axis was unlimited (in the
&gt; netcdf sense), these three streams couldn&apos;t be in one netcdf file because there
&gt; can be only one unlimited dimension per file.
&gt; 
&gt; There may be some differences in the time axis in the standard CLM forcing,
&gt; along the lines of what you mention. Part of the complication, though, arises
&gt; from the fact that in our case we&apos;re using cpl hist data, using a MOAR run
&gt; (using datm_mode=CPLHIST, or something like that). So in our case, all the
&gt; fields are on the same file, with the same temporal resolution. I think there
&gt; is still a need for different streams, though, because of the different time
&gt; interpolation methods. But maybe there&apos;s some other way to deal with that?
&gt; 
&gt; Regarding your possible solutions: 
&gt; 
&gt; (1) put the data on a disk with better bandwidth to the running executable
&gt; 
&gt; 
&gt; (1) definitely makes sense, if cisl can provide guidance in this respect.
&gt; 
&gt; (3) have the netcdf lib read the unlimited dim time coords more efficiently (if
&gt; this is possible), and maybe
&gt; 
&gt; 
&gt; I like (3) in theory, but based on my very limited understanding of large-block
&gt; file systems, I&apos;m not sure that will be possible (maybe someone else knows
&gt; differently, though?).
&gt; 
&gt; (2) have the shr_stream module not read the entire time axis when it opens the
&gt; file, but rather read the time coords as needed, and maybe
&gt; 
&gt; 
&gt; I agree that (2) isn&apos;t ideal, but it may be the way to get the best
&gt; performance.

Whoops added to wrong bug!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>4566</commentid>
    <comment_count>4</comment_count>
    <who name="Sam Levis">slevis</who>
    <bug_when>2012-06-25 13:07:59 -0600</bug_when>
    <thetext>I post this info in case we decide that want to pursue this fix.

Guiling Wang (UConn) got interpinic to work with CNDV. She sent me her interpinic.F90 and BiogeophysRestMod.F90 with the following email dated 5/30/2012, which I have filed in my /clm/interpinic email folder:

Hi Sam,

This is the interpinic.F90 I modified. In addition to the changes to make sure that all 17 PFTs at an individual grid cell are from the same grid cell, I also needed to take several variables out of the list of cycled variables.  I therefore need the corresponding change in BiogeophysRestMod.F90 (the segment of the code with &quot;EaSM&quot; labelled). I think it is good to keep these changes in BiogeophysRestMod.F90 for future releases:
(1)  Otherwise the model does not work if PFT_ variables are not cycled in interpinic. In this case the changes are absolutely necessary.
(2) If the PFT_variables are cycled, then the changes I added to BiogeophysRestMod won&apos;t make any difference.
So the added portion works either way.

FYI, most of the changes are indicated with EaSM, either at the end of the line, or at the beginning and end of a segment of code.

Please let me know if you spot any problem.

Thanks,
Guiling</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7137</commentid>
    <comment_count>5</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2015-09-18 11:46:50 -0600</bug_when>
    <thetext>In principle, this same problem would apply to any aspect of dynamic landunits / columns / patches that is generated internally by CLM. So far, I believe that would just apply to ED: all other aspects of the dynamics are either read from file (transient crops &amp; PFTs) or come from another component (dynamic glacier area).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7138</commentid>
    <comment_count>6</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2015-09-18 11:48:48 -0600</bug_when>
    <thetext>I also noticed that the allPFTSfromSameGC flag that used to be present in interpinic is no longer present in the clm4.5 and later initInterp. I believe that flag related to the operation of CNDV. So something like that may need to be brought back if we want interpinic to work for CNDV.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7728</commentid>
    <comment_count>7</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-11-04 13:49:10 -0600</bug_when>
    <thetext>This is also somewhat of an issue for glaciers, for which the area comes from GLC, since the fields from GLC aren&apos;t available at initialization.

I&apos;m working around that issue with some special-purpose code for glaciers at the start of the driver run loop, like this (in clm_driver.F90):

    ! ========================================================================
    ! In the first time step of a run that used cold start or init_interp, glacier areas
    ! will start at whatever is specified on the surface dataset, because coupling fields
    ! from GLC aren&apos;t received until the run loop. Thus, CLM will see a potentially large,
    ! fictitious glacier area change in the first time step after cold start or
    ! init_interp. We don&apos;t want this fictitious area change to result in any state or
    ! flux adjustments. Thus, we apply this area change here, at the start of the driver
    ! loop, so that in dynSubgrid_driver, it will look like there is no glacier area
    ! change in the first time step.
    !
    ! This needs to happen very early in the run loop, before any balance checks are
    ! initialized, because - by design - this doesn&apos;t conserve mass at the grid cell
    ! level. (The whole point of this code block is that we adjust areas without doing
    ! the typical state or flux adjustments that need to accompany those area changes for
    ! conservation.)
    !
    ! This accomplishes approximately the same effect that we would get if we were able to
    ! update glacier areas in initialization. The one difference - and minor, theoretical
    ! problem - that could arise from this start-of-run-loop update is: If the first time
    ! step of the CESM run loop looked like: (1) GLC runs and updates glacier area (i.e.,
    ! glacier area changes in the first time step compared with what was set in
    ! initialization); (2) coupler passes new glacier area to CLM; (3) CLM runs. Then the
    ! code here would mean that the true change in glacier area between initialization and
    ! the first time step would be ignored as far as state and flux adjustments are
    ! concerned. But this is unlikely to be an issue in practice: Currently GLC doesn&apos;t
    ! update this frequently, and even if it did, the change in glacier area in a single
    ! time step would typically be very small.
    !
    ! If we are ever able to change the CESM initialization sequence so that GLC fields
    ! are passed to CLM in initialization, then this code block can be removed.
    ! ========================================================================

    need_glacier_initialization = (is_first_step() .and. &amp;
         (is_cold_start .or. is_interpolated_start))

    if (create_glacier_mec_landunit .and. need_glacier_initialization) then
       !$OMP PARALLEL DO PRIVATE (nc, bounds_clump)
       do nc = 1, nclumps
          call get_clump_bounds(nc, bounds_clump)

          call glc2lnd_inst%update_glc2lnd_non_topo( &amp;
               bounds = bounds_clump, &amp;
               glc_behavior = glc_behavior)

          call dynSubgrid_wrapup_weight_changes(bounds_clump, glc_behavior)

       end do
       !$OMP END PARALLEL DO
    end if



Ideally, though, we&apos;d either (a) get glacier areas from GLC -&gt; CLM in initialization, or (b) (relevant to this bug report) interpolate these glacier areas in init_interp. If we did (b) then I could probably remove the check for is_interpolated_start in the above code.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>7729</commentid>
    <comment_count>8</comment_count>
    <who name="Bill Sacks">sacks</who>
    <bug_when>2016-11-04 13:50:25 -0600</bug_when>
    <thetext>However, regarding comment 7: It&apos;s still possible that we&apos;d want to avoid doing the state / flux adjustments in the first time step after init_interp, because it may be the case that we often still have a large (fictitious) change in glacier area in that first time step. This would need more thought.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>